
ES_Design_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000670c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  0800681c  0800681c  0001681c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800698c  0800698c  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  0800698c  0800698c  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800698c  0800698c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800698c  0800698c  0001698c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006990  08006990  00016990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006994  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000428  20000074  08006a08  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000049c  08006a08  0002049c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bfbf  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dfd  00000000  00000000  0002c05c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d98  00000000  00000000  0002de60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ce0  00000000  00000000  0002ebf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000181ef  00000000  00000000  0002f8d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000db53  00000000  00000000  00047ac7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008babb  00000000  00000000  0005561a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e10d5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e74  00000000  00000000  000e1128  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08006804 	.word	0x08006804

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08006804 	.word	0x08006804

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__aeabi_d2uiz>:
 80008fc:	004a      	lsls	r2, r1, #1
 80008fe:	d211      	bcs.n	8000924 <__aeabi_d2uiz+0x28>
 8000900:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000904:	d211      	bcs.n	800092a <__aeabi_d2uiz+0x2e>
 8000906:	d50d      	bpl.n	8000924 <__aeabi_d2uiz+0x28>
 8000908:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800090c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000910:	d40e      	bmi.n	8000930 <__aeabi_d2uiz+0x34>
 8000912:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000916:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800091a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800091e:	fa23 f002 	lsr.w	r0, r3, r2
 8000922:	4770      	bx	lr
 8000924:	f04f 0000 	mov.w	r0, #0
 8000928:	4770      	bx	lr
 800092a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800092e:	d102      	bne.n	8000936 <__aeabi_d2uiz+0x3a>
 8000930:	f04f 30ff 	mov.w	r0, #4294967295
 8000934:	4770      	bx	lr
 8000936:	f04f 0000 	mov.w	r0, #0
 800093a:	4770      	bx	lr

0800093c <__aeabi_frsub>:
 800093c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000940:	e002      	b.n	8000948 <__addsf3>
 8000942:	bf00      	nop

08000944 <__aeabi_fsub>:
 8000944:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000948 <__addsf3>:
 8000948:	0042      	lsls	r2, r0, #1
 800094a:	bf1f      	itttt	ne
 800094c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000950:	ea92 0f03 	teqne	r2, r3
 8000954:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000958:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800095c:	d06a      	beq.n	8000a34 <__addsf3+0xec>
 800095e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000962:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000966:	bfc1      	itttt	gt
 8000968:	18d2      	addgt	r2, r2, r3
 800096a:	4041      	eorgt	r1, r0
 800096c:	4048      	eorgt	r0, r1
 800096e:	4041      	eorgt	r1, r0
 8000970:	bfb8      	it	lt
 8000972:	425b      	neglt	r3, r3
 8000974:	2b19      	cmp	r3, #25
 8000976:	bf88      	it	hi
 8000978:	4770      	bxhi	lr
 800097a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800097e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000982:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000986:	bf18      	it	ne
 8000988:	4240      	negne	r0, r0
 800098a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800098e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000992:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000996:	bf18      	it	ne
 8000998:	4249      	negne	r1, r1
 800099a:	ea92 0f03 	teq	r2, r3
 800099e:	d03f      	beq.n	8000a20 <__addsf3+0xd8>
 80009a0:	f1a2 0201 	sub.w	r2, r2, #1
 80009a4:	fa41 fc03 	asr.w	ip, r1, r3
 80009a8:	eb10 000c 	adds.w	r0, r0, ip
 80009ac:	f1c3 0320 	rsb	r3, r3, #32
 80009b0:	fa01 f103 	lsl.w	r1, r1, r3
 80009b4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80009b8:	d502      	bpl.n	80009c0 <__addsf3+0x78>
 80009ba:	4249      	negs	r1, r1
 80009bc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80009c0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80009c4:	d313      	bcc.n	80009ee <__addsf3+0xa6>
 80009c6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80009ca:	d306      	bcc.n	80009da <__addsf3+0x92>
 80009cc:	0840      	lsrs	r0, r0, #1
 80009ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80009d2:	f102 0201 	add.w	r2, r2, #1
 80009d6:	2afe      	cmp	r2, #254	; 0xfe
 80009d8:	d251      	bcs.n	8000a7e <__addsf3+0x136>
 80009da:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80009de:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009e2:	bf08      	it	eq
 80009e4:	f020 0001 	biceq.w	r0, r0, #1
 80009e8:	ea40 0003 	orr.w	r0, r0, r3
 80009ec:	4770      	bx	lr
 80009ee:	0049      	lsls	r1, r1, #1
 80009f0:	eb40 0000 	adc.w	r0, r0, r0
 80009f4:	3a01      	subs	r2, #1
 80009f6:	bf28      	it	cs
 80009f8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80009fc:	d2ed      	bcs.n	80009da <__addsf3+0x92>
 80009fe:	fab0 fc80 	clz	ip, r0
 8000a02:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a06:	ebb2 020c 	subs.w	r2, r2, ip
 8000a0a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a0e:	bfaa      	itet	ge
 8000a10:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a14:	4252      	neglt	r2, r2
 8000a16:	4318      	orrge	r0, r3
 8000a18:	bfbc      	itt	lt
 8000a1a:	40d0      	lsrlt	r0, r2
 8000a1c:	4318      	orrlt	r0, r3
 8000a1e:	4770      	bx	lr
 8000a20:	f092 0f00 	teq	r2, #0
 8000a24:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a28:	bf06      	itte	eq
 8000a2a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a2e:	3201      	addeq	r2, #1
 8000a30:	3b01      	subne	r3, #1
 8000a32:	e7b5      	b.n	80009a0 <__addsf3+0x58>
 8000a34:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a38:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a3c:	bf18      	it	ne
 8000a3e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a42:	d021      	beq.n	8000a88 <__addsf3+0x140>
 8000a44:	ea92 0f03 	teq	r2, r3
 8000a48:	d004      	beq.n	8000a54 <__addsf3+0x10c>
 8000a4a:	f092 0f00 	teq	r2, #0
 8000a4e:	bf08      	it	eq
 8000a50:	4608      	moveq	r0, r1
 8000a52:	4770      	bx	lr
 8000a54:	ea90 0f01 	teq	r0, r1
 8000a58:	bf1c      	itt	ne
 8000a5a:	2000      	movne	r0, #0
 8000a5c:	4770      	bxne	lr
 8000a5e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000a62:	d104      	bne.n	8000a6e <__addsf3+0x126>
 8000a64:	0040      	lsls	r0, r0, #1
 8000a66:	bf28      	it	cs
 8000a68:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000a6c:	4770      	bx	lr
 8000a6e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000a72:	bf3c      	itt	cc
 8000a74:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000a78:	4770      	bxcc	lr
 8000a7a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a7e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000a82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a86:	4770      	bx	lr
 8000a88:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000a8c:	bf16      	itet	ne
 8000a8e:	4608      	movne	r0, r1
 8000a90:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000a94:	4601      	movne	r1, r0
 8000a96:	0242      	lsls	r2, r0, #9
 8000a98:	bf06      	itte	eq
 8000a9a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000a9e:	ea90 0f01 	teqeq	r0, r1
 8000aa2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000aa6:	4770      	bx	lr

08000aa8 <__aeabi_ui2f>:
 8000aa8:	f04f 0300 	mov.w	r3, #0
 8000aac:	e004      	b.n	8000ab8 <__aeabi_i2f+0x8>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_i2f>:
 8000ab0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ab4:	bf48      	it	mi
 8000ab6:	4240      	negmi	r0, r0
 8000ab8:	ea5f 0c00 	movs.w	ip, r0
 8000abc:	bf08      	it	eq
 8000abe:	4770      	bxeq	lr
 8000ac0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ac4:	4601      	mov	r1, r0
 8000ac6:	f04f 0000 	mov.w	r0, #0
 8000aca:	e01c      	b.n	8000b06 <__aeabi_l2f+0x2a>

08000acc <__aeabi_ul2f>:
 8000acc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ad0:	bf08      	it	eq
 8000ad2:	4770      	bxeq	lr
 8000ad4:	f04f 0300 	mov.w	r3, #0
 8000ad8:	e00a      	b.n	8000af0 <__aeabi_l2f+0x14>
 8000ada:	bf00      	nop

08000adc <__aeabi_l2f>:
 8000adc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ae0:	bf08      	it	eq
 8000ae2:	4770      	bxeq	lr
 8000ae4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ae8:	d502      	bpl.n	8000af0 <__aeabi_l2f+0x14>
 8000aea:	4240      	negs	r0, r0
 8000aec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000af0:	ea5f 0c01 	movs.w	ip, r1
 8000af4:	bf02      	ittt	eq
 8000af6:	4684      	moveq	ip, r0
 8000af8:	4601      	moveq	r1, r0
 8000afa:	2000      	moveq	r0, #0
 8000afc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b00:	bf08      	it	eq
 8000b02:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b06:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b0a:	fabc f28c 	clz	r2, ip
 8000b0e:	3a08      	subs	r2, #8
 8000b10:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b14:	db10      	blt.n	8000b38 <__aeabi_l2f+0x5c>
 8000b16:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b1a:	4463      	add	r3, ip
 8000b1c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b20:	f1c2 0220 	rsb	r2, r2, #32
 8000b24:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b28:	fa20 f202 	lsr.w	r2, r0, r2
 8000b2c:	eb43 0002 	adc.w	r0, r3, r2
 8000b30:	bf08      	it	eq
 8000b32:	f020 0001 	biceq.w	r0, r0, #1
 8000b36:	4770      	bx	lr
 8000b38:	f102 0220 	add.w	r2, r2, #32
 8000b3c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b40:	f1c2 0220 	rsb	r2, r2, #32
 8000b44:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b48:	fa21 f202 	lsr.w	r2, r1, r2
 8000b4c:	eb43 0002 	adc.w	r0, r3, r2
 8000b50:	bf08      	it	eq
 8000b52:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_f2iz>:
 8000b58:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b5c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000b60:	d30f      	bcc.n	8000b82 <__aeabi_f2iz+0x2a>
 8000b62:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b66:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_f2iz+0x30>
 8000b6c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b70:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b74:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b78:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7c:	bf18      	it	ne
 8000b7e:	4240      	negne	r0, r0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0000 	mov.w	r0, #0
 8000b86:	4770      	bx	lr
 8000b88:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000b8c:	d101      	bne.n	8000b92 <__aeabi_f2iz+0x3a>
 8000b8e:	0242      	lsls	r2, r0, #9
 8000b90:	d105      	bne.n	8000b9e <__aeabi_f2iz+0x46>
 8000b92:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000b96:	bf08      	it	eq
 8000b98:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9c:	4770      	bx	lr
 8000b9e:	f04f 0000 	mov.w	r0, #0
 8000ba2:	4770      	bx	lr

08000ba4 <DWT_Delay_Init>:

/* private functions prototypes */
/**
 * @brief DWT Cortex Tick counter for Microsecond delay
 */
static uint32_t DWT_Delay_Init(void) {
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8000ba8:	4b14      	ldr	r3, [pc, #80]	; (8000bfc <DWT_Delay_Init+0x58>)
 8000baa:	68db      	ldr	r3, [r3, #12]
 8000bac:	4a13      	ldr	r2, [pc, #76]	; (8000bfc <DWT_Delay_Init+0x58>)
 8000bae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000bb2:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000bb4:	4b11      	ldr	r3, [pc, #68]	; (8000bfc <DWT_Delay_Init+0x58>)
 8000bb6:	68db      	ldr	r3, [r3, #12]
 8000bb8:	4a10      	ldr	r2, [pc, #64]	; (8000bfc <DWT_Delay_Init+0x58>)
 8000bba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000bbe:	60d3      	str	r3, [r2, #12]
  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk;
 8000bc0:	4b0f      	ldr	r3, [pc, #60]	; (8000c00 <DWT_Delay_Init+0x5c>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a0e      	ldr	r2, [pc, #56]	; (8000c00 <DWT_Delay_Init+0x5c>)
 8000bc6:	f023 0301 	bic.w	r3, r3, #1
 8000bca:	6013      	str	r3, [r2, #0]
  /* Enable clock cycle counter */
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000bcc:	4b0c      	ldr	r3, [pc, #48]	; (8000c00 <DWT_Delay_Init+0x5c>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a0b      	ldr	r2, [pc, #44]	; (8000c00 <DWT_Delay_Init+0x5c>)
 8000bd2:	f043 0301 	orr.w	r3, r3, #1
 8000bd6:	6013      	str	r3, [r2, #0]
  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000bd8:	4b09      	ldr	r3, [pc, #36]	; (8000c00 <DWT_Delay_Init+0x5c>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	605a      	str	r2, [r3, #4]
  /* 3 NO OPERATION instructions */
  __NOP();
 8000bde:	bf00      	nop
  __NOP();
 8000be0:	bf00      	nop
  __NOP();
 8000be2:	bf00      	nop
  /* Check if clock cycle counter has started */
  if(DWT->CYCCNT)
 8000be4:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <DWT_Delay_Init+0x5c>)
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <DWT_Delay_Init+0x4c>
  {
    return 0;
 8000bec:	2300      	movs	r3, #0
 8000bee:	e000      	b.n	8000bf2 <DWT_Delay_Init+0x4e>
  }
  else
  {
    return 1;
 8000bf0:	2301      	movs	r3, #1
  }
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bc80      	pop	{r7}
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	e000edf0 	.word	0xe000edf0
 8000c00:	e0001000 	.word	0xe0001000

08000c04 <DWT_Delay_us>:

__STATIC_INLINE void DWT_Delay_us(volatile uint32_t usec)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
 uint32_t clk_cycle_start = DWT->CYCCNT;
 8000c0c:	4b0d      	ldr	r3, [pc, #52]	; (8000c44 <DWT_Delay_us+0x40>)
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	60fb      	str	r3, [r7, #12]
 usec *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000c12:	f003 fb17 	bl	8004244 <HAL_RCC_GetHCLKFreq>
 8000c16:	4603      	mov	r3, r0
 8000c18:	4a0b      	ldr	r2, [pc, #44]	; (8000c48 <DWT_Delay_us+0x44>)
 8000c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c1e:	0c9b      	lsrs	r3, r3, #18
 8000c20:	687a      	ldr	r2, [r7, #4]
 8000c22:	fb02 f303 	mul.w	r3, r2, r3
 8000c26:	607b      	str	r3, [r7, #4]
 while ((DWT->CYCCNT - clk_cycle_start) < usec);
 8000c28:	bf00      	nop
 8000c2a:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <DWT_Delay_us+0x40>)
 8000c2c:	685a      	ldr	r2, [r3, #4]
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	1ad2      	subs	r2, r2, r3
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	429a      	cmp	r2, r3
 8000c36:	d3f8      	bcc.n	8000c2a <DWT_Delay_us+0x26>
}
 8000c38:	bf00      	nop
 8000c3a:	bf00      	nop
 8000c3c:	3710      	adds	r7, #16
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	e0001000 	.word	0xe0001000
 8000c48:	431bde83 	.word	0x431bde83

08000c4c <lcd16x2_enablePulse>:

/**
 * @brief Enable Pulse function
 */
static void lcd16x2_enablePulse(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_SET);
 8000c50:	4b0b      	ldr	r3, [pc, #44]	; (8000c80 <lcd16x2_enablePulse+0x34>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a0b      	ldr	r2, [pc, #44]	; (8000c84 <lcd16x2_enablePulse+0x38>)
 8000c56:	8811      	ldrh	r1, [r2, #0]
 8000c58:	2201      	movs	r2, #1
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f002 fef7 	bl	8003a4e <HAL_GPIO_WritePin>
  DWT_Delay_us(T_CONST);
 8000c60:	2014      	movs	r0, #20
 8000c62:	f7ff ffcf 	bl	8000c04 <DWT_Delay_us>
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_RESET);
 8000c66:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <lcd16x2_enablePulse+0x34>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4a06      	ldr	r2, [pc, #24]	; (8000c84 <lcd16x2_enablePulse+0x38>)
 8000c6c:	8811      	ldrh	r1, [r2, #0]
 8000c6e:	2200      	movs	r2, #0
 8000c70:	4618      	mov	r0, r3
 8000c72:	f002 feec 	bl	8003a4e <HAL_GPIO_WritePin>
  DWT_Delay_us(60);
 8000c76:	203c      	movs	r0, #60	; 0x3c
 8000c78:	f7ff ffc4 	bl	8000c04 <DWT_Delay_us>
}
 8000c7c:	bf00      	nop
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	20000090 	.word	0x20000090
 8000c84:	20000096 	.word	0x20000096

08000c88 <lcd16x2_rs>:

/**
 * @brief RS control
 */
static void lcd16x2_rs(bool state)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	4603      	mov	r3, r0
 8000c90:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, (GPIO_PinState)state);
 8000c92:	4b06      	ldr	r3, [pc, #24]	; (8000cac <lcd16x2_rs+0x24>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4a06      	ldr	r2, [pc, #24]	; (8000cb0 <lcd16x2_rs+0x28>)
 8000c98:	8811      	ldrh	r1, [r2, #0]
 8000c9a:	79fa      	ldrb	r2, [r7, #7]
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f002 fed6 	bl	8003a4e <HAL_GPIO_WritePin>
}
 8000ca2:	bf00      	nop
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	20000090 	.word	0x20000090
 8000cb0:	20000094 	.word	0x20000094

08000cb4 <lcd16x2_write>:

/**
 * @brief Write parallel signal to lcd
 */
static void lcd16x2_write(uint8_t wbyte)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b084      	sub	sp, #16
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	4603      	mov	r3, r0
 8000cbc:	71fb      	strb	r3, [r7, #7]
  uint8_t LSB_nibble = wbyte&0xF, MSB_nibble = (wbyte>>4)&0xF;
 8000cbe:	79fb      	ldrb	r3, [r7, #7]
 8000cc0:	f003 030f 	and.w	r3, r3, #15
 8000cc4:	73fb      	strb	r3, [r7, #15]
 8000cc6:	79fb      	ldrb	r3, [r7, #7]
 8000cc8:	091b      	lsrs	r3, r3, #4
 8000cca:	73bb      	strb	r3, [r7, #14]
  if(is8BitsMode)
 8000ccc:	4b5f      	ldr	r3, [pc, #380]	; (8000e4c <lcd16x2_write+0x198>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d05a      	beq.n	8000d8a <lcd16x2_write+0xd6>
  {
    //LSB data
    HAL_GPIO_WritePin(PORT_LSB, D0_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 8000cd4:	4b5e      	ldr	r3, [pc, #376]	; (8000e50 <lcd16x2_write+0x19c>)
 8000cd6:	6818      	ldr	r0, [r3, #0]
 8000cd8:	4b5e      	ldr	r3, [pc, #376]	; (8000e54 <lcd16x2_write+0x1a0>)
 8000cda:	8819      	ldrh	r1, [r3, #0]
 8000cdc:	7bfb      	ldrb	r3, [r7, #15]
 8000cde:	f003 0301 	and.w	r3, r3, #1
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	f002 feb2 	bl	8003a4e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_LSB, D1_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 8000cea:	4b59      	ldr	r3, [pc, #356]	; (8000e50 <lcd16x2_write+0x19c>)
 8000cec:	6818      	ldr	r0, [r3, #0]
 8000cee:	4b5a      	ldr	r3, [pc, #360]	; (8000e58 <lcd16x2_write+0x1a4>)
 8000cf0:	8819      	ldrh	r1, [r3, #0]
 8000cf2:	7bfb      	ldrb	r3, [r7, #15]
 8000cf4:	f003 0302 	and.w	r3, r3, #2
 8000cf8:	b2db      	uxtb	r3, r3
 8000cfa:	461a      	mov	r2, r3
 8000cfc:	f002 fea7 	bl	8003a4e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_LSB, D2_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 8000d00:	4b53      	ldr	r3, [pc, #332]	; (8000e50 <lcd16x2_write+0x19c>)
 8000d02:	6818      	ldr	r0, [r3, #0]
 8000d04:	4b55      	ldr	r3, [pc, #340]	; (8000e5c <lcd16x2_write+0x1a8>)
 8000d06:	8819      	ldrh	r1, [r3, #0]
 8000d08:	7bfb      	ldrb	r3, [r7, #15]
 8000d0a:	f003 0304 	and.w	r3, r3, #4
 8000d0e:	b2db      	uxtb	r3, r3
 8000d10:	461a      	mov	r2, r3
 8000d12:	f002 fe9c 	bl	8003a4e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_LSB, D3_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 8000d16:	4b4e      	ldr	r3, [pc, #312]	; (8000e50 <lcd16x2_write+0x19c>)
 8000d18:	6818      	ldr	r0, [r3, #0]
 8000d1a:	4b51      	ldr	r3, [pc, #324]	; (8000e60 <lcd16x2_write+0x1ac>)
 8000d1c:	8819      	ldrh	r1, [r3, #0]
 8000d1e:	7bfb      	ldrb	r3, [r7, #15]
 8000d20:	f003 0308 	and.w	r3, r3, #8
 8000d24:	b2db      	uxtb	r3, r3
 8000d26:	461a      	mov	r2, r3
 8000d28:	f002 fe91 	bl	8003a4e <HAL_GPIO_WritePin>
    //MSB data
    HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 8000d2c:	4b4d      	ldr	r3, [pc, #308]	; (8000e64 <lcd16x2_write+0x1b0>)
 8000d2e:	6818      	ldr	r0, [r3, #0]
 8000d30:	4b4d      	ldr	r3, [pc, #308]	; (8000e68 <lcd16x2_write+0x1b4>)
 8000d32:	8819      	ldrh	r1, [r3, #0]
 8000d34:	7bbb      	ldrb	r3, [r7, #14]
 8000d36:	f003 0301 	and.w	r3, r3, #1
 8000d3a:	b2db      	uxtb	r3, r3
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	f002 fe86 	bl	8003a4e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 8000d42:	4b48      	ldr	r3, [pc, #288]	; (8000e64 <lcd16x2_write+0x1b0>)
 8000d44:	6818      	ldr	r0, [r3, #0]
 8000d46:	4b49      	ldr	r3, [pc, #292]	; (8000e6c <lcd16x2_write+0x1b8>)
 8000d48:	8819      	ldrh	r1, [r3, #0]
 8000d4a:	7bbb      	ldrb	r3, [r7, #14]
 8000d4c:	f003 0302 	and.w	r3, r3, #2
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	461a      	mov	r2, r3
 8000d54:	f002 fe7b 	bl	8003a4e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 8000d58:	4b42      	ldr	r3, [pc, #264]	; (8000e64 <lcd16x2_write+0x1b0>)
 8000d5a:	6818      	ldr	r0, [r3, #0]
 8000d5c:	4b44      	ldr	r3, [pc, #272]	; (8000e70 <lcd16x2_write+0x1bc>)
 8000d5e:	8819      	ldrh	r1, [r3, #0]
 8000d60:	7bbb      	ldrb	r3, [r7, #14]
 8000d62:	f003 0304 	and.w	r3, r3, #4
 8000d66:	b2db      	uxtb	r3, r3
 8000d68:	461a      	mov	r2, r3
 8000d6a:	f002 fe70 	bl	8003a4e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 8000d6e:	4b3d      	ldr	r3, [pc, #244]	; (8000e64 <lcd16x2_write+0x1b0>)
 8000d70:	6818      	ldr	r0, [r3, #0]
 8000d72:	4b40      	ldr	r3, [pc, #256]	; (8000e74 <lcd16x2_write+0x1c0>)
 8000d74:	8819      	ldrh	r1, [r3, #0]
 8000d76:	7bbb      	ldrb	r3, [r7, #14]
 8000d78:	f003 0308 	and.w	r3, r3, #8
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	461a      	mov	r2, r3
 8000d80:	f002 fe65 	bl	8003a4e <HAL_GPIO_WritePin>
    lcd16x2_enablePulse();
 8000d84:	f7ff ff62 	bl	8000c4c <lcd16x2_enablePulse>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
    lcd16x2_enablePulse();
  }
}
 8000d88:	e05b      	b.n	8000e42 <lcd16x2_write+0x18e>
    HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 8000d8a:	4b36      	ldr	r3, [pc, #216]	; (8000e64 <lcd16x2_write+0x1b0>)
 8000d8c:	6818      	ldr	r0, [r3, #0]
 8000d8e:	4b36      	ldr	r3, [pc, #216]	; (8000e68 <lcd16x2_write+0x1b4>)
 8000d90:	8819      	ldrh	r1, [r3, #0]
 8000d92:	7bbb      	ldrb	r3, [r7, #14]
 8000d94:	f003 0301 	and.w	r3, r3, #1
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	f002 fe57 	bl	8003a4e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 8000da0:	4b30      	ldr	r3, [pc, #192]	; (8000e64 <lcd16x2_write+0x1b0>)
 8000da2:	6818      	ldr	r0, [r3, #0]
 8000da4:	4b31      	ldr	r3, [pc, #196]	; (8000e6c <lcd16x2_write+0x1b8>)
 8000da6:	8819      	ldrh	r1, [r3, #0]
 8000da8:	7bbb      	ldrb	r3, [r7, #14]
 8000daa:	f003 0302 	and.w	r3, r3, #2
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	461a      	mov	r2, r3
 8000db2:	f002 fe4c 	bl	8003a4e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 8000db6:	4b2b      	ldr	r3, [pc, #172]	; (8000e64 <lcd16x2_write+0x1b0>)
 8000db8:	6818      	ldr	r0, [r3, #0]
 8000dba:	4b2d      	ldr	r3, [pc, #180]	; (8000e70 <lcd16x2_write+0x1bc>)
 8000dbc:	8819      	ldrh	r1, [r3, #0]
 8000dbe:	7bbb      	ldrb	r3, [r7, #14]
 8000dc0:	f003 0304 	and.w	r3, r3, #4
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	461a      	mov	r2, r3
 8000dc8:	f002 fe41 	bl	8003a4e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 8000dcc:	4b25      	ldr	r3, [pc, #148]	; (8000e64 <lcd16x2_write+0x1b0>)
 8000dce:	6818      	ldr	r0, [r3, #0]
 8000dd0:	4b28      	ldr	r3, [pc, #160]	; (8000e74 <lcd16x2_write+0x1c0>)
 8000dd2:	8819      	ldrh	r1, [r3, #0]
 8000dd4:	7bbb      	ldrb	r3, [r7, #14]
 8000dd6:	f003 0308 	and.w	r3, r3, #8
 8000dda:	b2db      	uxtb	r3, r3
 8000ddc:	461a      	mov	r2, r3
 8000dde:	f002 fe36 	bl	8003a4e <HAL_GPIO_WritePin>
    lcd16x2_enablePulse();
 8000de2:	f7ff ff33 	bl	8000c4c <lcd16x2_enablePulse>
    HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 8000de6:	4b1f      	ldr	r3, [pc, #124]	; (8000e64 <lcd16x2_write+0x1b0>)
 8000de8:	6818      	ldr	r0, [r3, #0]
 8000dea:	4b1f      	ldr	r3, [pc, #124]	; (8000e68 <lcd16x2_write+0x1b4>)
 8000dec:	8819      	ldrh	r1, [r3, #0]
 8000dee:	7bfb      	ldrb	r3, [r7, #15]
 8000df0:	f003 0301 	and.w	r3, r3, #1
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	461a      	mov	r2, r3
 8000df8:	f002 fe29 	bl	8003a4e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 8000dfc:	4b19      	ldr	r3, [pc, #100]	; (8000e64 <lcd16x2_write+0x1b0>)
 8000dfe:	6818      	ldr	r0, [r3, #0]
 8000e00:	4b1a      	ldr	r3, [pc, #104]	; (8000e6c <lcd16x2_write+0x1b8>)
 8000e02:	8819      	ldrh	r1, [r3, #0]
 8000e04:	7bfb      	ldrb	r3, [r7, #15]
 8000e06:	f003 0302 	and.w	r3, r3, #2
 8000e0a:	b2db      	uxtb	r3, r3
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	f002 fe1e 	bl	8003a4e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 8000e12:	4b14      	ldr	r3, [pc, #80]	; (8000e64 <lcd16x2_write+0x1b0>)
 8000e14:	6818      	ldr	r0, [r3, #0]
 8000e16:	4b16      	ldr	r3, [pc, #88]	; (8000e70 <lcd16x2_write+0x1bc>)
 8000e18:	8819      	ldrh	r1, [r3, #0]
 8000e1a:	7bfb      	ldrb	r3, [r7, #15]
 8000e1c:	f003 0304 	and.w	r3, r3, #4
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	461a      	mov	r2, r3
 8000e24:	f002 fe13 	bl	8003a4e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 8000e28:	4b0e      	ldr	r3, [pc, #56]	; (8000e64 <lcd16x2_write+0x1b0>)
 8000e2a:	6818      	ldr	r0, [r3, #0]
 8000e2c:	4b11      	ldr	r3, [pc, #68]	; (8000e74 <lcd16x2_write+0x1c0>)
 8000e2e:	8819      	ldrh	r1, [r3, #0]
 8000e30:	7bfb      	ldrb	r3, [r7, #15]
 8000e32:	f003 0308 	and.w	r3, r3, #8
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	461a      	mov	r2, r3
 8000e3a:	f002 fe08 	bl	8003a4e <HAL_GPIO_WritePin>
    lcd16x2_enablePulse();
 8000e3e:	f7ff ff05 	bl	8000c4c <lcd16x2_enablePulse>
}
 8000e42:	bf00      	nop
 8000e44:	3710      	adds	r7, #16
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	20000000 	.word	0x20000000
 8000e50:	20000098 	.word	0x20000098
 8000e54:	2000009c 	.word	0x2000009c
 8000e58:	2000009e 	.word	0x2000009e
 8000e5c:	200000a0 	.word	0x200000a0
 8000e60:	200000a2 	.word	0x200000a2
 8000e64:	200000a4 	.word	0x200000a4
 8000e68:	200000a8 	.word	0x200000a8
 8000e6c:	200000aa 	.word	0x200000aa
 8000e70:	200000ac 	.word	0x200000ac
 8000e74:	200000ae 	.word	0x200000ae

08000e78 <lcd16x2_writeCommand>:

/**
 * @brief Write command
 */
static void lcd16x2_writeCommand(uint8_t cmd)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	71fb      	strb	r3, [r7, #7]
  lcd16x2_rs(false);
 8000e82:	2000      	movs	r0, #0
 8000e84:	f7ff ff00 	bl	8000c88 <lcd16x2_rs>
  lcd16x2_write(cmd);
 8000e88:	79fb      	ldrb	r3, [r7, #7]
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff ff12 	bl	8000cb4 <lcd16x2_write>
}
 8000e90:	bf00      	nop
 8000e92:	3708      	adds	r7, #8
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <lcd16x2_writeData>:

/**
 * @brief Write data
 */
static void lcd16x2_writeData(uint8_t data)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	71fb      	strb	r3, [r7, #7]
  lcd16x2_rs(true);
 8000ea2:	2001      	movs	r0, #1
 8000ea4:	f7ff fef0 	bl	8000c88 <lcd16x2_rs>
  lcd16x2_write(data);
 8000ea8:	79fb      	ldrb	r3, [r7, #7]
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f7ff ff02 	bl	8000cb4 <lcd16x2_write>
}
 8000eb0:	bf00      	nop
 8000eb2:	3708      	adds	r7, #8
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <lcd16x2_write4>:

/**
 * @brief 4-bits write
 */
static void lcd16x2_write4(uint8_t nib)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	71fb      	strb	r3, [r7, #7]
  nib &= 0xF;
 8000ec2:	79fb      	ldrb	r3, [r7, #7]
 8000ec4:	f003 030f 	and.w	r3, r3, #15
 8000ec8:	71fb      	strb	r3, [r7, #7]
  lcd16x2_rs(false);
 8000eca:	2000      	movs	r0, #0
 8000ecc:	f7ff fedc 	bl	8000c88 <lcd16x2_rs>
  //LSB data
  HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(nib&0x1));
 8000ed0:	4b18      	ldr	r3, [pc, #96]	; (8000f34 <lcd16x2_write4+0x7c>)
 8000ed2:	6818      	ldr	r0, [r3, #0]
 8000ed4:	4b18      	ldr	r3, [pc, #96]	; (8000f38 <lcd16x2_write4+0x80>)
 8000ed6:	8819      	ldrh	r1, [r3, #0]
 8000ed8:	79fb      	ldrb	r3, [r7, #7]
 8000eda:	f003 0301 	and.w	r3, r3, #1
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	f002 fdb4 	bl	8003a4e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(nib&0x2));
 8000ee6:	4b13      	ldr	r3, [pc, #76]	; (8000f34 <lcd16x2_write4+0x7c>)
 8000ee8:	6818      	ldr	r0, [r3, #0]
 8000eea:	4b14      	ldr	r3, [pc, #80]	; (8000f3c <lcd16x2_write4+0x84>)
 8000eec:	8819      	ldrh	r1, [r3, #0]
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	f003 0302 	and.w	r3, r3, #2
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	f002 fda9 	bl	8003a4e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(nib&0x4));
 8000efc:	4b0d      	ldr	r3, [pc, #52]	; (8000f34 <lcd16x2_write4+0x7c>)
 8000efe:	6818      	ldr	r0, [r3, #0]
 8000f00:	4b0f      	ldr	r3, [pc, #60]	; (8000f40 <lcd16x2_write4+0x88>)
 8000f02:	8819      	ldrh	r1, [r3, #0]
 8000f04:	79fb      	ldrb	r3, [r7, #7]
 8000f06:	f003 0304 	and.w	r3, r3, #4
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	f002 fd9e 	bl	8003a4e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(nib&0x8));
 8000f12:	4b08      	ldr	r3, [pc, #32]	; (8000f34 <lcd16x2_write4+0x7c>)
 8000f14:	6818      	ldr	r0, [r3, #0]
 8000f16:	4b0b      	ldr	r3, [pc, #44]	; (8000f44 <lcd16x2_write4+0x8c>)
 8000f18:	8819      	ldrh	r1, [r3, #0]
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
 8000f1c:	f003 0308 	and.w	r3, r3, #8
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	461a      	mov	r2, r3
 8000f24:	f002 fd93 	bl	8003a4e <HAL_GPIO_WritePin>
  lcd16x2_enablePulse();
 8000f28:	f7ff fe90 	bl	8000c4c <lcd16x2_enablePulse>
}
 8000f2c:	bf00      	nop
 8000f2e:	3708      	adds	r7, #8
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	200000a4 	.word	0x200000a4
 8000f38:	200000a8 	.word	0x200000a8
 8000f3c:	200000aa 	.word	0x200000aa
 8000f40:	200000ac 	.word	0x200000ac
 8000f44:	200000ae 	.word	0x200000ae

08000f48 <lcd16x2_init_4bits>:
 * @param[in] x_pin GPIO pin (e.g. GPIO_PIN_1)
 */
void lcd16x2_init_4bits(
    GPIO_TypeDef* port_rs_e, uint16_t rs_pin, uint16_t e_pin,
    GPIO_TypeDef* port_4_7, uint16_t d4_pin, uint16_t d5_pin, uint16_t d6_pin, uint16_t d7_pin)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	607b      	str	r3, [r7, #4]
 8000f52:	460b      	mov	r3, r1
 8000f54:	817b      	strh	r3, [r7, #10]
 8000f56:	4613      	mov	r3, r2
 8000f58:	813b      	strh	r3, [r7, #8]
  DWT_Delay_Init();
 8000f5a:	f7ff fe23 	bl	8000ba4 <DWT_Delay_Init>
  //Set GPIO Ports and Pins data
  PORT_RS_and_E = port_rs_e;
 8000f5e:	4a24      	ldr	r2, [pc, #144]	; (8000ff0 <lcd16x2_init_4bits+0xa8>)
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	6013      	str	r3, [r2, #0]
  PIN_RS = rs_pin;
 8000f64:	4a23      	ldr	r2, [pc, #140]	; (8000ff4 <lcd16x2_init_4bits+0xac>)
 8000f66:	897b      	ldrh	r3, [r7, #10]
 8000f68:	8013      	strh	r3, [r2, #0]
  PIN_E = e_pin;
 8000f6a:	4a23      	ldr	r2, [pc, #140]	; (8000ff8 <lcd16x2_init_4bits+0xb0>)
 8000f6c:	893b      	ldrh	r3, [r7, #8]
 8000f6e:	8013      	strh	r3, [r2, #0]
  PORT_MSB = port_4_7;
 8000f70:	4a22      	ldr	r2, [pc, #136]	; (8000ffc <lcd16x2_init_4bits+0xb4>)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6013      	str	r3, [r2, #0]
  D4_PIN = d4_pin;
 8000f76:	4a22      	ldr	r2, [pc, #136]	; (8001000 <lcd16x2_init_4bits+0xb8>)
 8000f78:	8b3b      	ldrh	r3, [r7, #24]
 8000f7a:	8013      	strh	r3, [r2, #0]
  D5_PIN = d5_pin;
 8000f7c:	4a21      	ldr	r2, [pc, #132]	; (8001004 <lcd16x2_init_4bits+0xbc>)
 8000f7e:	8bbb      	ldrh	r3, [r7, #28]
 8000f80:	8013      	strh	r3, [r2, #0]
  D6_PIN = d6_pin;
 8000f82:	4a21      	ldr	r2, [pc, #132]	; (8001008 <lcd16x2_init_4bits+0xc0>)
 8000f84:	8c3b      	ldrh	r3, [r7, #32]
 8000f86:	8013      	strh	r3, [r2, #0]
  D7_PIN = d7_pin;
 8000f88:	4a20      	ldr	r2, [pc, #128]	; (800100c <lcd16x2_init_4bits+0xc4>)
 8000f8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000f8c:	8013      	strh	r3, [r2, #0]
  is8BitsMode = false;
 8000f8e:	4b20      	ldr	r3, [pc, #128]	; (8001010 <lcd16x2_init_4bits+0xc8>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	701a      	strb	r2, [r3, #0]
  FunctionSet = 0x28;
 8000f94:	4b1f      	ldr	r3, [pc, #124]	; (8001014 <lcd16x2_init_4bits+0xcc>)
 8000f96:	2228      	movs	r2, #40	; 0x28
 8000f98:	701a      	strb	r2, [r3, #0]

  //Initialise LCD
  //1. Wait at least 15ms
  LCD_MS_DELAY(20);
 8000f9a:	2014      	movs	r0, #20
 8000f9c:	f001 ffec 	bl	8002f78 <HAL_Delay>
  //2. Attentions sequence
  lcd16x2_write4(0x3);
 8000fa0:	2003      	movs	r0, #3
 8000fa2:	f7ff ff89 	bl	8000eb8 <lcd16x2_write4>
  LCD_MS_DELAY(5);
 8000fa6:	2005      	movs	r0, #5
 8000fa8:	f001 ffe6 	bl	8002f78 <HAL_Delay>
  lcd16x2_write4(0x3);
 8000fac:	2003      	movs	r0, #3
 8000fae:	f7ff ff83 	bl	8000eb8 <lcd16x2_write4>
  LCD_MS_DELAY(1);
 8000fb2:	2001      	movs	r0, #1
 8000fb4:	f001 ffe0 	bl	8002f78 <HAL_Delay>
  lcd16x2_write4(0x3);
 8000fb8:	2003      	movs	r0, #3
 8000fba:	f7ff ff7d 	bl	8000eb8 <lcd16x2_write4>
  LCD_MS_DELAY(1);
 8000fbe:	2001      	movs	r0, #1
 8000fc0:	f001 ffda 	bl	8002f78 <HAL_Delay>
  lcd16x2_write4(0x2);  //4 bit mode
 8000fc4:	2002      	movs	r0, #2
 8000fc6:	f7ff ff77 	bl	8000eb8 <lcd16x2_write4>
  LCD_MS_DELAY(1);
 8000fca:	2001      	movs	r0, #1
 8000fcc:	f001 ffd4 	bl	8002f78 <HAL_Delay>
  //4. Function set; Enable 2 lines, Data length to 4 bits
  lcd16x2_writeCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N); // 0x28
 8000fd0:	2028      	movs	r0, #40	; 0x28
 8000fd2:	f7ff ff51 	bl	8000e78 <lcd16x2_writeCommand>
  //3. Display control (Display ON, Cursor ON, blink cursor)
  lcd16x2_writeCommand(LCD_DISPLAYCONTROL| /* LCD_DISPLAY_B | LCD_DISPLAY_C| */ LCD_DISPLAY_D);
 8000fd6:	200c      	movs	r0, #12
 8000fd8:	f7ff ff4e 	bl	8000e78 <lcd16x2_writeCommand>
  //4. Clear LCD and return home
  lcd16x2_writeCommand(LCD_CLEARDISPLAY);
 8000fdc:	2001      	movs	r0, #1
 8000fde:	f7ff ff4b 	bl	8000e78 <lcd16x2_writeCommand>
  LCD_MS_DELAY(3);
 8000fe2:	2003      	movs	r0, #3
 8000fe4:	f001 ffc8 	bl	8002f78 <HAL_Delay>
}
 8000fe8:	bf00      	nop
 8000fea:	3710      	adds	r7, #16
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	20000090 	.word	0x20000090
 8000ff4:	20000094 	.word	0x20000094
 8000ff8:	20000096 	.word	0x20000096
 8000ffc:	200000a4 	.word	0x200000a4
 8001000:	200000a8 	.word	0x200000a8
 8001004:	200000aa 	.word	0x200000aa
 8001008:	200000ac 	.word	0x200000ac
 800100c:	200000ae 	.word	0x200000ae
 8001010:	20000000 	.word	0x20000000
 8001014:	20000001 	.word	0x20000001

08001018 <lcd16x2_setCursor>:
 * @brief Set cursor position
 * @param[in] row - 0 or 1 for line1 or line2
 * @param[in] col - 0 - 15 (16 columns LCD)
 */
void lcd16x2_setCursor(uint8_t row, uint8_t col)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	460a      	mov	r2, r1
 8001022:	71fb      	strb	r3, [r7, #7]
 8001024:	4613      	mov	r3, r2
 8001026:	71bb      	strb	r3, [r7, #6]
  uint8_t maskData;
  maskData = (col)&0x0F;
 8001028:	79bb      	ldrb	r3, [r7, #6]
 800102a:	f003 030f 	and.w	r3, r3, #15
 800102e:	73fb      	strb	r3, [r7, #15]
  if(row==0)
 8001030:	79fb      	ldrb	r3, [r7, #7]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d108      	bne.n	8001048 <lcd16x2_setCursor+0x30>
  {
    maskData |= (0x80);
 8001036:	7bfb      	ldrb	r3, [r7, #15]
 8001038:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800103c:	73fb      	strb	r3, [r7, #15]
    lcd16x2_writeCommand(maskData);
 800103e:	7bfb      	ldrb	r3, [r7, #15]
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff ff19 	bl	8000e78 <lcd16x2_writeCommand>
  else
  {
    maskData |= (0xc0);
    lcd16x2_writeCommand(maskData);
  }
}
 8001046:	e007      	b.n	8001058 <lcd16x2_setCursor+0x40>
    maskData |= (0xc0);
 8001048:	7bfb      	ldrb	r3, [r7, #15]
 800104a:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800104e:	73fb      	strb	r3, [r7, #15]
    lcd16x2_writeCommand(maskData);
 8001050:	7bfb      	ldrb	r3, [r7, #15]
 8001052:	4618      	mov	r0, r3
 8001054:	f7ff ff10 	bl	8000e78 <lcd16x2_writeCommand>
}
 8001058:	bf00      	nop
 800105a:	3710      	adds	r7, #16
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}

08001060 <lcd16x2_1stLine>:
/**
 * @brief Move to beginning of 1st line
 */
void lcd16x2_1stLine(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  lcd16x2_setCursor(0,0);
 8001064:	2100      	movs	r1, #0
 8001066:	2000      	movs	r0, #0
 8001068:	f7ff ffd6 	bl	8001018 <lcd16x2_setCursor>
}
 800106c:	bf00      	nop
 800106e:	bd80      	pop	{r7, pc}

08001070 <lcd16x2_2ndLine>:
/**
 * @brief Move to beginning of 2nd line
 */
void lcd16x2_2ndLine(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  lcd16x2_setCursor(1,0);
 8001074:	2100      	movs	r1, #0
 8001076:	2001      	movs	r0, #1
 8001078:	f7ff ffce 	bl	8001018 <lcd16x2_setCursor>
}
 800107c:	bf00      	nop
 800107e:	bd80      	pop	{r7, pc}

08001080 <lcd16x2_printf>:

/**
 * @brief Print to display any datatype (e.g. lcd16x2_printf("Value1 = %.1f", 123.45))
 */
void lcd16x2_printf(const char* str, ...)
{
 8001080:	b40f      	push	{r0, r1, r2, r3}
 8001082:	b590      	push	{r4, r7, lr}
 8001084:	b089      	sub	sp, #36	; 0x24
 8001086:	af00      	add	r7, sp, #0
  char stringArray[20];
  va_list args;
  va_start(args, str);
 8001088:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800108c:	607b      	str	r3, [r7, #4]
  vsprintf(stringArray, str, args);
 800108e:	f107 0308 	add.w	r3, r7, #8
 8001092:	687a      	ldr	r2, [r7, #4]
 8001094:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001096:	4618      	mov	r0, r3
 8001098:	f004 ff5e 	bl	8005f58 <vsiprintf>
  va_end(args);
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 800109c:	2300      	movs	r3, #0
 800109e:	77fb      	strb	r3, [r7, #31]
 80010a0:	e00a      	b.n	80010b8 <lcd16x2_printf+0x38>
  {
    lcd16x2_writeData((uint8_t)stringArray[i]);
 80010a2:	7ffb      	ldrb	r3, [r7, #31]
 80010a4:	3320      	adds	r3, #32
 80010a6:	443b      	add	r3, r7
 80010a8:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff fef3 	bl	8000e98 <lcd16x2_writeData>
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 80010b2:	7ffb      	ldrb	r3, [r7, #31]
 80010b4:	3301      	adds	r3, #1
 80010b6:	77fb      	strb	r3, [r7, #31]
 80010b8:	7ffc      	ldrb	r4, [r7, #31]
 80010ba:	f107 0308 	add.w	r3, r7, #8
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff f846 	bl	8000150 <strlen>
 80010c4:	4603      	mov	r3, r0
 80010c6:	429c      	cmp	r4, r3
 80010c8:	d202      	bcs.n	80010d0 <lcd16x2_printf+0x50>
 80010ca:	7ffb      	ldrb	r3, [r7, #31]
 80010cc:	2b0f      	cmp	r3, #15
 80010ce:	d9e8      	bls.n	80010a2 <lcd16x2_printf+0x22>
  }
}
 80010d0:	bf00      	nop
 80010d2:	3724      	adds	r7, #36	; 0x24
 80010d4:	46bd      	mov	sp, r7
 80010d6:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80010da:	b004      	add	sp, #16
 80010dc:	4770      	bx	lr
	...

080010e0 <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Set period, threshold value by button
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	80fb      	strh	r3, [r7, #6]
	start_tick = HAL_GetTick();
 80010ea:	f001 ff3b 	bl	8002f64 <HAL_GetTick>
 80010ee:	4603      	mov	r3, r0
 80010f0:	4a40      	ldr	r2, [pc, #256]	; (80011f4 <HAL_GPIO_EXTI_Callback+0x114>)
 80010f2:	6013      	str	r3, [r2, #0]
	UNUSED(GPIO_Pin);
	if(GPIO_Pin == GPIO_PIN_0 && button_enable == true){
 80010f4:	88fb      	ldrh	r3, [r7, #6]
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d16b      	bne.n	80011d2 <HAL_GPIO_EXTI_Callback+0xf2>
 80010fa:	4b3f      	ldr	r3, [pc, #252]	; (80011f8 <HAL_GPIO_EXTI_Callback+0x118>)
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d067      	beq.n	80011d2 <HAL_GPIO_EXTI_Callback+0xf2>
		isr_cnt++;
 8001102:	4b3e      	ldr	r3, [pc, #248]	; (80011fc <HAL_GPIO_EXTI_Callback+0x11c>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	3301      	adds	r3, #1
 8001108:	b2da      	uxtb	r2, r3
 800110a:	4b3c      	ldr	r3, [pc, #240]	; (80011fc <HAL_GPIO_EXTI_Callback+0x11c>)
 800110c:	701a      	strb	r2, [r3, #0]
		/* Nhan nut lan 1, dat chu ky truyen UART cac cam bien la 1s */
		if(isr_cnt == 1){
 800110e:	4b3b      	ldr	r3, [pc, #236]	; (80011fc <HAL_GPIO_EXTI_Callback+0x11c>)
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	2b01      	cmp	r3, #1
 8001114:	d11b      	bne.n	800114e <HAL_GPIO_EXTI_Callback+0x6e>
			temp_transmit_period = 1;
 8001116:	4b3a      	ldr	r3, [pc, #232]	; (8001200 <HAL_GPIO_EXTI_Callback+0x120>)
 8001118:	2201      	movs	r2, #1
 800111a:	701a      	strb	r2, [r3, #0]
			humi_transmit_period = 1;
 800111c:	4b39      	ldr	r3, [pc, #228]	; (8001204 <HAL_GPIO_EXTI_Callback+0x124>)
 800111e:	2201      	movs	r2, #1
 8001120:	701a      	strb	r2, [r3, #0]
			HCSR04_transmit_period = 1;
 8001122:	4b39      	ldr	r3, [pc, #228]	; (8001208 <HAL_GPIO_EXTI_Callback+0x128>)
 8001124:	2201      	movs	r2, #1
 8001126:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001128:	2201      	movs	r2, #1
 800112a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800112e:	4837      	ldr	r0, [pc, #220]	; (800120c <HAL_GPIO_EXTI_Callback+0x12c>)
 8001130:	f002 fc8d 	bl	8003a4e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8001134:	2201      	movs	r2, #1
 8001136:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800113a:	4834      	ldr	r0, [pc, #208]	; (800120c <HAL_GPIO_EXTI_Callback+0x12c>)
 800113c:	f002 fc87 	bl	8003a4e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8001140:	2200      	movs	r2, #0
 8001142:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001146:	4831      	ldr	r0, [pc, #196]	; (800120c <HAL_GPIO_EXTI_Callback+0x12c>)
 8001148:	f002 fc81 	bl	8003a4e <HAL_GPIO_WritePin>
 800114c:	e041      	b.n	80011d2 <HAL_GPIO_EXTI_Callback+0xf2>
		}
		/* Nhan nut lan 2, dat chu ky truyen UART cac cam bien la 2s */
		else if(isr_cnt == 2){
 800114e:	4b2b      	ldr	r3, [pc, #172]	; (80011fc <HAL_GPIO_EXTI_Callback+0x11c>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	2b02      	cmp	r3, #2
 8001154:	d11b      	bne.n	800118e <HAL_GPIO_EXTI_Callback+0xae>
			temp_transmit_period = 2;
 8001156:	4b2a      	ldr	r3, [pc, #168]	; (8001200 <HAL_GPIO_EXTI_Callback+0x120>)
 8001158:	2202      	movs	r2, #2
 800115a:	701a      	strb	r2, [r3, #0]
			humi_transmit_period = 2;
 800115c:	4b29      	ldr	r3, [pc, #164]	; (8001204 <HAL_GPIO_EXTI_Callback+0x124>)
 800115e:	2202      	movs	r2, #2
 8001160:	701a      	strb	r2, [r3, #0]
			HCSR04_transmit_period = 2;
 8001162:	4b29      	ldr	r3, [pc, #164]	; (8001208 <HAL_GPIO_EXTI_Callback+0x128>)
 8001164:	2202      	movs	r2, #2
 8001166:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001168:	2201      	movs	r2, #1
 800116a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800116e:	4827      	ldr	r0, [pc, #156]	; (800120c <HAL_GPIO_EXTI_Callback+0x12c>)
 8001170:	f002 fc6d 	bl	8003a4e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8001174:	2200      	movs	r2, #0
 8001176:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800117a:	4824      	ldr	r0, [pc, #144]	; (800120c <HAL_GPIO_EXTI_Callback+0x12c>)
 800117c:	f002 fc67 	bl	8003a4e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 8001180:	2201      	movs	r2, #1
 8001182:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001186:	4821      	ldr	r0, [pc, #132]	; (800120c <HAL_GPIO_EXTI_Callback+0x12c>)
 8001188:	f002 fc61 	bl	8003a4e <HAL_GPIO_WritePin>
 800118c:	e021      	b.n	80011d2 <HAL_GPIO_EXTI_Callback+0xf2>
		}
		/* Nhan nut lan 3, dat chu ky truyen UART cac cam bien la 3s */
		else if(isr_cnt == 3){
 800118e:	4b1b      	ldr	r3, [pc, #108]	; (80011fc <HAL_GPIO_EXTI_Callback+0x11c>)
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	2b03      	cmp	r3, #3
 8001194:	d11d      	bne.n	80011d2 <HAL_GPIO_EXTI_Callback+0xf2>
			temp_transmit_period = 3;
 8001196:	4b1a      	ldr	r3, [pc, #104]	; (8001200 <HAL_GPIO_EXTI_Callback+0x120>)
 8001198:	2203      	movs	r2, #3
 800119a:	701a      	strb	r2, [r3, #0]
			humi_transmit_period = 3;
 800119c:	4b19      	ldr	r3, [pc, #100]	; (8001204 <HAL_GPIO_EXTI_Callback+0x124>)
 800119e:	2203      	movs	r2, #3
 80011a0:	701a      	strb	r2, [r3, #0]
			HCSR04_transmit_period = 3;
 80011a2:	4b19      	ldr	r3, [pc, #100]	; (8001208 <HAL_GPIO_EXTI_Callback+0x128>)
 80011a4:	2203      	movs	r2, #3
 80011a6:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80011a8:	2200      	movs	r2, #0
 80011aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011ae:	4817      	ldr	r0, [pc, #92]	; (800120c <HAL_GPIO_EXTI_Callback+0x12c>)
 80011b0:	f002 fc4d 	bl	8003a4e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 80011b4:	2201      	movs	r2, #1
 80011b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011ba:	4814      	ldr	r0, [pc, #80]	; (800120c <HAL_GPIO_EXTI_Callback+0x12c>)
 80011bc:	f002 fc47 	bl	8003a4e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 80011c0:	2201      	movs	r2, #1
 80011c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011c6:	4811      	ldr	r0, [pc, #68]	; (800120c <HAL_GPIO_EXTI_Callback+0x12c>)
 80011c8:	f002 fc41 	bl	8003a4e <HAL_GPIO_WritePin>
			isr_cnt = 0;
 80011cc:	4b0b      	ldr	r3, [pc, #44]	; (80011fc <HAL_GPIO_EXTI_Callback+0x11c>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	701a      	strb	r2, [r3, #0]
		}
	}
	//while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_RESET);
	stop_tick = HAL_GetTick();
 80011d2:	f001 fec7 	bl	8002f64 <HAL_GetTick>
 80011d6:	4603      	mov	r3, r0
 80011d8:	4a0d      	ldr	r2, [pc, #52]	; (8001210 <HAL_GPIO_EXTI_Callback+0x130>)
 80011da:	6013      	str	r3, [r2, #0]
	execute_tick = stop_tick - start_tick;
 80011dc:	4b0c      	ldr	r3, [pc, #48]	; (8001210 <HAL_GPIO_EXTI_Callback+0x130>)
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	4b04      	ldr	r3, [pc, #16]	; (80011f4 <HAL_GPIO_EXTI_Callback+0x114>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	1ad3      	subs	r3, r2, r3
 80011e6:	4a0b      	ldr	r2, [pc, #44]	; (8001214 <HAL_GPIO_EXTI_Callback+0x134>)
 80011e8:	6013      	str	r3, [r2, #0]
}
 80011ea:	bf00      	nop
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	20000368 	.word	0x20000368
 80011f8:	20000385 	.word	0x20000385
 80011fc:	20000388 	.word	0x20000388
 8001200:	20000362 	.word	0x20000362
 8001204:	20000363 	.word	0x20000363
 8001208:	20000361 	.word	0x20000361
 800120c:	40011000 	.word	0x40011000
 8001210:	2000036c 	.word	0x2000036c
 8001214:	20000370 	.word	0x20000370

08001218 <delay_us>:


void delay_us(uint16_t time)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8001222:	4b08      	ldr	r3, [pc, #32]	; (8001244 <delay_us+0x2c>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	2200      	movs	r2, #0
 8001228:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER (&htim1) < time);
 800122a:	bf00      	nop
 800122c:	4b05      	ldr	r3, [pc, #20]	; (8001244 <delay_us+0x2c>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001232:	88fb      	ldrh	r3, [r7, #6]
 8001234:	429a      	cmp	r2, r3
 8001236:	d3f9      	bcc.n	800122c <delay_us+0x14>
}
 8001238:	bf00      	nop
 800123a:	bf00      	nop
 800123c:	370c      	adds	r7, #12
 800123e:	46bd      	mov	sp, r7
 8001240:	bc80      	pop	{r7}
 8001242:	4770      	bx	lr
 8001244:	200000b0 	.word	0x200000b0

08001248 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	7f1b      	ldrb	r3, [r3, #28]
 8001254:	2b01      	cmp	r3, #1
 8001256:	f040 8083 	bne.w	8001360 <HAL_TIM_IC_CaptureCallback+0x118>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 800125a:	4b45      	ldr	r3, [pc, #276]	; (8001370 <HAL_TIM_IC_CaptureCallback+0x128>)
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d11a      	bne.n	8001298 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8001262:	2100      	movs	r1, #0
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f003 fce7 	bl	8004c38 <HAL_TIM_ReadCapturedValue>
 800126a:	4603      	mov	r3, r0
 800126c:	4a41      	ldr	r2, [pc, #260]	; (8001374 <HAL_TIM_IC_CaptureCallback+0x12c>)
 800126e:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8001270:	4b3f      	ldr	r3, [pc, #252]	; (8001370 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001272:	2201      	movs	r2, #1
 8001274:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	6a1a      	ldr	r2, [r3, #32]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f022 020a 	bic.w	r2, r2, #10
 8001284:	621a      	str	r2, [r3, #32]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	6a1a      	ldr	r2, [r3, #32]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f042 0202 	orr.w	r2, r2, #2
 8001294:	621a      	str	r2, [r3, #32]
			//stop_tick = HAL_GetTick();
			//execute_tick = stop_tick - start_tick;

		}
	}
}
 8001296:	e063      	b.n	8001360 <HAL_TIM_IC_CaptureCallback+0x118>
		else if (Is_First_Captured==1)   // if the first is already captured
 8001298:	4b35      	ldr	r3, [pc, #212]	; (8001370 <HAL_TIM_IC_CaptureCallback+0x128>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	2b01      	cmp	r3, #1
 800129e:	d15f      	bne.n	8001360 <HAL_TIM_IC_CaptureCallback+0x118>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 80012a0:	2100      	movs	r1, #0
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f003 fcc8 	bl	8004c38 <HAL_TIM_ReadCapturedValue>
 80012a8:	4603      	mov	r3, r0
 80012aa:	4a33      	ldr	r2, [pc, #204]	; (8001378 <HAL_TIM_IC_CaptureCallback+0x130>)
 80012ac:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	2200      	movs	r2, #0
 80012b4:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1)
 80012b6:	4b30      	ldr	r3, [pc, #192]	; (8001378 <HAL_TIM_IC_CaptureCallback+0x130>)
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	4b2e      	ldr	r3, [pc, #184]	; (8001374 <HAL_TIM_IC_CaptureCallback+0x12c>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	429a      	cmp	r2, r3
 80012c0:	d907      	bls.n	80012d2 <HAL_TIM_IC_CaptureCallback+0x8a>
				Difference = IC_Val2-IC_Val1;
 80012c2:	4b2d      	ldr	r3, [pc, #180]	; (8001378 <HAL_TIM_IC_CaptureCallback+0x130>)
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	4b2b      	ldr	r3, [pc, #172]	; (8001374 <HAL_TIM_IC_CaptureCallback+0x12c>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	1ad3      	subs	r3, r2, r3
 80012cc:	4a2b      	ldr	r2, [pc, #172]	; (800137c <HAL_TIM_IC_CaptureCallback+0x134>)
 80012ce:	6013      	str	r3, [r2, #0]
 80012d0:	e00f      	b.n	80012f2 <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (IC_Val1 > IC_Val2)
 80012d2:	4b28      	ldr	r3, [pc, #160]	; (8001374 <HAL_TIM_IC_CaptureCallback+0x12c>)
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	4b28      	ldr	r3, [pc, #160]	; (8001378 <HAL_TIM_IC_CaptureCallback+0x130>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	429a      	cmp	r2, r3
 80012dc:	d909      	bls.n	80012f2 <HAL_TIM_IC_CaptureCallback+0xaa>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 80012de:	4b26      	ldr	r3, [pc, #152]	; (8001378 <HAL_TIM_IC_CaptureCallback+0x130>)
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	4b24      	ldr	r3, [pc, #144]	; (8001374 <HAL_TIM_IC_CaptureCallback+0x12c>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	1ad3      	subs	r3, r2, r3
 80012e8:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80012ec:	33ff      	adds	r3, #255	; 0xff
 80012ee:	4a23      	ldr	r2, [pc, #140]	; (800137c <HAL_TIM_IC_CaptureCallback+0x134>)
 80012f0:	6013      	str	r3, [r2, #0]
			distance = Difference * .034/2;
 80012f2:	4b22      	ldr	r3, [pc, #136]	; (800137c <HAL_TIM_IC_CaptureCallback+0x134>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff f874 	bl	80003e4 <__aeabi_ui2d>
 80012fc:	a31a      	add	r3, pc, #104	; (adr r3, 8001368 <HAL_TIM_IC_CaptureCallback+0x120>)
 80012fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001302:	f7ff f8e9 	bl	80004d8 <__aeabi_dmul>
 8001306:	4602      	mov	r2, r0
 8001308:	460b      	mov	r3, r1
 800130a:	4610      	mov	r0, r2
 800130c:	4619      	mov	r1, r3
 800130e:	f04f 0200 	mov.w	r2, #0
 8001312:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001316:	f7ff fa09 	bl	800072c <__aeabi_ddiv>
 800131a:	4602      	mov	r2, r0
 800131c:	460b      	mov	r3, r1
 800131e:	4610      	mov	r0, r2
 8001320:	4619      	mov	r1, r3
 8001322:	f7ff faeb 	bl	80008fc <__aeabi_d2uiz>
 8001326:	4603      	mov	r3, r0
 8001328:	b2da      	uxtb	r2, r3
 800132a:	4b15      	ldr	r3, [pc, #84]	; (8001380 <HAL_TIM_IC_CaptureCallback+0x138>)
 800132c:	701a      	strb	r2, [r3, #0]
			Is_First_Captured = 0; // set it back to false
 800132e:	4b10      	ldr	r3, [pc, #64]	; (8001370 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001330:	2200      	movs	r2, #0
 8001332:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	6a1a      	ldr	r2, [r3, #32]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f022 020a 	bic.w	r2, r2, #10
 8001342:	621a      	str	r2, [r3, #32]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	6a12      	ldr	r2, [r2, #32]
 800134e:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 8001350:	4b0c      	ldr	r3, [pc, #48]	; (8001384 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	68da      	ldr	r2, [r3, #12]
 8001356:	4b0b      	ldr	r3, [pc, #44]	; (8001384 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f022 0202 	bic.w	r2, r2, #2
 800135e:	60da      	str	r2, [r3, #12]
}
 8001360:	bf00      	nop
 8001362:	3708      	adds	r7, #8
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	b020c49c 	.word	0xb020c49c
 800136c:	3fa16872 	.word	0x3fa16872
 8001370:	20000300 	.word	0x20000300
 8001374:	200002f4 	.word	0x200002f4
 8001378:	200002f8 	.word	0x200002f8
 800137c:	200002fc 	.word	0x200002fc
 8001380:	20000301 	.word	0x20000301
 8001384:	200000b0 	.word	0x200000b0

08001388 <Read_HCSR04_Sensor>:

void Read_HCSR04_Sensor(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIGGER_GPIO_Port, TRIGGER_Pin, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 800138c:	2201      	movs	r2, #1
 800138e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001392:	480b      	ldr	r0, [pc, #44]	; (80013c0 <Read_HCSR04_Sensor+0x38>)
 8001394:	f002 fb5b 	bl	8003a4e <HAL_GPIO_WritePin>
	delay_us(10);  // wait for 10 us
 8001398:	200a      	movs	r0, #10
 800139a:	f7ff ff3d 	bl	8001218 <delay_us>
	HAL_GPIO_WritePin(TRIGGER_GPIO_Port, TRIGGER_Pin, GPIO_PIN_RESET);  // pull the TRIG pin low
 800139e:	2200      	movs	r2, #0
 80013a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013a4:	4806      	ldr	r0, [pc, #24]	; (80013c0 <Read_HCSR04_Sensor+0x38>)
 80013a6:	f002 fb52 	bl	8003a4e <HAL_GPIO_WritePin>
	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 80013aa:	4b06      	ldr	r3, [pc, #24]	; (80013c4 <Read_HCSR04_Sensor+0x3c>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	68da      	ldr	r2, [r3, #12]
 80013b0:	4b04      	ldr	r3, [pc, #16]	; (80013c4 <Read_HCSR04_Sensor+0x3c>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f042 0202 	orr.w	r2, r2, #2
 80013b8:	60da      	str	r2, [r3, #12]
}
 80013ba:	bf00      	nop
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40010800 	.word	0x40010800
 80013c4:	200000b0 	.word	0x200000b0

080013c8 <LCD_Display>:

void LCD_Display(void){
 80013c8:	b590      	push	{r4, r7, lr}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af02      	add	r7, sp, #8
	sprintf(data_line_1,"TEMP HUMI DIST");
 80013ce:	4913      	ldr	r1, [pc, #76]	; (800141c <LCD_Display+0x54>)
 80013d0:	4813      	ldr	r0, [pc, #76]	; (8001420 <LCD_Display+0x58>)
 80013d2:	f004 fd8b 	bl	8005eec <siprintf>
	sprintf(data_line_2,"%dC %d  %d", (int)temp, (int)humi,(int)distance);
 80013d6:	4b13      	ldr	r3, [pc, #76]	; (8001424 <LCD_Display+0x5c>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff fbbc 	bl	8000b58 <__aeabi_f2iz>
 80013e0:	4604      	mov	r4, r0
 80013e2:	4b11      	ldr	r3, [pc, #68]	; (8001428 <LCD_Display+0x60>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff fbb6 	bl	8000b58 <__aeabi_f2iz>
 80013ec:	4603      	mov	r3, r0
 80013ee:	4a0f      	ldr	r2, [pc, #60]	; (800142c <LCD_Display+0x64>)
 80013f0:	7812      	ldrb	r2, [r2, #0]
 80013f2:	9200      	str	r2, [sp, #0]
 80013f4:	4622      	mov	r2, r4
 80013f6:	490e      	ldr	r1, [pc, #56]	; (8001430 <LCD_Display+0x68>)
 80013f8:	480e      	ldr	r0, [pc, #56]	; (8001434 <LCD_Display+0x6c>)
 80013fa:	f004 fd77 	bl	8005eec <siprintf>
	lcd16x2_1stLine();
 80013fe:	f7ff fe2f 	bl	8001060 <lcd16x2_1stLine>
	lcd16x2_printf(data_line_1);
 8001402:	4807      	ldr	r0, [pc, #28]	; (8001420 <LCD_Display+0x58>)
 8001404:	f7ff fe3c 	bl	8001080 <lcd16x2_printf>
	lcd16x2_2ndLine();
 8001408:	f7ff fe32 	bl	8001070 <lcd16x2_2ndLine>
	lcd16x2_printf(data_line_2);
 800140c:	4809      	ldr	r0, [pc, #36]	; (8001434 <LCD_Display+0x6c>)
 800140e:	f7ff fe37 	bl	8001080 <lcd16x2_printf>
}
 8001412:	bf00      	nop
 8001414:	3704      	adds	r7, #4
 8001416:	46bd      	mov	sp, r7
 8001418:	bd90      	pop	{r4, r7, pc}
 800141a:	bf00      	nop
 800141c:	0800681c 	.word	0x0800681c
 8001420:	200002d4 	.word	0x200002d4
 8001424:	200002c0 	.word	0x200002c0
 8001428:	200002c4 	.word	0x200002c4
 800142c:	20000301 	.word	0x20000301
 8001430:	0800682c 	.word	0x0800682c
 8001434:	200002e4 	.word	0x200002e4

08001438 <DHT11_UART_Transmit>:

void DHT11_UART_Transmit(void){
 8001438:	b590      	push	{r4, r7, lr}
 800143a:	b085      	sub	sp, #20
 800143c:	af02      	add	r7, sp, #8
	memset(TxBuffer, 0, TransmitBuff_SIZE);
 800143e:	2246      	movs	r2, #70	; 0x46
 8001440:	2100      	movs	r1, #0
 8001442:	4821      	ldr	r0, [pc, #132]	; (80014c8 <DHT11_UART_Transmit+0x90>)
 8001444:	f004 fd4a 	bl	8005edc <memset>
	new_tick = HAL_GetTick();
 8001448:	f001 fd8c 	bl	8002f64 <HAL_GetTick>
 800144c:	4603      	mov	r3, r0
 800144e:	461a      	mov	r2, r3
 8001450:	4b1e      	ldr	r3, [pc, #120]	; (80014cc <DHT11_UART_Transmit+0x94>)
 8001452:	601a      	str	r2, [r3, #0]
	sprintf((char*)TxBuffer, "\nTemperature: %doC, Humidity: %d%% %d\n", (int) temp, (int) humi, (int) (new_tick - old_tick));
 8001454:	4b1e      	ldr	r3, [pc, #120]	; (80014d0 <DHT11_UART_Transmit+0x98>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff fb7d 	bl	8000b58 <__aeabi_f2iz>
 800145e:	4604      	mov	r4, r0
 8001460:	4b1c      	ldr	r3, [pc, #112]	; (80014d4 <DHT11_UART_Transmit+0x9c>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff fb77 	bl	8000b58 <__aeabi_f2iz>
 800146a:	4601      	mov	r1, r0
 800146c:	4b17      	ldr	r3, [pc, #92]	; (80014cc <DHT11_UART_Transmit+0x94>)
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	4b19      	ldr	r3, [pc, #100]	; (80014d8 <DHT11_UART_Transmit+0xa0>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	9300      	str	r3, [sp, #0]
 8001478:	460b      	mov	r3, r1
 800147a:	4622      	mov	r2, r4
 800147c:	4917      	ldr	r1, [pc, #92]	; (80014dc <DHT11_UART_Transmit+0xa4>)
 800147e:	4812      	ldr	r0, [pc, #72]	; (80014c8 <DHT11_UART_Transmit+0x90>)
 8001480:	f004 fd34 	bl	8005eec <siprintf>
	old_tick = new_tick;
 8001484:	4b11      	ldr	r3, [pc, #68]	; (80014cc <DHT11_UART_Transmit+0x94>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a13      	ldr	r2, [pc, #76]	; (80014d8 <DHT11_UART_Transmit+0xa0>)
 800148a:	6013      	str	r3, [r2, #0]
	for(size_t i = 0; i < sizeof(TxBuffer); i++){
 800148c:	2300      	movs	r3, #0
 800148e:	607b      	str	r3, [r7, #4]
 8001490:	e00e      	b.n	80014b0 <DHT11_UART_Transmit+0x78>
		if(TxBuffer[i] == '\0'){
 8001492:	4a0d      	ldr	r2, [pc, #52]	; (80014c8 <DHT11_UART_Transmit+0x90>)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	4413      	add	r3, r2
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d105      	bne.n	80014aa <DHT11_UART_Transmit+0x72>
			len = i + 1;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	3301      	adds	r3, #1
 80014a4:	b2da      	uxtb	r2, r3
 80014a6:	4b0e      	ldr	r3, [pc, #56]	; (80014e0 <DHT11_UART_Transmit+0xa8>)
 80014a8:	701a      	strb	r2, [r3, #0]
	for(size_t i = 0; i < sizeof(TxBuffer); i++){
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	3301      	adds	r3, #1
 80014ae:	607b      	str	r3, [r7, #4]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2b45      	cmp	r3, #69	; 0x45
 80014b4:	d9ed      	bls.n	8001492 <DHT11_UART_Transmit+0x5a>
		}
	}
	HAL_UART_Transmit_DMA(&huart1, TxBuffer, sizeof(TxBuffer));
 80014b6:	2246      	movs	r2, #70	; 0x46
 80014b8:	4903      	ldr	r1, [pc, #12]	; (80014c8 <DHT11_UART_Transmit+0x90>)
 80014ba:	480a      	ldr	r0, [pc, #40]	; (80014e4 <DHT11_UART_Transmit+0xac>)
 80014bc:	f003 ff04 	bl	80052c8 <HAL_UART_Transmit_DMA>
}
 80014c0:	bf00      	nop
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd90      	pop	{r4, r7, pc}
 80014c8:	20000310 	.word	0x20000310
 80014cc:	200003c0 	.word	0x200003c0
 80014d0:	200002c0 	.word	0x200002c0
 80014d4:	200002c4 	.word	0x200002c4
 80014d8:	200003bc 	.word	0x200003bc
 80014dc:	08006838 	.word	0x08006838
 80014e0:	20000367 	.word	0x20000367
 80014e4:	20000140 	.word	0x20000140

080014e8 <Temp_UART_Transmit>:

void Temp_UART_Transmit(void){
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
	new_tick = HAL_GetTick();
 80014ee:	f001 fd39 	bl	8002f64 <HAL_GetTick>
 80014f2:	4603      	mov	r3, r0
 80014f4:	461a      	mov	r2, r3
 80014f6:	4b1c      	ldr	r3, [pc, #112]	; (8001568 <Temp_UART_Transmit+0x80>)
 80014f8:	601a      	str	r2, [r3, #0]
	memset(TxBuffer, 0, TransmitBuff_SIZE);
 80014fa:	2246      	movs	r2, #70	; 0x46
 80014fc:	2100      	movs	r1, #0
 80014fe:	481b      	ldr	r0, [pc, #108]	; (800156c <Temp_UART_Transmit+0x84>)
 8001500:	f004 fcec 	bl	8005edc <memset>
	sprintf((char*)TxBuffer, "\nTemperature: %doC : %d\n", (int) temp, (int)(new_tick - old_tick));
 8001504:	4b1a      	ldr	r3, [pc, #104]	; (8001570 <Temp_UART_Transmit+0x88>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff fb25 	bl	8000b58 <__aeabi_f2iz>
 800150e:	4601      	mov	r1, r0
 8001510:	4b15      	ldr	r3, [pc, #84]	; (8001568 <Temp_UART_Transmit+0x80>)
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	4b17      	ldr	r3, [pc, #92]	; (8001574 <Temp_UART_Transmit+0x8c>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	460a      	mov	r2, r1
 800151c:	4916      	ldr	r1, [pc, #88]	; (8001578 <Temp_UART_Transmit+0x90>)
 800151e:	4813      	ldr	r0, [pc, #76]	; (800156c <Temp_UART_Transmit+0x84>)
 8001520:	f004 fce4 	bl	8005eec <siprintf>
	old_tick = new_tick;
 8001524:	4b10      	ldr	r3, [pc, #64]	; (8001568 <Temp_UART_Transmit+0x80>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a12      	ldr	r2, [pc, #72]	; (8001574 <Temp_UART_Transmit+0x8c>)
 800152a:	6013      	str	r3, [r2, #0]
	for(size_t i = 0; i < sizeof(TxBuffer); i++){
 800152c:	2300      	movs	r3, #0
 800152e:	607b      	str	r3, [r7, #4]
 8001530:	e00e      	b.n	8001550 <Temp_UART_Transmit+0x68>
		if(TxBuffer[i] == '\0'){
 8001532:	4a0e      	ldr	r2, [pc, #56]	; (800156c <Temp_UART_Transmit+0x84>)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	4413      	add	r3, r2
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d105      	bne.n	800154a <Temp_UART_Transmit+0x62>
			len = i + 1;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	b2db      	uxtb	r3, r3
 8001542:	3301      	adds	r3, #1
 8001544:	b2da      	uxtb	r2, r3
 8001546:	4b0d      	ldr	r3, [pc, #52]	; (800157c <Temp_UART_Transmit+0x94>)
 8001548:	701a      	strb	r2, [r3, #0]
	for(size_t i = 0; i < sizeof(TxBuffer); i++){
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	3301      	adds	r3, #1
 800154e:	607b      	str	r3, [r7, #4]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2b45      	cmp	r3, #69	; 0x45
 8001554:	d9ed      	bls.n	8001532 <Temp_UART_Transmit+0x4a>
		}
	}
	HAL_UART_Transmit_DMA(&huart1, TxBuffer, sizeof(TxBuffer));
 8001556:	2246      	movs	r2, #70	; 0x46
 8001558:	4904      	ldr	r1, [pc, #16]	; (800156c <Temp_UART_Transmit+0x84>)
 800155a:	4809      	ldr	r0, [pc, #36]	; (8001580 <Temp_UART_Transmit+0x98>)
 800155c:	f003 feb4 	bl	80052c8 <HAL_UART_Transmit_DMA>
}
 8001560:	bf00      	nop
 8001562:	3708      	adds	r7, #8
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	200003c0 	.word	0x200003c0
 800156c:	20000310 	.word	0x20000310
 8001570:	200002c0 	.word	0x200002c0
 8001574:	200003bc 	.word	0x200003bc
 8001578:	08006860 	.word	0x08006860
 800157c:	20000367 	.word	0x20000367
 8001580:	20000140 	.word	0x20000140

08001584 <Humi_UART_Transmit>:

void Humi_UART_Transmit(void){
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
	memset(TxBuffer, 0, TransmitBuff_SIZE);
 800158a:	2246      	movs	r2, #70	; 0x46
 800158c:	2100      	movs	r1, #0
 800158e:	4816      	ldr	r0, [pc, #88]	; (80015e8 <Humi_UART_Transmit+0x64>)
 8001590:	f004 fca4 	bl	8005edc <memset>
	sprintf((char*)TxBuffer, "\nHumidity: %d%%\n", (int) humi);
 8001594:	4b15      	ldr	r3, [pc, #84]	; (80015ec <Humi_UART_Transmit+0x68>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff fadd 	bl	8000b58 <__aeabi_f2iz>
 800159e:	4603      	mov	r3, r0
 80015a0:	461a      	mov	r2, r3
 80015a2:	4913      	ldr	r1, [pc, #76]	; (80015f0 <Humi_UART_Transmit+0x6c>)
 80015a4:	4810      	ldr	r0, [pc, #64]	; (80015e8 <Humi_UART_Transmit+0x64>)
 80015a6:	f004 fca1 	bl	8005eec <siprintf>
	for(size_t i = 0; i < sizeof(TxBuffer); i++){
 80015aa:	2300      	movs	r3, #0
 80015ac:	607b      	str	r3, [r7, #4]
 80015ae:	e00e      	b.n	80015ce <Humi_UART_Transmit+0x4a>
		if(TxBuffer[i] == '\0'){
 80015b0:	4a0d      	ldr	r2, [pc, #52]	; (80015e8 <Humi_UART_Transmit+0x64>)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4413      	add	r3, r2
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d105      	bne.n	80015c8 <Humi_UART_Transmit+0x44>
			len = i + 1;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	3301      	adds	r3, #1
 80015c2:	b2da      	uxtb	r2, r3
 80015c4:	4b0b      	ldr	r3, [pc, #44]	; (80015f4 <Humi_UART_Transmit+0x70>)
 80015c6:	701a      	strb	r2, [r3, #0]
	for(size_t i = 0; i < sizeof(TxBuffer); i++){
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	3301      	adds	r3, #1
 80015cc:	607b      	str	r3, [r7, #4]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2b45      	cmp	r3, #69	; 0x45
 80015d2:	d9ed      	bls.n	80015b0 <Humi_UART_Transmit+0x2c>
		}
	}
	HAL_UART_Transmit_DMA(&huart1, TxBuffer, sizeof(TxBuffer));
 80015d4:	2246      	movs	r2, #70	; 0x46
 80015d6:	4904      	ldr	r1, [pc, #16]	; (80015e8 <Humi_UART_Transmit+0x64>)
 80015d8:	4807      	ldr	r0, [pc, #28]	; (80015f8 <Humi_UART_Transmit+0x74>)
 80015da:	f003 fe75 	bl	80052c8 <HAL_UART_Transmit_DMA>
}
 80015de:	bf00      	nop
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	20000310 	.word	0x20000310
 80015ec:	200002c4 	.word	0x200002c4
 80015f0:	0800687c 	.word	0x0800687c
 80015f4:	20000367 	.word	0x20000367
 80015f8:	20000140 	.word	0x20000140

080015fc <Humi_HCSR04_UART_Transmit>:

void Humi_HCSR04_UART_Transmit(void){
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
	memset(TxBuffer, 0, TransmitBuff_SIZE);
 8001602:	2246      	movs	r2, #70	; 0x46
 8001604:	2100      	movs	r1, #0
 8001606:	4816      	ldr	r0, [pc, #88]	; (8001660 <Humi_HCSR04_UART_Transmit+0x64>)
 8001608:	f004 fc68 	bl	8005edc <memset>
	sprintf((char*)TxBuffer, "\nHumidity: %d%%, Distance: %d cm\n", (int) humi, (int) distance);
 800160c:	4b15      	ldr	r3, [pc, #84]	; (8001664 <Humi_HCSR04_UART_Transmit+0x68>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff faa1 	bl	8000b58 <__aeabi_f2iz>
 8001616:	4602      	mov	r2, r0
 8001618:	4b13      	ldr	r3, [pc, #76]	; (8001668 <Humi_HCSR04_UART_Transmit+0x6c>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	4913      	ldr	r1, [pc, #76]	; (800166c <Humi_HCSR04_UART_Transmit+0x70>)
 800161e:	4810      	ldr	r0, [pc, #64]	; (8001660 <Humi_HCSR04_UART_Transmit+0x64>)
 8001620:	f004 fc64 	bl	8005eec <siprintf>
	for(size_t i = 0; i < sizeof(TxBuffer); i++){
 8001624:	2300      	movs	r3, #0
 8001626:	607b      	str	r3, [r7, #4]
 8001628:	e00e      	b.n	8001648 <Humi_HCSR04_UART_Transmit+0x4c>
		if(TxBuffer[i] == '\0'){
 800162a:	4a0d      	ldr	r2, [pc, #52]	; (8001660 <Humi_HCSR04_UART_Transmit+0x64>)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	4413      	add	r3, r2
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d105      	bne.n	8001642 <Humi_HCSR04_UART_Transmit+0x46>
			len = i + 1;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	b2db      	uxtb	r3, r3
 800163a:	3301      	adds	r3, #1
 800163c:	b2da      	uxtb	r2, r3
 800163e:	4b0c      	ldr	r3, [pc, #48]	; (8001670 <Humi_HCSR04_UART_Transmit+0x74>)
 8001640:	701a      	strb	r2, [r3, #0]
	for(size_t i = 0; i < sizeof(TxBuffer); i++){
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	3301      	adds	r3, #1
 8001646:	607b      	str	r3, [r7, #4]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2b45      	cmp	r3, #69	; 0x45
 800164c:	d9ed      	bls.n	800162a <Humi_HCSR04_UART_Transmit+0x2e>
		}
	}
	HAL_UART_Transmit_DMA(&huart1, TxBuffer, sizeof(TxBuffer));
 800164e:	2246      	movs	r2, #70	; 0x46
 8001650:	4903      	ldr	r1, [pc, #12]	; (8001660 <Humi_HCSR04_UART_Transmit+0x64>)
 8001652:	4808      	ldr	r0, [pc, #32]	; (8001674 <Humi_HCSR04_UART_Transmit+0x78>)
 8001654:	f003 fe38 	bl	80052c8 <HAL_UART_Transmit_DMA>
}
 8001658:	bf00      	nop
 800165a:	3708      	adds	r7, #8
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	20000310 	.word	0x20000310
 8001664:	200002c4 	.word	0x200002c4
 8001668:	20000301 	.word	0x20000301
 800166c:	08006890 	.word	0x08006890
 8001670:	20000367 	.word	0x20000367
 8001674:	20000140 	.word	0x20000140

08001678 <Temp_HCSR04_UART_Transmit>:

void Temp_HCSR04_UART_Transmit(void){
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
	memset(TxBuffer, 0, TransmitBuff_SIZE);
 800167e:	2246      	movs	r2, #70	; 0x46
 8001680:	2100      	movs	r1, #0
 8001682:	4816      	ldr	r0, [pc, #88]	; (80016dc <Temp_HCSR04_UART_Transmit+0x64>)
 8001684:	f004 fc2a 	bl	8005edc <memset>
	sprintf((char*)TxBuffer, "\nTemperature: %doC, Distance: %d cm\n", (int) temp, (int) distance);
 8001688:	4b15      	ldr	r3, [pc, #84]	; (80016e0 <Temp_HCSR04_UART_Transmit+0x68>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4618      	mov	r0, r3
 800168e:	f7ff fa63 	bl	8000b58 <__aeabi_f2iz>
 8001692:	4602      	mov	r2, r0
 8001694:	4b13      	ldr	r3, [pc, #76]	; (80016e4 <Temp_HCSR04_UART_Transmit+0x6c>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	4913      	ldr	r1, [pc, #76]	; (80016e8 <Temp_HCSR04_UART_Transmit+0x70>)
 800169a:	4810      	ldr	r0, [pc, #64]	; (80016dc <Temp_HCSR04_UART_Transmit+0x64>)
 800169c:	f004 fc26 	bl	8005eec <siprintf>
	for(size_t i = 0; i < sizeof(TxBuffer); i++){
 80016a0:	2300      	movs	r3, #0
 80016a2:	607b      	str	r3, [r7, #4]
 80016a4:	e00e      	b.n	80016c4 <Temp_HCSR04_UART_Transmit+0x4c>
		if(TxBuffer[i] == '\0'){
 80016a6:	4a0d      	ldr	r2, [pc, #52]	; (80016dc <Temp_HCSR04_UART_Transmit+0x64>)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	4413      	add	r3, r2
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d105      	bne.n	80016be <Temp_HCSR04_UART_Transmit+0x46>
			len = i + 1;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	3301      	adds	r3, #1
 80016b8:	b2da      	uxtb	r2, r3
 80016ba:	4b0c      	ldr	r3, [pc, #48]	; (80016ec <Temp_HCSR04_UART_Transmit+0x74>)
 80016bc:	701a      	strb	r2, [r3, #0]
	for(size_t i = 0; i < sizeof(TxBuffer); i++){
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	3301      	adds	r3, #1
 80016c2:	607b      	str	r3, [r7, #4]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2b45      	cmp	r3, #69	; 0x45
 80016c8:	d9ed      	bls.n	80016a6 <Temp_HCSR04_UART_Transmit+0x2e>
		}
	}
	HAL_UART_Transmit_DMA(&huart1, TxBuffer, sizeof(TxBuffer));
 80016ca:	2246      	movs	r2, #70	; 0x46
 80016cc:	4903      	ldr	r1, [pc, #12]	; (80016dc <Temp_HCSR04_UART_Transmit+0x64>)
 80016ce:	4808      	ldr	r0, [pc, #32]	; (80016f0 <Temp_HCSR04_UART_Transmit+0x78>)
 80016d0:	f003 fdfa 	bl	80052c8 <HAL_UART_Transmit_DMA>
}
 80016d4:	bf00      	nop
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	20000310 	.word	0x20000310
 80016e0:	200002c0 	.word	0x200002c0
 80016e4:	20000301 	.word	0x20000301
 80016e8:	080068b4 	.word	0x080068b4
 80016ec:	20000367 	.word	0x20000367
 80016f0:	20000140 	.word	0x20000140

080016f4 <HCSR04_UART_Transmit>:

void HCSR04_UART_Transmit(void){
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
	memset(TxBuffer, 0, TransmitBuff_SIZE);
 80016fa:	2246      	movs	r2, #70	; 0x46
 80016fc:	2100      	movs	r1, #0
 80016fe:	4814      	ldr	r0, [pc, #80]	; (8001750 <HCSR04_UART_Transmit+0x5c>)
 8001700:	f004 fbec 	bl	8005edc <memset>
	sprintf((char*)TxBuffer, "\nDistance: %d cm\n", (int)distance);
 8001704:	4b13      	ldr	r3, [pc, #76]	; (8001754 <HCSR04_UART_Transmit+0x60>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	461a      	mov	r2, r3
 800170a:	4913      	ldr	r1, [pc, #76]	; (8001758 <HCSR04_UART_Transmit+0x64>)
 800170c:	4810      	ldr	r0, [pc, #64]	; (8001750 <HCSR04_UART_Transmit+0x5c>)
 800170e:	f004 fbed 	bl	8005eec <siprintf>
	for(size_t i = 0; i < sizeof(TxBuffer); i++){
 8001712:	2300      	movs	r3, #0
 8001714:	607b      	str	r3, [r7, #4]
 8001716:	e00e      	b.n	8001736 <HCSR04_UART_Transmit+0x42>
		if(TxBuffer[i] == '\0'){
 8001718:	4a0d      	ldr	r2, [pc, #52]	; (8001750 <HCSR04_UART_Transmit+0x5c>)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4413      	add	r3, r2
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d105      	bne.n	8001730 <HCSR04_UART_Transmit+0x3c>
			len = i + 1;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	b2db      	uxtb	r3, r3
 8001728:	3301      	adds	r3, #1
 800172a:	b2da      	uxtb	r2, r3
 800172c:	4b0b      	ldr	r3, [pc, #44]	; (800175c <HCSR04_UART_Transmit+0x68>)
 800172e:	701a      	strb	r2, [r3, #0]
	for(size_t i = 0; i < sizeof(TxBuffer); i++){
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	3301      	adds	r3, #1
 8001734:	607b      	str	r3, [r7, #4]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2b45      	cmp	r3, #69	; 0x45
 800173a:	d9ed      	bls.n	8001718 <HCSR04_UART_Transmit+0x24>
		}
	}
	HAL_UART_Transmit_DMA(&huart1, TxBuffer, sizeof(TxBuffer));
 800173c:	2246      	movs	r2, #70	; 0x46
 800173e:	4904      	ldr	r1, [pc, #16]	; (8001750 <HCSR04_UART_Transmit+0x5c>)
 8001740:	4807      	ldr	r0, [pc, #28]	; (8001760 <HCSR04_UART_Transmit+0x6c>)
 8001742:	f003 fdc1 	bl	80052c8 <HAL_UART_Transmit_DMA>

}
 8001746:	bf00      	nop
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	20000310 	.word	0x20000310
 8001754:	20000301 	.word	0x20000301
 8001758:	080068dc 	.word	0x080068dc
 800175c:	20000367 	.word	0x20000367
 8001760:	20000140 	.word	0x20000140

08001764 <DHT11_HCSR04_UART_Transmit>:

void DHT11_HCSR04_UART_Transmit(void){
 8001764:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001766:	b085      	sub	sp, #20
 8001768:	af02      	add	r7, sp, #8
	memset(TxBuffer, 0, TransmitBuff_SIZE);
 800176a:	2246      	movs	r2, #70	; 0x46
 800176c:	2100      	movs	r1, #0
 800176e:	481f      	ldr	r0, [pc, #124]	; (80017ec <DHT11_HCSR04_UART_Transmit+0x88>)
 8001770:	f004 fbb4 	bl	8005edc <memset>
	sprintf((char*)TxBuffer, "\nTemperature: %doC, Humidity: %d%%, Distance: %d cm, Time: %d\n", (int) temp, (int) humi, (int)distance, (int)HAL_GetTick());
 8001774:	4b1e      	ldr	r3, [pc, #120]	; (80017f0 <DHT11_HCSR04_UART_Transmit+0x8c>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff f9ed 	bl	8000b58 <__aeabi_f2iz>
 800177e:	4604      	mov	r4, r0
 8001780:	4b1c      	ldr	r3, [pc, #112]	; (80017f4 <DHT11_HCSR04_UART_Transmit+0x90>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff f9e7 	bl	8000b58 <__aeabi_f2iz>
 800178a:	4605      	mov	r5, r0
 800178c:	4b1a      	ldr	r3, [pc, #104]	; (80017f8 <DHT11_HCSR04_UART_Transmit+0x94>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	461e      	mov	r6, r3
 8001792:	f001 fbe7 	bl	8002f64 <HAL_GetTick>
 8001796:	4603      	mov	r3, r0
 8001798:	9301      	str	r3, [sp, #4]
 800179a:	9600      	str	r6, [sp, #0]
 800179c:	462b      	mov	r3, r5
 800179e:	4622      	mov	r2, r4
 80017a0:	4916      	ldr	r1, [pc, #88]	; (80017fc <DHT11_HCSR04_UART_Transmit+0x98>)
 80017a2:	4812      	ldr	r0, [pc, #72]	; (80017ec <DHT11_HCSR04_UART_Transmit+0x88>)
 80017a4:	f004 fba2 	bl	8005eec <siprintf>
	for(size_t i = 0; i < sizeof(TxBuffer); i++){
 80017a8:	2300      	movs	r3, #0
 80017aa:	607b      	str	r3, [r7, #4]
 80017ac:	e00e      	b.n	80017cc <DHT11_HCSR04_UART_Transmit+0x68>
		if(TxBuffer[i] == '\0'){
 80017ae:	4a0f      	ldr	r2, [pc, #60]	; (80017ec <DHT11_HCSR04_UART_Transmit+0x88>)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	4413      	add	r3, r2
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d105      	bne.n	80017c6 <DHT11_HCSR04_UART_Transmit+0x62>
			len = i + 1;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	3301      	adds	r3, #1
 80017c0:	b2da      	uxtb	r2, r3
 80017c2:	4b0f      	ldr	r3, [pc, #60]	; (8001800 <DHT11_HCSR04_UART_Transmit+0x9c>)
 80017c4:	701a      	strb	r2, [r3, #0]
	for(size_t i = 0; i < sizeof(TxBuffer); i++){
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	3301      	adds	r3, #1
 80017ca:	607b      	str	r3, [r7, #4]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2b45      	cmp	r3, #69	; 0x45
 80017d0:	d9ed      	bls.n	80017ae <DHT11_HCSR04_UART_Transmit+0x4a>
		}
	}
	HAL_UART_Transmit_DMA(&huart1, TxBuffer, len);
 80017d2:	4b0b      	ldr	r3, [pc, #44]	; (8001800 <DHT11_HCSR04_UART_Transmit+0x9c>)
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	b29b      	uxth	r3, r3
 80017d8:	461a      	mov	r2, r3
 80017da:	4904      	ldr	r1, [pc, #16]	; (80017ec <DHT11_HCSR04_UART_Transmit+0x88>)
 80017dc:	4809      	ldr	r0, [pc, #36]	; (8001804 <DHT11_HCSR04_UART_Transmit+0xa0>)
 80017de:	f003 fd73 	bl	80052c8 <HAL_UART_Transmit_DMA>
}
 80017e2:	bf00      	nop
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017ea:	bf00      	nop
 80017ec:	20000310 	.word	0x20000310
 80017f0:	200002c0 	.word	0x200002c0
 80017f4:	200002c4 	.word	0x200002c4
 80017f8:	20000301 	.word	0x20000301
 80017fc:	080068f0 	.word	0x080068f0
 8001800:	20000367 	.word	0x20000367
 8001804:	20000140 	.word	0x20000140

08001808 <processRecCmd>:

void processRecCmd(size_t len){
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
	if(MainBuffer[0] != 0x00 || MainBuffer[len-1] != 0x08){
 8001810:	4b74      	ldr	r3, [pc, #464]	; (80019e4 <processRecCmd+0x1dc>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	2b00      	cmp	r3, #0
 8001816:	f040 80de 	bne.w	80019d6 <processRecCmd+0x1ce>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	3b01      	subs	r3, #1
 800181e:	4a71      	ldr	r2, [pc, #452]	; (80019e4 <processRecCmd+0x1dc>)
 8001820:	5cd3      	ldrb	r3, [r2, r3]
 8001822:	2b08      	cmp	r3, #8
 8001824:	f040 80d7 	bne.w	80019d6 <processRecCmd+0x1ce>
		return;
	};

	uint8_t cmd_type = MainBuffer[cmd_index]; // MainBuffer[1]
 8001828:	4b6f      	ldr	r3, [pc, #444]	; (80019e8 <processRecCmd+0x1e0>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	461a      	mov	r2, r3
 800182e:	4b6d      	ldr	r3, [pc, #436]	; (80019e4 <processRecCmd+0x1dc>)
 8001830:	5c9b      	ldrb	r3, [r3, r2]
 8001832:	73fb      	strb	r3, [r7, #15]

	switch (cmd_type) {
 8001834:	7bfb      	ldrb	r3, [r7, #15]
 8001836:	2b01      	cmp	r3, #1
 8001838:	d072      	beq.n	8001920 <processRecCmd+0x118>
 800183a:	2b02      	cmp	r3, #2
 800183c:	f040 80cd 	bne.w	80019da <processRecCmd+0x1d2>
		case 0x02:
			/* some codes */
			uart_enable_cmd_2_tmp = true;
 8001840:	4b6a      	ldr	r3, [pc, #424]	; (80019ec <processRecCmd+0x1e4>)
 8001842:	2201      	movs	r2, #1
 8001844:	701a      	strb	r2, [r3, #0]
			uart_enable_cmd_1_tmp = false;
 8001846:	4b6a      	ldr	r3, [pc, #424]	; (80019f0 <processRecCmd+0x1e8>)
 8001848:	2200      	movs	r2, #0
 800184a:	701a      	strb	r2, [r3, #0]
			button_enable = 0;
 800184c:	4b69      	ldr	r3, [pc, #420]	; (80019f4 <processRecCmd+0x1ec>)
 800184e:	2200      	movs	r2, #0
 8001850:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001852:	2201      	movs	r2, #1
 8001854:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001858:	4867      	ldr	r0, [pc, #412]	; (80019f8 <processRecCmd+0x1f0>)
 800185a:	f002 f8f8 	bl	8003a4e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 800185e:	2201      	movs	r2, #1
 8001860:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001864:	4864      	ldr	r0, [pc, #400]	; (80019f8 <processRecCmd+0x1f0>)
 8001866:	f002 f8f2 	bl	8003a4e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 800186a:	2201      	movs	r2, #1
 800186c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001870:	4861      	ldr	r0, [pc, #388]	; (80019f8 <processRecCmd+0x1f0>)
 8001872:	f002 f8ec 	bl	8003a4e <HAL_GPIO_WritePin>
			isr_cnt = 0;
 8001876:	4b61      	ldr	r3, [pc, #388]	; (80019fc <processRecCmd+0x1f4>)
 8001878:	2200      	movs	r2, #0
 800187a:	701a      	strb	r2, [r3, #0]
			temp_cnt = 0;
 800187c:	4b60      	ldr	r3, [pc, #384]	; (8001a00 <processRecCmd+0x1f8>)
 800187e:	2200      	movs	r2, #0
 8001880:	701a      	strb	r2, [r3, #0]
			humi_cnt = 0;
 8001882:	4b60      	ldr	r3, [pc, #384]	; (8001a04 <processRecCmd+0x1fc>)
 8001884:	2200      	movs	r2, #0
 8001886:	701a      	strb	r2, [r3, #0]
			dist_cnt = 0;
 8001888:	4b5f      	ldr	r3, [pc, #380]	; (8001a08 <processRecCmd+0x200>)
 800188a:	2200      	movs	r2, #0
 800188c:	701a      	strb	r2, [r3, #0]
			transmit_DHT11_data_flag = 0;
 800188e:	4b5f      	ldr	r3, [pc, #380]	; (8001a0c <processRecCmd+0x204>)
 8001890:	2200      	movs	r2, #0
 8001892:	701a      	strb	r2, [r3, #0]
			transmit_temp_data_flag = 0;
 8001894:	4b5e      	ldr	r3, [pc, #376]	; (8001a10 <processRecCmd+0x208>)
 8001896:	2200      	movs	r2, #0
 8001898:	701a      	strb	r2, [r3, #0]
			transmit_humi_data_flag = 0;
 800189a:	4b5e      	ldr	r3, [pc, #376]	; (8001a14 <processRecCmd+0x20c>)
 800189c:	2200      	movs	r2, #0
 800189e:	701a      	strb	r2, [r3, #0]
			transmit_dist_data_flag = 0;
 80018a0:	4b5d      	ldr	r3, [pc, #372]	; (8001a18 <processRecCmd+0x210>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	701a      	strb	r2, [r3, #0]
			transmit_DHT11_HCSR04_data_flag = 0;
 80018a6:	4b5d      	ldr	r3, [pc, #372]	; (8001a1c <processRecCmd+0x214>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	701a      	strb	r2, [r3, #0]
			transmit_temp_HCSR04_data_flag = 0;
 80018ac:	4b5c      	ldr	r3, [pc, #368]	; (8001a20 <processRecCmd+0x218>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	701a      	strb	r2, [r3, #0]
			transmit_humi_HCSR04_data_flag = 0;
 80018b2:	4b5c      	ldr	r3, [pc, #368]	; (8001a24 <processRecCmd+0x21c>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	701a      	strb	r2, [r3, #0]

			isDistTrans = 0;
 80018b8:	4b5b      	ldr	r3, [pc, #364]	; (8001a28 <processRecCmd+0x220>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	701a      	strb	r2, [r3, #0]
			isHumiTrans = 0;
 80018be:	4b5b      	ldr	r3, [pc, #364]	; (8001a2c <processRecCmd+0x224>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	701a      	strb	r2, [r3, #0]

			temp_threshold = MainBuffer[5];
 80018c4:	4b47      	ldr	r3, [pc, #284]	; (80019e4 <processRecCmd+0x1dc>)
 80018c6:	795a      	ldrb	r2, [r3, #5]
 80018c8:	4b59      	ldr	r3, [pc, #356]	; (8001a30 <processRecCmd+0x228>)
 80018ca:	701a      	strb	r2, [r3, #0]
			humi_threshold = MainBuffer[6];
 80018cc:	4b45      	ldr	r3, [pc, #276]	; (80019e4 <processRecCmd+0x1dc>)
 80018ce:	799a      	ldrb	r2, [r3, #6]
 80018d0:	4b58      	ldr	r3, [pc, #352]	; (8001a34 <processRecCmd+0x22c>)
 80018d2:	701a      	strb	r2, [r3, #0]
			dist_threshold = MainBuffer[7];
 80018d4:	4b43      	ldr	r3, [pc, #268]	; (80019e4 <processRecCmd+0x1dc>)
 80018d6:	79da      	ldrb	r2, [r3, #7]
 80018d8:	4b57      	ldr	r3, [pc, #348]	; (8001a38 <processRecCmd+0x230>)
 80018da:	701a      	strb	r2, [r3, #0]
			if(MainBuffer[2] == 0x01){
 80018dc:	4b41      	ldr	r3, [pc, #260]	; (80019e4 <processRecCmd+0x1dc>)
 80018de:	789b      	ldrb	r3, [r3, #2]
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d103      	bne.n	80018ec <processRecCmd+0xe4>
				temp_transmit_period = 1;
 80018e4:	4b55      	ldr	r3, [pc, #340]	; (8001a3c <processRecCmd+0x234>)
 80018e6:	2201      	movs	r2, #1
 80018e8:	701a      	strb	r2, [r3, #0]
 80018ea:	e002      	b.n	80018f2 <processRecCmd+0xea>
			}
			else temp_transmit_period = 0;
 80018ec:	4b53      	ldr	r3, [pc, #332]	; (8001a3c <processRecCmd+0x234>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	701a      	strb	r2, [r3, #0]

			if(MainBuffer[3] == 0x01){
 80018f2:	4b3c      	ldr	r3, [pc, #240]	; (80019e4 <processRecCmd+0x1dc>)
 80018f4:	78db      	ldrb	r3, [r3, #3]
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d103      	bne.n	8001902 <processRecCmd+0xfa>
				humi_transmit_period = 1;
 80018fa:	4b51      	ldr	r3, [pc, #324]	; (8001a40 <processRecCmd+0x238>)
 80018fc:	2201      	movs	r2, #1
 80018fe:	701a      	strb	r2, [r3, #0]
 8001900:	e002      	b.n	8001908 <processRecCmd+0x100>
			}
			else humi_transmit_period = 0;
 8001902:	4b4f      	ldr	r3, [pc, #316]	; (8001a40 <processRecCmd+0x238>)
 8001904:	2200      	movs	r2, #0
 8001906:	701a      	strb	r2, [r3, #0]

			if(MainBuffer[4] == 0x01){
 8001908:	4b36      	ldr	r3, [pc, #216]	; (80019e4 <processRecCmd+0x1dc>)
 800190a:	791b      	ldrb	r3, [r3, #4]
 800190c:	2b01      	cmp	r3, #1
 800190e:	d103      	bne.n	8001918 <processRecCmd+0x110>
				HCSR04_transmit_period = 1;
 8001910:	4b4c      	ldr	r3, [pc, #304]	; (8001a44 <processRecCmd+0x23c>)
 8001912:	2201      	movs	r2, #1
 8001914:	701a      	strb	r2, [r3, #0]
			}
			else HCSR04_transmit_period = 0;

		  break;
 8001916:	e061      	b.n	80019dc <processRecCmd+0x1d4>
			else HCSR04_transmit_period = 0;
 8001918:	4b4a      	ldr	r3, [pc, #296]	; (8001a44 <processRecCmd+0x23c>)
 800191a:	2200      	movs	r2, #0
 800191c:	701a      	strb	r2, [r3, #0]
		  break;
 800191e:	e05d      	b.n	80019dc <processRecCmd+0x1d4>

		case 0x01:
			/* some codes */
			uart_enable_cmd_1_tmp = true;
 8001920:	4b33      	ldr	r3, [pc, #204]	; (80019f0 <processRecCmd+0x1e8>)
 8001922:	2201      	movs	r2, #1
 8001924:	701a      	strb	r2, [r3, #0]
			uart_enable_cmd_2_tmp = false;
 8001926:	4b31      	ldr	r3, [pc, #196]	; (80019ec <processRecCmd+0x1e4>)
 8001928:	2200      	movs	r2, #0
 800192a:	701a      	strb	r2, [r3, #0]
			button_enable = true;
 800192c:	4b31      	ldr	r3, [pc, #196]	; (80019f4 <processRecCmd+0x1ec>)
 800192e:	2201      	movs	r2, #1
 8001930:	701a      	strb	r2, [r3, #0]
			/* Xoa thong so cai dat tu nut nhan */
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001932:	2201      	movs	r2, #1
 8001934:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001938:	482f      	ldr	r0, [pc, #188]	; (80019f8 <processRecCmd+0x1f0>)
 800193a:	f002 f888 	bl	8003a4e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 800193e:	2201      	movs	r2, #1
 8001940:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001944:	482c      	ldr	r0, [pc, #176]	; (80019f8 <processRecCmd+0x1f0>)
 8001946:	f002 f882 	bl	8003a4e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 800194a:	2201      	movs	r2, #1
 800194c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001950:	4829      	ldr	r0, [pc, #164]	; (80019f8 <processRecCmd+0x1f0>)
 8001952:	f002 f87c 	bl	8003a4e <HAL_GPIO_WritePin>
			isr_cnt = 0;
 8001956:	4b29      	ldr	r3, [pc, #164]	; (80019fc <processRecCmd+0x1f4>)
 8001958:	2200      	movs	r2, #0
 800195a:	701a      	strb	r2, [r3, #0]

			/* Xoa cac co cho phep */
			transmit_DHT11_data_flag = 0;
 800195c:	4b2b      	ldr	r3, [pc, #172]	; (8001a0c <processRecCmd+0x204>)
 800195e:	2200      	movs	r2, #0
 8001960:	701a      	strb	r2, [r3, #0]
			transmit_temp_data_flag = 0;
 8001962:	4b2b      	ldr	r3, [pc, #172]	; (8001a10 <processRecCmd+0x208>)
 8001964:	2200      	movs	r2, #0
 8001966:	701a      	strb	r2, [r3, #0]
			transmit_humi_data_flag = 0;
 8001968:	4b2a      	ldr	r3, [pc, #168]	; (8001a14 <processRecCmd+0x20c>)
 800196a:	2200      	movs	r2, #0
 800196c:	701a      	strb	r2, [r3, #0]
			transmit_dist_data_flag = 0;
 800196e:	4b2a      	ldr	r3, [pc, #168]	; (8001a18 <processRecCmd+0x210>)
 8001970:	2200      	movs	r2, #0
 8001972:	701a      	strb	r2, [r3, #0]
			transmit_DHT11_HCSR04_data_flag = 0;
 8001974:	4b29      	ldr	r3, [pc, #164]	; (8001a1c <processRecCmd+0x214>)
 8001976:	2200      	movs	r2, #0
 8001978:	701a      	strb	r2, [r3, #0]
			transmit_temp_HCSR04_data_flag = 0;
 800197a:	4b29      	ldr	r3, [pc, #164]	; (8001a20 <processRecCmd+0x218>)
 800197c:	2200      	movs	r2, #0
 800197e:	701a      	strb	r2, [r3, #0]
			transmit_humi_HCSR04_data_flag = 0;
 8001980:	4b28      	ldr	r3, [pc, #160]	; (8001a24 <processRecCmd+0x21c>)
 8001982:	2200      	movs	r2, #0
 8001984:	701a      	strb	r2, [r3, #0]

			isDistTrans = 0;
 8001986:	4b28      	ldr	r3, [pc, #160]	; (8001a28 <processRecCmd+0x220>)
 8001988:	2200      	movs	r2, #0
 800198a:	701a      	strb	r2, [r3, #0]
			isHumiTrans = 0;
 800198c:	4b27      	ldr	r3, [pc, #156]	; (8001a2c <processRecCmd+0x224>)
 800198e:	2200      	movs	r2, #0
 8001990:	701a      	strb	r2, [r3, #0]

			/* Dat cac thong so cai dat tu lenh UART */
			temp_transmit_period = MainBuffer[2];
 8001992:	4b14      	ldr	r3, [pc, #80]	; (80019e4 <processRecCmd+0x1dc>)
 8001994:	789a      	ldrb	r2, [r3, #2]
 8001996:	4b29      	ldr	r3, [pc, #164]	; (8001a3c <processRecCmd+0x234>)
 8001998:	701a      	strb	r2, [r3, #0]
			humi_transmit_period = MainBuffer[3];
 800199a:	4b12      	ldr	r3, [pc, #72]	; (80019e4 <processRecCmd+0x1dc>)
 800199c:	78da      	ldrb	r2, [r3, #3]
 800199e:	4b28      	ldr	r3, [pc, #160]	; (8001a40 <processRecCmd+0x238>)
 80019a0:	701a      	strb	r2, [r3, #0]
			HCSR04_transmit_period = MainBuffer[4];
 80019a2:	4b10      	ldr	r3, [pc, #64]	; (80019e4 <processRecCmd+0x1dc>)
 80019a4:	791a      	ldrb	r2, [r3, #4]
 80019a6:	4b27      	ldr	r3, [pc, #156]	; (8001a44 <processRecCmd+0x23c>)
 80019a8:	701a      	strb	r2, [r3, #0]
			temp_threshold = MainBuffer[5];
 80019aa:	4b0e      	ldr	r3, [pc, #56]	; (80019e4 <processRecCmd+0x1dc>)
 80019ac:	795a      	ldrb	r2, [r3, #5]
 80019ae:	4b20      	ldr	r3, [pc, #128]	; (8001a30 <processRecCmd+0x228>)
 80019b0:	701a      	strb	r2, [r3, #0]
			humi_threshold = MainBuffer[6];
 80019b2:	4b0c      	ldr	r3, [pc, #48]	; (80019e4 <processRecCmd+0x1dc>)
 80019b4:	799a      	ldrb	r2, [r3, #6]
 80019b6:	4b1f      	ldr	r3, [pc, #124]	; (8001a34 <processRecCmd+0x22c>)
 80019b8:	701a      	strb	r2, [r3, #0]
			dist_threshold = MainBuffer[7];
 80019ba:	4b0a      	ldr	r3, [pc, #40]	; (80019e4 <processRecCmd+0x1dc>)
 80019bc:	79da      	ldrb	r2, [r3, #7]
 80019be:	4b1e      	ldr	r3, [pc, #120]	; (8001a38 <processRecCmd+0x230>)
 80019c0:	701a      	strb	r2, [r3, #0]
			temp_cnt = 0;
 80019c2:	4b0f      	ldr	r3, [pc, #60]	; (8001a00 <processRecCmd+0x1f8>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	701a      	strb	r2, [r3, #0]
			humi_cnt = 0;
 80019c8:	4b0e      	ldr	r3, [pc, #56]	; (8001a04 <processRecCmd+0x1fc>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	701a      	strb	r2, [r3, #0]
			dist_cnt = 0;
 80019ce:	4b0e      	ldr	r3, [pc, #56]	; (8001a08 <processRecCmd+0x200>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	701a      	strb	r2, [r3, #0]
		  break;
 80019d4:	e002      	b.n	80019dc <processRecCmd+0x1d4>
		return;
 80019d6:	bf00      	nop
 80019d8:	e000      	b.n	80019dc <processRecCmd+0x1d4>

		default:
		  break;
 80019da:	bf00      	nop
	}
}
 80019dc:	3710      	adds	r7, #16
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	20000358 	.word	0x20000358
 80019e8:	20000002 	.word	0x20000002
 80019ec:	20000384 	.word	0x20000384
 80019f0:	20000383 	.word	0x20000383
 80019f4:	20000385 	.word	0x20000385
 80019f8:	40011000 	.word	0x40011000
 80019fc:	20000388 	.word	0x20000388
 8001a00:	20000375 	.word	0x20000375
 8001a04:	20000374 	.word	0x20000374
 8001a08:	20000376 	.word	0x20000376
 8001a0c:	20000379 	.word	0x20000379
 8001a10:	2000037a 	.word	0x2000037a
 8001a14:	2000037b 	.word	0x2000037b
 8001a18:	2000037c 	.word	0x2000037c
 8001a1c:	2000037d 	.word	0x2000037d
 8001a20:	2000037e 	.word	0x2000037e
 8001a24:	2000037f 	.word	0x2000037f
 8001a28:	20000387 	.word	0x20000387
 8001a2c:	20000386 	.word	0x20000386
 8001a30:	20000364 	.word	0x20000364
 8001a34:	20000365 	.word	0x20000365
 8001a38:	20000366 	.word	0x20000366
 8001a3c:	20000362 	.word	0x20000362
 8001a40:	20000363 	.word	0x20000363
 8001a44:	20000361 	.word	0x20000361

08001a48 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	460b      	mov	r3, r1
 8001a52:	807b      	strh	r3, [r7, #2]
	if(huart->Instance == USART1){
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a1b      	ldr	r2, [pc, #108]	; (8001ac8 <HAL_UARTEx_RxEventCallback+0x80>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d12f      	bne.n	8001abe <HAL_UARTEx_RxEventCallback+0x76>
		for(size_t i = 0; i<Size-1; i++) {
 8001a5e:	2300      	movs	r3, #0
 8001a60:	60fb      	str	r3, [r7, #12]
 8001a62:	e019      	b.n	8001a98 <HAL_UARTEx_RxEventCallback+0x50>
			if(RxBuffer[i] == 0x00){
 8001a64:	4a19      	ldr	r2, [pc, #100]	; (8001acc <HAL_UARTEx_RxEventCallback+0x84>)
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	4413      	add	r3, r2
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d110      	bne.n	8001a92 <HAL_UARTEx_RxEventCallback+0x4a>
				memcpy(MainBuffer, &RxBuffer[i], Size-i);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	4a16      	ldr	r2, [pc, #88]	; (8001acc <HAL_UARTEx_RxEventCallback+0x84>)
 8001a74:	1899      	adds	r1, r3, r2
 8001a76:	887a      	ldrh	r2, [r7, #2]
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	4814      	ldr	r0, [pc, #80]	; (8001ad0 <HAL_UARTEx_RxEventCallback+0x88>)
 8001a80:	f004 fa1e 	bl	8005ec0 <memcpy>
				processRecCmd(Size-i);
 8001a84:	887a      	ldrh	r2, [r7, #2]
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7ff febc 	bl	8001808 <processRecCmd>
				break;
 8001a90:	e008      	b.n	8001aa4 <HAL_UARTEx_RxEventCallback+0x5c>
		for(size_t i = 0; i<Size-1; i++) {
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	3301      	adds	r3, #1
 8001a96:	60fb      	str	r3, [r7, #12]
 8001a98:	887b      	ldrh	r3, [r7, #2]
 8001a9a:	3b01      	subs	r3, #1
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d3df      	bcc.n	8001a64 <HAL_UARTEx_RxEventCallback+0x1c>
			}
		}
		HAL_UARTEx_ReceiveToIdle_DMA(&huart1, RxBuffer, MainBuff_SIZE);
 8001aa4:	2209      	movs	r2, #9
 8001aa6:	4909      	ldr	r1, [pc, #36]	; (8001acc <HAL_UARTEx_RxEventCallback+0x84>)
 8001aa8:	480a      	ldr	r0, [pc, #40]	; (8001ad4 <HAL_UARTEx_RxEventCallback+0x8c>)
 8001aaa:	f003 fc79 	bl	80053a0 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8001aae:	4b0a      	ldr	r3, [pc, #40]	; (8001ad8 <HAL_UARTEx_RxEventCallback+0x90>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	4b08      	ldr	r3, [pc, #32]	; (8001ad8 <HAL_UARTEx_RxEventCallback+0x90>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f022 0204 	bic.w	r2, r2, #4
 8001abc:	601a      	str	r2, [r3, #0]
	}
}
 8001abe:	bf00      	nop
 8001ac0:	3710      	adds	r7, #16
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	40013800 	.word	0x40013800
 8001acc:	20000304 	.word	0x20000304
 8001ad0:	20000358 	.word	0x20000358
 8001ad4:	20000140 	.word	0x20000140
 8001ad8:	20000184 	.word	0x20000184

08001adc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  isr_tick_start = HAL_GetTick();
 8001ae4:	f001 fa3e 	bl	8002f64 <HAL_GetTick>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	461a      	mov	r2, r3
 8001aec:	4b80      	ldr	r3, [pc, #512]	; (8001cf0 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8001aee:	601a      	str	r2, [r3, #0]
  if (htim == &htim4)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	4a80      	ldr	r2, [pc, #512]	; (8001cf4 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	f040 81be 	bne.w	8001e76 <HAL_TIM_PeriodElapsedCallback+0x39a>
  {
	  old_task_idx = task_idx;
 8001afa:	4b7f      	ldr	r3, [pc, #508]	; (8001cf8 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a7f      	ldr	r2, [pc, #508]	; (8001cfc <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001b00:	6013      	str	r3, [r2, #0]
	  task_idx++;
 8001b02:	4b7d      	ldr	r3, [pc, #500]	; (8001cf8 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	3301      	adds	r3, #1
 8001b08:	4a7b      	ldr	r2, [pc, #492]	; (8001cf8 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8001b0a:	6013      	str	r3, [r2, #0]
	  __HAL_TIM_SET_AUTORELOAD(&htim4, execute_time[task_idx]);
 8001b0c:	4b7a      	ldr	r3, [pc, #488]	; (8001cf8 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a7b      	ldr	r2, [pc, #492]	; (8001d00 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8001b12:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001b16:	4b77      	ldr	r3, [pc, #476]	; (8001cf4 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b1c:	4b76      	ldr	r3, [pc, #472]	; (8001cf8 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a77      	ldr	r2, [pc, #476]	; (8001d00 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8001b22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b26:	461a      	mov	r2, r3
 8001b28:	4b72      	ldr	r3, [pc, #456]	; (8001cf4 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001b2a:	60da      	str	r2, [r3, #12]
	  //htim4.Init.Period = execute_time[task_idx];
	  __HAL_TIM_SET_COUNTER(&htim4,0);
 8001b2c:	4b71      	ldr	r3, [pc, #452]	; (8001cf4 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2200      	movs	r2, #0
 8001b32:	625a      	str	r2, [r3, #36]	; 0x24
	  if(queue[old_task_idx] == Read_DHT11_Sensor){
 8001b34:	4b71      	ldr	r3, [pc, #452]	; (8001cfc <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a72      	ldr	r2, [pc, #456]	; (8001d04 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8001b3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b3e:	4a72      	ldr	r2, [pc, #456]	; (8001d08 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d103      	bne.n	8001b4c <HAL_TIM_PeriodElapsedCallback+0x70>
		  read_DHT11_flag = true;
 8001b44:	4b71      	ldr	r3, [pc, #452]	; (8001d0c <HAL_TIM_PeriodElapsedCallback+0x230>)
 8001b46:	2201      	movs	r2, #1
 8001b48:	701a      	strb	r2, [r3, #0]
 8001b4a:	e18d      	b.n	8001e68 <HAL_TIM_PeriodElapsedCallback+0x38c>
	  }
	  else if(queue[old_task_idx] == Read_HCSR04_Sensor){
 8001b4c:	4b6b      	ldr	r3, [pc, #428]	; (8001cfc <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a6c      	ldr	r2, [pc, #432]	; (8001d04 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8001b52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b56:	4a6e      	ldr	r2, [pc, #440]	; (8001d10 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d103      	bne.n	8001b64 <HAL_TIM_PeriodElapsedCallback+0x88>
		  read_HCSR04_flag = true;
 8001b5c:	4b6d      	ldr	r3, [pc, #436]	; (8001d14 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001b5e:	2201      	movs	r2, #1
 8001b60:	701a      	strb	r2, [r3, #0]
 8001b62:	e181      	b.n	8001e68 <HAL_TIM_PeriodElapsedCallback+0x38c>
	  }
	  else if(queue[old_task_idx] == LCD_Display){
 8001b64:	4b65      	ldr	r3, [pc, #404]	; (8001cfc <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a66      	ldr	r2, [pc, #408]	; (8001d04 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8001b6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b6e:	4a6a      	ldr	r2, [pc, #424]	; (8001d18 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d103      	bne.n	8001b7c <HAL_TIM_PeriodElapsedCallback+0xa0>
		  lcd_display_flag = true;
 8001b74:	4b69      	ldr	r3, [pc, #420]	; (8001d1c <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001b76:	2201      	movs	r2, #1
 8001b78:	701a      	strb	r2, [r3, #0]
 8001b7a:	e175      	b.n	8001e68 <HAL_TIM_PeriodElapsedCallback+0x38c>
	  }
	  else if(queue[old_task_idx] == DHT11_UART_Transmit){
 8001b7c:	4b5f      	ldr	r3, [pc, #380]	; (8001cfc <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a60      	ldr	r2, [pc, #384]	; (8001d04 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8001b82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b86:	4a66      	ldr	r2, [pc, #408]	; (8001d20 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	f040 816d 	bne.w	8001e68 <HAL_TIM_PeriodElapsedCallback+0x38c>
		  humi_cnt++;
 8001b8e:	4b65      	ldr	r3, [pc, #404]	; (8001d24 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	3301      	adds	r3, #1
 8001b94:	b2da      	uxtb	r2, r3
 8001b96:	4b63      	ldr	r3, [pc, #396]	; (8001d24 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001b98:	701a      	strb	r2, [r3, #0]
		  temp_cnt++;
 8001b9a:	4b63      	ldr	r3, [pc, #396]	; (8001d28 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	b2da      	uxtb	r2, r3
 8001ba2:	4b61      	ldr	r3, [pc, #388]	; (8001d28 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001ba4:	701a      	strb	r2, [r3, #0]
		  dist_cnt++;
 8001ba6:	4b61      	ldr	r3, [pc, #388]	; (8001d2c <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	3301      	adds	r3, #1
 8001bac:	b2da      	uxtb	r2, r3
 8001bae:	4b5f      	ldr	r3, [pc, #380]	; (8001d2c <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001bb0:	701a      	strb	r2, [r3, #0]

		  if(uart_enable_cmd_1_tmp){
 8001bb2:	4b5f      	ldr	r3, [pc, #380]	; (8001d30 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d003      	beq.n	8001bc2 <HAL_TIM_PeriodElapsedCallback+0xe6>
			  uart_enable_cmd_1 = true;
 8001bba:	4b5e      	ldr	r3, [pc, #376]	; (8001d34 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	701a      	strb	r2, [r3, #0]
 8001bc0:	e002      	b.n	8001bc8 <HAL_TIM_PeriodElapsedCallback+0xec>
		  }
		  else{
			  uart_enable_cmd_1 = false;
 8001bc2:	4b5c      	ldr	r3, [pc, #368]	; (8001d34 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	701a      	strb	r2, [r3, #0]
		  }

		  if(uart_enable_cmd_2_tmp){
 8001bc8:	4b5b      	ldr	r3, [pc, #364]	; (8001d38 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d003      	beq.n	8001bd8 <HAL_TIM_PeriodElapsedCallback+0xfc>
			  uart_enable_cmd_2 = true;
 8001bd0:	4b5a      	ldr	r3, [pc, #360]	; (8001d3c <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	701a      	strb	r2, [r3, #0]
 8001bd6:	e002      	b.n	8001bde <HAL_TIM_PeriodElapsedCallback+0x102>
		  }
		  else{
			  uart_enable_cmd_2 = false;
 8001bd8:	4b58      	ldr	r3, [pc, #352]	; (8001d3c <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	701a      	strb	r2, [r3, #0]
		  }

		  if(((temp_cnt - 1) % temp_transmit_period) == 0 && ((humi_cnt - 1) % humi_transmit_period) == 0 && ((dist_cnt - 1) % HCSR04_transmit_period) == 0 && temp_transmit_period != 0 && humi_transmit_period !=0 && HCSR04_transmit_period != 0){
 8001bde:	4b52      	ldr	r3, [pc, #328]	; (8001d28 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	3b01      	subs	r3, #1
 8001be4:	4a56      	ldr	r2, [pc, #344]	; (8001d40 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001be6:	7812      	ldrb	r2, [r2, #0]
 8001be8:	fb93 f1f2 	sdiv	r1, r3, r2
 8001bec:	fb01 f202 	mul.w	r2, r1, r2
 8001bf0:	1a9b      	subs	r3, r3, r2
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d12d      	bne.n	8001c52 <HAL_TIM_PeriodElapsedCallback+0x176>
 8001bf6:	4b4b      	ldr	r3, [pc, #300]	; (8001d24 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	3b01      	subs	r3, #1
 8001bfc:	4a51      	ldr	r2, [pc, #324]	; (8001d44 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001bfe:	7812      	ldrb	r2, [r2, #0]
 8001c00:	fb93 f1f2 	sdiv	r1, r3, r2
 8001c04:	fb01 f202 	mul.w	r2, r1, r2
 8001c08:	1a9b      	subs	r3, r3, r2
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d121      	bne.n	8001c52 <HAL_TIM_PeriodElapsedCallback+0x176>
 8001c0e:	4b47      	ldr	r3, [pc, #284]	; (8001d2c <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	3b01      	subs	r3, #1
 8001c14:	4a4c      	ldr	r2, [pc, #304]	; (8001d48 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001c16:	7812      	ldrb	r2, [r2, #0]
 8001c18:	fb93 f1f2 	sdiv	r1, r3, r2
 8001c1c:	fb01 f202 	mul.w	r2, r1, r2
 8001c20:	1a9b      	subs	r3, r3, r2
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d115      	bne.n	8001c52 <HAL_TIM_PeriodElapsedCallback+0x176>
 8001c26:	4b46      	ldr	r3, [pc, #280]	; (8001d40 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d011      	beq.n	8001c52 <HAL_TIM_PeriodElapsedCallback+0x176>
 8001c2e:	4b45      	ldr	r3, [pc, #276]	; (8001d44 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d00d      	beq.n	8001c52 <HAL_TIM_PeriodElapsedCallback+0x176>
 8001c36:	4b44      	ldr	r3, [pc, #272]	; (8001d48 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d009      	beq.n	8001c52 <HAL_TIM_PeriodElapsedCallback+0x176>
			  transmit_DHT11_HCSR04_data_flag = true;
 8001c3e:	4b43      	ldr	r3, [pc, #268]	; (8001d4c <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001c40:	2201      	movs	r2, #1
 8001c42:	701a      	strb	r2, [r3, #0]
			  isHumiTrans = true;
 8001c44:	4b42      	ldr	r3, [pc, #264]	; (8001d50 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001c46:	2201      	movs	r2, #1
 8001c48:	701a      	strb	r2, [r3, #0]
			  isDistTrans = true;
 8001c4a:	4b42      	ldr	r3, [pc, #264]	; (8001d54 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	701a      	strb	r2, [r3, #0]
 8001c50:	e09f      	b.n	8001d92 <HAL_TIM_PeriodElapsedCallback+0x2b6>
		  }
		  else if(((temp_cnt - 1) % temp_transmit_period) == 0 && ((humi_cnt - 1) % humi_transmit_period) == 0 && temp_transmit_period != 0 && humi_transmit_period != 0){
 8001c52:	4b35      	ldr	r3, [pc, #212]	; (8001d28 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	3b01      	subs	r3, #1
 8001c58:	4a39      	ldr	r2, [pc, #228]	; (8001d40 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001c5a:	7812      	ldrb	r2, [r2, #0]
 8001c5c:	fb93 f1f2 	sdiv	r1, r3, r2
 8001c60:	fb01 f202 	mul.w	r2, r1, r2
 8001c64:	1a9b      	subs	r3, r3, r2
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d11a      	bne.n	8001ca0 <HAL_TIM_PeriodElapsedCallback+0x1c4>
 8001c6a:	4b2e      	ldr	r3, [pc, #184]	; (8001d24 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	4a34      	ldr	r2, [pc, #208]	; (8001d44 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001c72:	7812      	ldrb	r2, [r2, #0]
 8001c74:	fb93 f1f2 	sdiv	r1, r3, r2
 8001c78:	fb01 f202 	mul.w	r2, r1, r2
 8001c7c:	1a9b      	subs	r3, r3, r2
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d10e      	bne.n	8001ca0 <HAL_TIM_PeriodElapsedCallback+0x1c4>
 8001c82:	4b2f      	ldr	r3, [pc, #188]	; (8001d40 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d00a      	beq.n	8001ca0 <HAL_TIM_PeriodElapsedCallback+0x1c4>
 8001c8a:	4b2e      	ldr	r3, [pc, #184]	; (8001d44 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d006      	beq.n	8001ca0 <HAL_TIM_PeriodElapsedCallback+0x1c4>
			  transmit_DHT11_data_flag = true;
 8001c92:	4b31      	ldr	r3, [pc, #196]	; (8001d58 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001c94:	2201      	movs	r2, #1
 8001c96:	701a      	strb	r2, [r3, #0]
			  isHumiTrans = true;
 8001c98:	4b2d      	ldr	r3, [pc, #180]	; (8001d50 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	701a      	strb	r2, [r3, #0]
 8001c9e:	e078      	b.n	8001d92 <HAL_TIM_PeriodElapsedCallback+0x2b6>
		  }
		  else if(((temp_cnt - 1) % temp_transmit_period) == 0 && ((dist_cnt - 1) % HCSR04_transmit_period) == 0 && temp_transmit_period !=0 && HCSR04_transmit_period != 0){
 8001ca0:	4b21      	ldr	r3, [pc, #132]	; (8001d28 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	3b01      	subs	r3, #1
 8001ca6:	4a26      	ldr	r2, [pc, #152]	; (8001d40 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001ca8:	7812      	ldrb	r2, [r2, #0]
 8001caa:	fb93 f1f2 	sdiv	r1, r3, r2
 8001cae:	fb01 f202 	mul.w	r2, r1, r2
 8001cb2:	1a9b      	subs	r3, r3, r2
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d153      	bne.n	8001d60 <HAL_TIM_PeriodElapsedCallback+0x284>
 8001cb8:	4b1c      	ldr	r3, [pc, #112]	; (8001d2c <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	3b01      	subs	r3, #1
 8001cbe:	4a22      	ldr	r2, [pc, #136]	; (8001d48 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001cc0:	7812      	ldrb	r2, [r2, #0]
 8001cc2:	fb93 f1f2 	sdiv	r1, r3, r2
 8001cc6:	fb01 f202 	mul.w	r2, r1, r2
 8001cca:	1a9b      	subs	r3, r3, r2
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d147      	bne.n	8001d60 <HAL_TIM_PeriodElapsedCallback+0x284>
 8001cd0:	4b1b      	ldr	r3, [pc, #108]	; (8001d40 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d043      	beq.n	8001d60 <HAL_TIM_PeriodElapsedCallback+0x284>
 8001cd8:	4b1b      	ldr	r3, [pc, #108]	; (8001d48 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d03f      	beq.n	8001d60 <HAL_TIM_PeriodElapsedCallback+0x284>
			  transmit_temp_HCSR04_data_flag = true;
 8001ce0:	4b1e      	ldr	r3, [pc, #120]	; (8001d5c <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	701a      	strb	r2, [r3, #0]
			  isDistTrans = true;
 8001ce6:	4b1b      	ldr	r3, [pc, #108]	; (8001d54 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001ce8:	2201      	movs	r2, #1
 8001cea:	701a      	strb	r2, [r3, #0]
 8001cec:	e051      	b.n	8001d92 <HAL_TIM_PeriodElapsedCallback+0x2b6>
 8001cee:	bf00      	nop
 8001cf0:	2000038c 	.word	0x2000038c
 8001cf4:	200000f8 	.word	0x200000f8
 8001cf8:	200003c4 	.word	0x200003c4
 8001cfc:	200003c8 	.word	0x200003c8
 8001d00:	200003cc 	.word	0x200003cc
 8001d04:	2000020c 	.word	0x2000020c
 8001d08:	08002095 	.word	0x08002095
 8001d0c:	20000377 	.word	0x20000377
 8001d10:	08001389 	.word	0x08001389
 8001d14:	20000378 	.word	0x20000378
 8001d18:	080013c9 	.word	0x080013c9
 8001d1c:	20000380 	.word	0x20000380
 8001d20:	08001439 	.word	0x08001439
 8001d24:	20000374 	.word	0x20000374
 8001d28:	20000375 	.word	0x20000375
 8001d2c:	20000376 	.word	0x20000376
 8001d30:	20000383 	.word	0x20000383
 8001d34:	20000381 	.word	0x20000381
 8001d38:	20000384 	.word	0x20000384
 8001d3c:	20000382 	.word	0x20000382
 8001d40:	20000362 	.word	0x20000362
 8001d44:	20000363 	.word	0x20000363
 8001d48:	20000361 	.word	0x20000361
 8001d4c:	2000037d 	.word	0x2000037d
 8001d50:	20000386 	.word	0x20000386
 8001d54:	20000387 	.word	0x20000387
 8001d58:	20000379 	.word	0x20000379
 8001d5c:	2000037e 	.word	0x2000037e
		  }
		  else if(((temp_cnt - 1) % temp_transmit_period) == 0  && temp_transmit_period != 0){
 8001d60:	4b4d      	ldr	r3, [pc, #308]	; (8001e98 <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	3b01      	subs	r3, #1
 8001d66:	4a4d      	ldr	r2, [pc, #308]	; (8001e9c <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 8001d68:	7812      	ldrb	r2, [r2, #0]
 8001d6a:	fb93 f1f2 	sdiv	r1, r3, r2
 8001d6e:	fb01 f202 	mul.w	r2, r1, r2
 8001d72:	1a9b      	subs	r3, r3, r2
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d10c      	bne.n	8001d92 <HAL_TIM_PeriodElapsedCallback+0x2b6>
 8001d78:	4b48      	ldr	r3, [pc, #288]	; (8001e9c <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d008      	beq.n	8001d92 <HAL_TIM_PeriodElapsedCallback+0x2b6>
			  transmit_temp_data_flag = true;
 8001d80:	4b47      	ldr	r3, [pc, #284]	; (8001ea0 <HAL_TIM_PeriodElapsedCallback+0x3c4>)
 8001d82:	2201      	movs	r2, #1
 8001d84:	701a      	strb	r2, [r3, #0]
			  isDistTrans = false;
 8001d86:	4b47      	ldr	r3, [pc, #284]	; (8001ea4 <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	701a      	strb	r2, [r3, #0]
			  isHumiTrans = false;
 8001d8c:	4b46      	ldr	r3, [pc, #280]	; (8001ea8 <HAL_TIM_PeriodElapsedCallback+0x3cc>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	701a      	strb	r2, [r3, #0]

		  }

		  if(((humi_cnt - 1) % humi_transmit_period) == 0 && ((dist_cnt - 1) % HCSR04_transmit_period) == 0  && HCSR04_transmit_period != 0 && humi_transmit_period !=0){
 8001d92:	4b46      	ldr	r3, [pc, #280]	; (8001eac <HAL_TIM_PeriodElapsedCallback+0x3d0>)
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	3b01      	subs	r3, #1
 8001d98:	4a45      	ldr	r2, [pc, #276]	; (8001eb0 <HAL_TIM_PeriodElapsedCallback+0x3d4>)
 8001d9a:	7812      	ldrb	r2, [r2, #0]
 8001d9c:	fb93 f1f2 	sdiv	r1, r3, r2
 8001da0:	fb01 f202 	mul.w	r2, r1, r2
 8001da4:	1a9b      	subs	r3, r3, r2
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d128      	bne.n	8001dfc <HAL_TIM_PeriodElapsedCallback+0x320>
 8001daa:	4b42      	ldr	r3, [pc, #264]	; (8001eb4 <HAL_TIM_PeriodElapsedCallback+0x3d8>)
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	3b01      	subs	r3, #1
 8001db0:	4a41      	ldr	r2, [pc, #260]	; (8001eb8 <HAL_TIM_PeriodElapsedCallback+0x3dc>)
 8001db2:	7812      	ldrb	r2, [r2, #0]
 8001db4:	fb93 f1f2 	sdiv	r1, r3, r2
 8001db8:	fb01 f202 	mul.w	r2, r1, r2
 8001dbc:	1a9b      	subs	r3, r3, r2
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d11c      	bne.n	8001dfc <HAL_TIM_PeriodElapsedCallback+0x320>
 8001dc2:	4b3d      	ldr	r3, [pc, #244]	; (8001eb8 <HAL_TIM_PeriodElapsedCallback+0x3dc>)
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d018      	beq.n	8001dfc <HAL_TIM_PeriodElapsedCallback+0x320>
 8001dca:	4b39      	ldr	r3, [pc, #228]	; (8001eb0 <HAL_TIM_PeriodElapsedCallback+0x3d4>)
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d014      	beq.n	8001dfc <HAL_TIM_PeriodElapsedCallback+0x320>
			  if(isHumiTrans == false && isDistTrans == false){
 8001dd2:	4b35      	ldr	r3, [pc, #212]	; (8001ea8 <HAL_TIM_PeriodElapsedCallback+0x3cc>)
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	f083 0301 	eor.w	r3, r3, #1
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d028      	beq.n	8001e32 <HAL_TIM_PeriodElapsedCallback+0x356>
 8001de0:	4b30      	ldr	r3, [pc, #192]	; (8001ea4 <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	f083 0301 	eor.w	r3, r3, #1
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d021      	beq.n	8001e32 <HAL_TIM_PeriodElapsedCallback+0x356>
				  transmit_humi_HCSR04_data_flag = true;
 8001dee:	4b33      	ldr	r3, [pc, #204]	; (8001ebc <HAL_TIM_PeriodElapsedCallback+0x3e0>)
 8001df0:	2201      	movs	r2, #1
 8001df2:	701a      	strb	r2, [r3, #0]
				  isDistTrans = true;
 8001df4:	4b2b      	ldr	r3, [pc, #172]	; (8001ea4 <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 8001df6:	2201      	movs	r2, #1
 8001df8:	701a      	strb	r2, [r3, #0]
			  if(isHumiTrans == false && isDistTrans == false){
 8001dfa:	e01a      	b.n	8001e32 <HAL_TIM_PeriodElapsedCallback+0x356>
			  }
		  }
		  else if(((humi_cnt - 1) % humi_transmit_period) == 0  && humi_transmit_period !=0){
 8001dfc:	4b2b      	ldr	r3, [pc, #172]	; (8001eac <HAL_TIM_PeriodElapsedCallback+0x3d0>)
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	3b01      	subs	r3, #1
 8001e02:	4a2b      	ldr	r2, [pc, #172]	; (8001eb0 <HAL_TIM_PeriodElapsedCallback+0x3d4>)
 8001e04:	7812      	ldrb	r2, [r2, #0]
 8001e06:	fb93 f1f2 	sdiv	r1, r3, r2
 8001e0a:	fb01 f202 	mul.w	r2, r1, r2
 8001e0e:	1a9b      	subs	r3, r3, r2
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d10f      	bne.n	8001e34 <HAL_TIM_PeriodElapsedCallback+0x358>
 8001e14:	4b26      	ldr	r3, [pc, #152]	; (8001eb0 <HAL_TIM_PeriodElapsedCallback+0x3d4>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d00b      	beq.n	8001e34 <HAL_TIM_PeriodElapsedCallback+0x358>
			  if(isHumiTrans == false) transmit_humi_data_flag = true;
 8001e1c:	4b22      	ldr	r3, [pc, #136]	; (8001ea8 <HAL_TIM_PeriodElapsedCallback+0x3cc>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	f083 0301 	eor.w	r3, r3, #1
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d004      	beq.n	8001e34 <HAL_TIM_PeriodElapsedCallback+0x358>
 8001e2a:	4b25      	ldr	r3, [pc, #148]	; (8001ec0 <HAL_TIM_PeriodElapsedCallback+0x3e4>)
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	701a      	strb	r2, [r3, #0]
 8001e30:	e000      	b.n	8001e34 <HAL_TIM_PeriodElapsedCallback+0x358>
			  if(isHumiTrans == false && isDistTrans == false){
 8001e32:	bf00      	nop
		  }

		  if(((dist_cnt - 1) % HCSR04_transmit_period) == 0  && HCSR04_transmit_period != 0){
 8001e34:	4b1f      	ldr	r3, [pc, #124]	; (8001eb4 <HAL_TIM_PeriodElapsedCallback+0x3d8>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	3b01      	subs	r3, #1
 8001e3a:	4a1f      	ldr	r2, [pc, #124]	; (8001eb8 <HAL_TIM_PeriodElapsedCallback+0x3dc>)
 8001e3c:	7812      	ldrb	r2, [r2, #0]
 8001e3e:	fb93 f1f2 	sdiv	r1, r3, r2
 8001e42:	fb01 f202 	mul.w	r2, r1, r2
 8001e46:	1a9b      	subs	r3, r3, r2
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d10d      	bne.n	8001e68 <HAL_TIM_PeriodElapsedCallback+0x38c>
 8001e4c:	4b1a      	ldr	r3, [pc, #104]	; (8001eb8 <HAL_TIM_PeriodElapsedCallback+0x3dc>)
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d009      	beq.n	8001e68 <HAL_TIM_PeriodElapsedCallback+0x38c>
			  if(isDistTrans == false) transmit_dist_data_flag = true;
 8001e54:	4b13      	ldr	r3, [pc, #76]	; (8001ea4 <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	f083 0301 	eor.w	r3, r3, #1
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d002      	beq.n	8001e68 <HAL_TIM_PeriodElapsedCallback+0x38c>
 8001e62:	4b18      	ldr	r3, [pc, #96]	; (8001ec4 <HAL_TIM_PeriodElapsedCallback+0x3e8>)
 8001e64:	2201      	movs	r2, #1
 8001e66:	701a      	strb	r2, [r3, #0]
		  }
	  }
	  if(task_idx == 45){
 8001e68:	4b17      	ldr	r3, [pc, #92]	; (8001ec8 <HAL_TIM_PeriodElapsedCallback+0x3ec>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	2b2d      	cmp	r3, #45	; 0x2d
 8001e6e:	d102      	bne.n	8001e76 <HAL_TIM_PeriodElapsedCallback+0x39a>
	  	  task_idx = 0;
 8001e70:	4b15      	ldr	r3, [pc, #84]	; (8001ec8 <HAL_TIM_PeriodElapsedCallback+0x3ec>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	601a      	str	r2, [r3, #0]
	  }
  }
  isr_tick_stop = HAL_GetTick();
 8001e76:	f001 f875 	bl	8002f64 <HAL_GetTick>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	4b13      	ldr	r3, [pc, #76]	; (8001ecc <HAL_TIM_PeriodElapsedCallback+0x3f0>)
 8001e80:	601a      	str	r2, [r3, #0]
  isr_execute_tick = isr_tick_stop - isr_tick_start;
 8001e82:	4b12      	ldr	r3, [pc, #72]	; (8001ecc <HAL_TIM_PeriodElapsedCallback+0x3f0>)
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	4b12      	ldr	r3, [pc, #72]	; (8001ed0 <HAL_TIM_PeriodElapsedCallback+0x3f4>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	4a11      	ldr	r2, [pc, #68]	; (8001ed4 <HAL_TIM_PeriodElapsedCallback+0x3f8>)
 8001e8e:	6013      	str	r3, [r2, #0]

}
 8001e90:	bf00      	nop
 8001e92:	3708      	adds	r7, #8
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	20000375 	.word	0x20000375
 8001e9c:	20000362 	.word	0x20000362
 8001ea0:	2000037a 	.word	0x2000037a
 8001ea4:	20000387 	.word	0x20000387
 8001ea8:	20000386 	.word	0x20000386
 8001eac:	20000374 	.word	0x20000374
 8001eb0:	20000363 	.word	0x20000363
 8001eb4:	20000376 	.word	0x20000376
 8001eb8:	20000361 	.word	0x20000361
 8001ebc:	2000037f 	.word	0x2000037f
 8001ec0:	2000037b 	.word	0x2000037b
 8001ec4:	2000037c 	.word	0x2000037c
 8001ec8:	200003c4 	.word	0x200003c4
 8001ecc:	20000390 	.word	0x20000390
 8001ed0:	2000038c 	.word	0x2000038c
 8001ed4:	20000394 	.word	0x20000394

08001ed8 <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b086      	sub	sp, #24
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee4:	f107 0308 	add.w	r3, r7, #8
 8001ee8:	2200      	movs	r2, #0
 8001eea:	601a      	str	r2, [r3, #0]
 8001eec:	605a      	str	r2, [r3, #4]
 8001eee:	609a      	str	r2, [r3, #8]
 8001ef0:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001ef2:	887b      	ldrh	r3, [r7, #2]
 8001ef4:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001efa:	2302      	movs	r3, #2
 8001efc:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001efe:	f107 0308 	add.w	r3, r7, #8
 8001f02:	4619      	mov	r1, r3
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f001 fc07 	bl	8003718 <HAL_GPIO_Init>
}
 8001f0a:	bf00      	nop
 8001f0c:	3718      	adds	r7, #24
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b086      	sub	sp, #24
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
 8001f1a:	460b      	mov	r3, r1
 8001f1c:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f1e:	f107 0308 	add.w	r3, r7, #8
 8001f22:	2200      	movs	r2, #0
 8001f24:	601a      	str	r2, [r3, #0]
 8001f26:	605a      	str	r2, [r3, #4]
 8001f28:	609a      	str	r2, [r3, #8]
 8001f2a:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001f2c:	887b      	ldrh	r3, [r7, #2]
 8001f2e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f30:	2300      	movs	r3, #0
 8001f32:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f34:	2301      	movs	r3, #1
 8001f36:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001f38:	f107 0308 	add.w	r3, r7, #8
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f001 fbea 	bl	8003718 <HAL_GPIO_Init>
}
 8001f44:	bf00      	nop
 8001f46:	3718      	adds	r7, #24
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <DHT11_Start>:

void DHT11_Start (void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
	Set_Pin_Output (DHT11_GPIO_Port, DHT11_Pin);  // set the pin as output
 8001f50:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f54:	480e      	ldr	r0, [pc, #56]	; (8001f90 <DHT11_Start+0x44>)
 8001f56:	f7ff ffbf 	bl	8001ed8 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT11_GPIO_Port, DHT11_Pin, 0);   // pull the pin low
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f60:	480b      	ldr	r0, [pc, #44]	; (8001f90 <DHT11_Start+0x44>)
 8001f62:	f001 fd74 	bl	8003a4e <HAL_GPIO_WritePin>
	delay_us(25000);   // wait for 25ms
 8001f66:	f246 10a8 	movw	r0, #25000	; 0x61a8
 8001f6a:	f7ff f955 	bl	8001218 <delay_us>
    HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, 1);   // pull the pin high
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f74:	4806      	ldr	r0, [pc, #24]	; (8001f90 <DHT11_Start+0x44>)
 8001f76:	f001 fd6a 	bl	8003a4e <HAL_GPIO_WritePin>
	delay_us(25);   // wait for 25us
 8001f7a:	2019      	movs	r0, #25
 8001f7c:	f7ff f94c 	bl	8001218 <delay_us>
	Set_Pin_Input(DHT11_GPIO_Port, DHT11_Pin);    // set as input
 8001f80:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f84:	4802      	ldr	r0, [pc, #8]	; (8001f90 <DHT11_Start+0x44>)
 8001f86:	f7ff ffc4 	bl	8001f12 <Set_Pin_Input>
}
 8001f8a:	bf00      	nop
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	40010c00 	.word	0x40010c00

08001f94 <DHT11_Check_Response>:

uint8_t DHT11_Check_Response(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	71fb      	strb	r3, [r7, #7]
	delay_us(40);
 8001f9e:	2028      	movs	r0, #40	; 0x28
 8001fa0:	f7ff f93a 	bl	8001218 <delay_us>
	if (!(HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin)))
 8001fa4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001fa8:	4813      	ldr	r0, [pc, #76]	; (8001ff8 <DHT11_Check_Response+0x64>)
 8001faa:	f001 fd39 	bl	8003a20 <HAL_GPIO_ReadPin>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d110      	bne.n	8001fd6 <DHT11_Check_Response+0x42>
	{
		delay_us(80);
 8001fb4:	2050      	movs	r0, #80	; 0x50
 8001fb6:	f7ff f92f 	bl	8001218 <delay_us>
		if ((HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin))) Response = 1;
 8001fba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001fbe:	480e      	ldr	r0, [pc, #56]	; (8001ff8 <DHT11_Check_Response+0x64>)
 8001fc0:	f001 fd2e 	bl	8003a20 <HAL_GPIO_ReadPin>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d002      	beq.n	8001fd0 <DHT11_Check_Response+0x3c>
 8001fca:	2301      	movs	r3, #1
 8001fcc:	71fb      	strb	r3, [r7, #7]
 8001fce:	e004      	b.n	8001fda <DHT11_Check_Response+0x46>
		else Response = -1; // 255
 8001fd0:	23ff      	movs	r3, #255	; 0xff
 8001fd2:	71fb      	strb	r3, [r7, #7]
 8001fd4:	e001      	b.n	8001fda <DHT11_Check_Response+0x46>
	}
	else{
		return Response;
 8001fd6:	79fb      	ldrb	r3, [r7, #7]
 8001fd8:	e009      	b.n	8001fee <DHT11_Check_Response+0x5a>
	}
	while ((HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin)));   // wait for the pin to go low
 8001fda:	bf00      	nop
 8001fdc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001fe0:	4805      	ldr	r0, [pc, #20]	; (8001ff8 <DHT11_Check_Response+0x64>)
 8001fe2:	f001 fd1d 	bl	8003a20 <HAL_GPIO_ReadPin>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d1f7      	bne.n	8001fdc <DHT11_Check_Response+0x48>

	return Response;
 8001fec:	79fb      	ldrb	r3, [r7, #7]
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	40010c00 	.word	0x40010c00

08001ffc <DHT11_Read>:

uint8_t DHT11_Read(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 8002002:	2300      	movs	r3, #0
 8002004:	71bb      	strb	r3, [r7, #6]
 8002006:	e03a      	b.n	800207e <DHT11_Read+0x82>
	{
		while (!(HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin)));   // wait for the pin to go high
 8002008:	bf00      	nop
 800200a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800200e:	4820      	ldr	r0, [pc, #128]	; (8002090 <DHT11_Read+0x94>)
 8002010:	f001 fd06 	bl	8003a20 <HAL_GPIO_ReadPin>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d0f7      	beq.n	800200a <DHT11_Read+0xe>
		delay_us(40);   // wait for 40 us
 800201a:	2028      	movs	r0, #40	; 0x28
 800201c:	f7ff f8fc 	bl	8001218 <delay_us>
		if (!(HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin)))   // if the pin is low
 8002020:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002024:	481a      	ldr	r0, [pc, #104]	; (8002090 <DHT11_Read+0x94>)
 8002026:	f001 fcfb 	bl	8003a20 <HAL_GPIO_ReadPin>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d10e      	bne.n	800204e <DHT11_Read+0x52>
		{
			i&= ~(1<<(7-j));   // write 0
 8002030:	79bb      	ldrb	r3, [r7, #6]
 8002032:	f1c3 0307 	rsb	r3, r3, #7
 8002036:	2201      	movs	r2, #1
 8002038:	fa02 f303 	lsl.w	r3, r2, r3
 800203c:	b25b      	sxtb	r3, r3
 800203e:	43db      	mvns	r3, r3
 8002040:	b25a      	sxtb	r2, r3
 8002042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002046:	4013      	ands	r3, r2
 8002048:	b25b      	sxtb	r3, r3
 800204a:	71fb      	strb	r3, [r7, #7]
 800204c:	e00b      	b.n	8002066 <DHT11_Read+0x6a>
		}
		else{
			i|= (1<<(7-j));  // if the pin is high, write 1
 800204e:	79bb      	ldrb	r3, [r7, #6]
 8002050:	f1c3 0307 	rsb	r3, r3, #7
 8002054:	2201      	movs	r2, #1
 8002056:	fa02 f303 	lsl.w	r3, r2, r3
 800205a:	b25a      	sxtb	r2, r3
 800205c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002060:	4313      	orrs	r3, r2
 8002062:	b25b      	sxtb	r3, r3
 8002064:	71fb      	strb	r3, [r7, #7]
		}
		while ((HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin)));  // wait for the pin to go low
 8002066:	bf00      	nop
 8002068:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800206c:	4808      	ldr	r0, [pc, #32]	; (8002090 <DHT11_Read+0x94>)
 800206e:	f001 fcd7 	bl	8003a20 <HAL_GPIO_ReadPin>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d1f7      	bne.n	8002068 <DHT11_Read+0x6c>
	for (j=0;j<8;j++)
 8002078:	79bb      	ldrb	r3, [r7, #6]
 800207a:	3301      	adds	r3, #1
 800207c:	71bb      	strb	r3, [r7, #6]
 800207e:	79bb      	ldrb	r3, [r7, #6]
 8002080:	2b07      	cmp	r3, #7
 8002082:	d9c1      	bls.n	8002008 <DHT11_Read+0xc>
	}
	return i;
 8002084:	79fb      	ldrb	r3, [r7, #7]
}
 8002086:	4618      	mov	r0, r3
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	40010c00 	.word	0x40010c00

08002094 <Read_DHT11_Sensor>:

void Read_DHT11_Sensor(void){
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
	//start_tick = HAL_GetTick();
	DHT11_Start();
 8002098:	f7ff ff58 	bl	8001f4c <DHT11_Start>
    Presence = DHT11_Check_Response();
 800209c:	f7ff ff7a 	bl	8001f94 <DHT11_Check_Response>
 80020a0:	4603      	mov	r3, r0
 80020a2:	461a      	mov	r2, r3
 80020a4:	4b1f      	ldr	r3, [pc, #124]	; (8002124 <Read_DHT11_Sensor+0x90>)
 80020a6:	701a      	strb	r2, [r3, #0]
    if(Presence){
 80020a8:	4b1e      	ldr	r3, [pc, #120]	; (8002124 <Read_DHT11_Sensor+0x90>)
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d037      	beq.n	8002120 <Read_DHT11_Sensor+0x8c>
    	Rh_byte1 = DHT11_Read();
 80020b0:	f7ff ffa4 	bl	8001ffc <DHT11_Read>
 80020b4:	4603      	mov	r3, r0
 80020b6:	461a      	mov	r2, r3
 80020b8:	4b1b      	ldr	r3, [pc, #108]	; (8002128 <Read_DHT11_Sensor+0x94>)
 80020ba:	701a      	strb	r2, [r3, #0]
    	Rh_byte2 = DHT11_Read();
 80020bc:	f7ff ff9e 	bl	8001ffc <DHT11_Read>
 80020c0:	4603      	mov	r3, r0
 80020c2:	461a      	mov	r2, r3
 80020c4:	4b19      	ldr	r3, [pc, #100]	; (800212c <Read_DHT11_Sensor+0x98>)
 80020c6:	701a      	strb	r2, [r3, #0]
    	Temp_byte1 = DHT11_Read();
 80020c8:	f7ff ff98 	bl	8001ffc <DHT11_Read>
 80020cc:	4603      	mov	r3, r0
 80020ce:	461a      	mov	r2, r3
 80020d0:	4b17      	ldr	r3, [pc, #92]	; (8002130 <Read_DHT11_Sensor+0x9c>)
 80020d2:	701a      	strb	r2, [r3, #0]
    	Temp_byte2 = DHT11_Read();
 80020d4:	f7ff ff92 	bl	8001ffc <DHT11_Read>
 80020d8:	4603      	mov	r3, r0
 80020da:	461a      	mov	r2, r3
 80020dc:	4b15      	ldr	r3, [pc, #84]	; (8002134 <Read_DHT11_Sensor+0xa0>)
 80020de:	701a      	strb	r2, [r3, #0]
    	SUM = DHT11_Read();
 80020e0:	f7ff ff8c 	bl	8001ffc <DHT11_Read>
 80020e4:	4603      	mov	r3, r0
 80020e6:	b29a      	uxth	r2, r3
 80020e8:	4b13      	ldr	r3, [pc, #76]	; (8002138 <Read_DHT11_Sensor+0xa4>)
 80020ea:	801a      	strh	r2, [r3, #0]
    	TEMP = Temp_byte1;
 80020ec:	4b10      	ldr	r3, [pc, #64]	; (8002130 <Read_DHT11_Sensor+0x9c>)
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	b29a      	uxth	r2, r3
 80020f2:	4b12      	ldr	r3, [pc, #72]	; (800213c <Read_DHT11_Sensor+0xa8>)
 80020f4:	801a      	strh	r2, [r3, #0]
    	RH = Rh_byte1;
 80020f6:	4b0c      	ldr	r3, [pc, #48]	; (8002128 <Read_DHT11_Sensor+0x94>)
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	b29a      	uxth	r2, r3
 80020fc:	4b10      	ldr	r3, [pc, #64]	; (8002140 <Read_DHT11_Sensor+0xac>)
 80020fe:	801a      	strh	r2, [r3, #0]
    	temp = (float)TEMP;
 8002100:	4b0e      	ldr	r3, [pc, #56]	; (800213c <Read_DHT11_Sensor+0xa8>)
 8002102:	881b      	ldrh	r3, [r3, #0]
 8002104:	4618      	mov	r0, r3
 8002106:	f7fe fccf 	bl	8000aa8 <__aeabi_ui2f>
 800210a:	4603      	mov	r3, r0
 800210c:	4a0d      	ldr	r2, [pc, #52]	; (8002144 <Read_DHT11_Sensor+0xb0>)
 800210e:	6013      	str	r3, [r2, #0]
    	humi = (float)RH;
 8002110:	4b0b      	ldr	r3, [pc, #44]	; (8002140 <Read_DHT11_Sensor+0xac>)
 8002112:	881b      	ldrh	r3, [r3, #0]
 8002114:	4618      	mov	r0, r3
 8002116:	f7fe fcc7 	bl	8000aa8 <__aeabi_ui2f>
 800211a:	4603      	mov	r3, r0
 800211c:	4a0a      	ldr	r2, [pc, #40]	; (8002148 <Read_DHT11_Sensor+0xb4>)
 800211e:	6013      	str	r3, [r2, #0]
    }
    //stop_tick = HAL_GetTick();
    //execute_tick = stop_tick - start_tick;
}
 8002120:	bf00      	nop
 8002122:	bd80      	pop	{r7, pc}
 8002124:	200002d2 	.word	0x200002d2
 8002128:	200002c8 	.word	0x200002c8
 800212c:	200002c9 	.word	0x200002c9
 8002130:	200002ca 	.word	0x200002ca
 8002134:	200002cb 	.word	0x200002cb
 8002138:	200002cc 	.word	0x200002cc
 800213c:	200002d0 	.word	0x200002d0
 8002140:	200002ce 	.word	0x200002ce
 8002144:	200002c0 	.word	0x200002c0
 8002148:	200002c4 	.word	0x200002c4

0800214c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b086      	sub	sp, #24
 8002150:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002152:	f000 feaf 	bl	8002eb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002156:	f000 fa79 	bl	800264c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800215a:	f000 fbcf 	bl	80028fc <MX_GPIO_Init>
  MX_DMA_Init();
 800215e:	f000 fba7 	bl	80028b0 <MX_DMA_Init>
  MX_TIM4_Init();
 8002162:	f000 fb2d 	bl	80027c0 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8002166:	f000 fb79 	bl	800285c <MX_USART1_UART_Init>
  MX_TIM1_Init();
 800216a:	f000 fab5 	bl	80026d8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  queue[0] = Read_HCSR04_Sensor;
 800216e:	4b99      	ldr	r3, [pc, #612]	; (80023d4 <main+0x288>)
 8002170:	4a99      	ldr	r2, [pc, #612]	; (80023d8 <main+0x28c>)
 8002172:	601a      	str	r2, [r3, #0]
  queue[1] = Read_DHT11_Sensor;
 8002174:	4b97      	ldr	r3, [pc, #604]	; (80023d4 <main+0x288>)
 8002176:	4a99      	ldr	r2, [pc, #612]	; (80023dc <main+0x290>)
 8002178:	605a      	str	r2, [r3, #4]
  queue[4] = DHT11_UART_Transmit;
 800217a:	4b96      	ldr	r3, [pc, #600]	; (80023d4 <main+0x288>)
 800217c:	4a98      	ldr	r2, [pc, #608]	; (80023e0 <main+0x294>)
 800217e:	611a      	str	r2, [r3, #16]
  queue[15] = DHT11_UART_Transmit;
 8002180:	4b94      	ldr	r3, [pc, #592]	; (80023d4 <main+0x288>)
 8002182:	4a97      	ldr	r2, [pc, #604]	; (80023e0 <main+0x294>)
 8002184:	63da      	str	r2, [r3, #60]	; 0x3c
  queue[26] = DHT11_UART_Transmit;
 8002186:	4b93      	ldr	r3, [pc, #588]	; (80023d4 <main+0x288>)
 8002188:	4a95      	ldr	r2, [pc, #596]	; (80023e0 <main+0x294>)
 800218a:	669a      	str	r2, [r3, #104]	; 0x68
  queue[37] = DHT11_UART_Transmit;
 800218c:	4b91      	ldr	r3, [pc, #580]	; (80023d4 <main+0x288>)
 800218e:	4a94      	ldr	r2, [pc, #592]	; (80023e0 <main+0x294>)
 8002190:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  queue[2] = LCD_Display;
 8002194:	4b8f      	ldr	r3, [pc, #572]	; (80023d4 <main+0x288>)
 8002196:	4a93      	ldr	r2, [pc, #588]	; (80023e4 <main+0x298>)
 8002198:	609a      	str	r2, [r3, #8]
  queue[3] = Read_HCSR04_Sensor;
 800219a:	4b8e      	ldr	r3, [pc, #568]	; (80023d4 <main+0x288>)
 800219c:	4a8e      	ldr	r2, [pc, #568]	; (80023d8 <main+0x28c>)
 800219e:	60da      	str	r2, [r3, #12]

  for(uint8_t i = 5; i <= 44; ){
 80021a0:	2305      	movs	r3, #5
 80021a2:	71fb      	strb	r3, [r7, #7]
 80021a4:	e014      	b.n	80021d0 <main+0x84>
	  queue[i] = LCD_Display;
 80021a6:	79fb      	ldrb	r3, [r7, #7]
 80021a8:	4a8a      	ldr	r2, [pc, #552]	; (80023d4 <main+0x288>)
 80021aa:	498e      	ldr	r1, [pc, #568]	; (80023e4 <main+0x298>)
 80021ac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  if(i == 13 || i == 24 || i == 35){
 80021b0:	79fb      	ldrb	r3, [r7, #7]
 80021b2:	2b0d      	cmp	r3, #13
 80021b4:	d005      	beq.n	80021c2 <main+0x76>
 80021b6:	79fb      	ldrb	r3, [r7, #7]
 80021b8:	2b18      	cmp	r3, #24
 80021ba:	d002      	beq.n	80021c2 <main+0x76>
 80021bc:	79fb      	ldrb	r3, [r7, #7]
 80021be:	2b23      	cmp	r3, #35	; 0x23
 80021c0:	d103      	bne.n	80021ca <main+0x7e>
		  i = i + 3;
 80021c2:	79fb      	ldrb	r3, [r7, #7]
 80021c4:	3303      	adds	r3, #3
 80021c6:	71fb      	strb	r3, [r7, #7]
 80021c8:	e002      	b.n	80021d0 <main+0x84>
	  }
	  else{
		  i = i + 2;
 80021ca:	79fb      	ldrb	r3, [r7, #7]
 80021cc:	3302      	adds	r3, #2
 80021ce:	71fb      	strb	r3, [r7, #7]
  for(uint8_t i = 5; i <= 44; ){
 80021d0:	79fb      	ldrb	r3, [r7, #7]
 80021d2:	2b2c      	cmp	r3, #44	; 0x2c
 80021d4:	d9e7      	bls.n	80021a6 <main+0x5a>
	  }
  }

  for(uint8_t i = 6; i <= 43; ){
 80021d6:	2306      	movs	r3, #6
 80021d8:	71bb      	strb	r3, [r7, #6]
 80021da:	e014      	b.n	8002206 <main+0xba>
  	  queue[i] = Read_HCSR04_Sensor;
 80021dc:	79bb      	ldrb	r3, [r7, #6]
 80021de:	4a7d      	ldr	r2, [pc, #500]	; (80023d4 <main+0x288>)
 80021e0:	497d      	ldr	r1, [pc, #500]	; (80023d8 <main+0x28c>)
 80021e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  	  if(i == 14 || i == 25 || i == 36){
 80021e6:	79bb      	ldrb	r3, [r7, #6]
 80021e8:	2b0e      	cmp	r3, #14
 80021ea:	d005      	beq.n	80021f8 <main+0xac>
 80021ec:	79bb      	ldrb	r3, [r7, #6]
 80021ee:	2b19      	cmp	r3, #25
 80021f0:	d002      	beq.n	80021f8 <main+0xac>
 80021f2:	79bb      	ldrb	r3, [r7, #6]
 80021f4:	2b24      	cmp	r3, #36	; 0x24
 80021f6:	d103      	bne.n	8002200 <main+0xb4>
  		  i = i + 3;
 80021f8:	79bb      	ldrb	r3, [r7, #6]
 80021fa:	3303      	adds	r3, #3
 80021fc:	71bb      	strb	r3, [r7, #6]
 80021fe:	e002      	b.n	8002206 <main+0xba>
  	  }
  	  else{
  		  i = i + 2;
 8002200:	79bb      	ldrb	r3, [r7, #6]
 8002202:	3302      	adds	r3, #2
 8002204:	71bb      	strb	r3, [r7, #6]
  for(uint8_t i = 6; i <= 43; ){
 8002206:	79bb      	ldrb	r3, [r7, #6]
 8002208:	2b2b      	cmp	r3, #43	; 0x2b
 800220a:	d9e7      	bls.n	80021dc <main+0x90>
  	  }
    }

  for(uint8_t i = 0; i <= 45 ; i++){
 800220c:	2300      	movs	r3, #0
 800220e:	717b      	strb	r3, [r7, #5]
 8002210:	e008      	b.n	8002224 <main+0xd8>
	  execute_time[i] = 500 - 1;
 8002212:	797b      	ldrb	r3, [r7, #5]
 8002214:	4a74      	ldr	r2, [pc, #464]	; (80023e8 <main+0x29c>)
 8002216:	f240 11f3 	movw	r1, #499	; 0x1f3
 800221a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for(uint8_t i = 0; i <= 45 ; i++){
 800221e:	797b      	ldrb	r3, [r7, #5]
 8002220:	3301      	adds	r3, #1
 8002222:	717b      	strb	r3, [r7, #5]
 8002224:	797b      	ldrb	r3, [r7, #5]
 8002226:	2b2d      	cmp	r3, #45	; 0x2d
 8002228:	d9f3      	bls.n	8002212 <main+0xc6>
  }

  execute_time[1] = 1000  - 1;
 800222a:	4b6f      	ldr	r3, [pc, #444]	; (80023e8 <main+0x29c>)
 800222c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002230:	605a      	str	r2, [r3, #4]

  for(uint8_t i = 4; i <= 37; i = i + 11){
 8002232:	2304      	movs	r3, #4
 8002234:	713b      	strb	r3, [r7, #4]
 8002236:	e008      	b.n	800224a <main+0xfe>
	  execute_time[i] = 1000  - 1;
 8002238:	793b      	ldrb	r3, [r7, #4]
 800223a:	4a6b      	ldr	r2, [pc, #428]	; (80023e8 <main+0x29c>)
 800223c:	f240 31e7 	movw	r1, #999	; 0x3e7
 8002240:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for(uint8_t i = 4; i <= 37; i = i + 11){
 8002244:	793b      	ldrb	r3, [r7, #4]
 8002246:	330b      	adds	r3, #11
 8002248:	713b      	strb	r3, [r7, #4]
 800224a:	793b      	ldrb	r3, [r7, #4]
 800224c:	2b25      	cmp	r3, #37	; 0x25
 800224e:	d9f3      	bls.n	8002238 <main+0xec>
  };

  for(uint8_t i = 7; i <= 44; ){
 8002250:	2307      	movs	r3, #7
 8002252:	70fb      	strb	r3, [r7, #3]
 8002254:	e015      	b.n	8002282 <main+0x136>
    	  execute_time[i] = 1500 - 1;
 8002256:	78fb      	ldrb	r3, [r7, #3]
 8002258:	4a63      	ldr	r2, [pc, #396]	; (80023e8 <main+0x29c>)
 800225a:	f240 51db 	movw	r1, #1499	; 0x5db
 800225e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    	  if(i == 13 || i == 24 || i == 35){
 8002262:	78fb      	ldrb	r3, [r7, #3]
 8002264:	2b0d      	cmp	r3, #13
 8002266:	d005      	beq.n	8002274 <main+0x128>
 8002268:	78fb      	ldrb	r3, [r7, #3]
 800226a:	2b18      	cmp	r3, #24
 800226c:	d002      	beq.n	8002274 <main+0x128>
 800226e:	78fb      	ldrb	r3, [r7, #3]
 8002270:	2b23      	cmp	r3, #35	; 0x23
 8002272:	d103      	bne.n	800227c <main+0x130>
    		  i = i + 5;
 8002274:	78fb      	ldrb	r3, [r7, #3]
 8002276:	3305      	adds	r3, #5
 8002278:	70fb      	strb	r3, [r7, #3]
 800227a:	e002      	b.n	8002282 <main+0x136>
    	  }
    	  else{
    		  i = i + 2;
 800227c:	78fb      	ldrb	r3, [r7, #3]
 800227e:	3302      	adds	r3, #2
 8002280:	70fb      	strb	r3, [r7, #3]
  for(uint8_t i = 7; i <= 44; ){
 8002282:	78fb      	ldrb	r3, [r7, #3]
 8002284:	2b2c      	cmp	r3, #44	; 0x2c
 8002286:	d9e6      	bls.n	8002256 <main+0x10a>
    	  }
   };

  lcd16x2_init_4bits(GPIOB, RS_Pin, E_Pin, GPIOA, GPIO_PIN_3, GPIO_PIN_4, GPIO_PIN_5, GPIO_PIN_6);
 8002288:	2340      	movs	r3, #64	; 0x40
 800228a:	9303      	str	r3, [sp, #12]
 800228c:	2320      	movs	r3, #32
 800228e:	9302      	str	r3, [sp, #8]
 8002290:	2310      	movs	r3, #16
 8002292:	9301      	str	r3, [sp, #4]
 8002294:	2308      	movs	r3, #8
 8002296:	9300      	str	r3, [sp, #0]
 8002298:	4b54      	ldr	r3, [pc, #336]	; (80023ec <main+0x2a0>)
 800229a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800229e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022a2:	4853      	ldr	r0, [pc, #332]	; (80023f0 <main+0x2a4>)
 80022a4:	f7fe fe50 	bl	8000f48 <lcd16x2_init_4bits>

  HAL_TIM_Base_Start_IT(&htim4);
 80022a8:	4852      	ldr	r0, [pc, #328]	; (80023f4 <main+0x2a8>)
 80022aa:	f002 f8b5 	bl	8004418 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim1);
 80022ae:	4852      	ldr	r0, [pc, #328]	; (80023f8 <main+0x2ac>)
 80022b0:	f002 f868 	bl	8004384 <HAL_TIM_Base_Start>
  __HAL_TIM_ENABLE_IT(&htim4, TIM_IT_UPDATE);
 80022b4:	4b4f      	ldr	r3, [pc, #316]	; (80023f4 <main+0x2a8>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	68da      	ldr	r2, [r3, #12]
 80022ba:	4b4e      	ldr	r3, [pc, #312]	; (80023f4 <main+0x2a8>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f042 0201 	orr.w	r2, r2, #1
 80022c2:	60da      	str	r2, [r3, #12]
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 80022c4:	2100      	movs	r1, #0
 80022c6:	484c      	ldr	r0, [pc, #304]	; (80023f8 <main+0x2ac>)
 80022c8:	f002 f950 	bl	800456c <HAL_TIM_IC_Start_IT>
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, RxBuffer, MainBuff_SIZE);
 80022cc:	2209      	movs	r2, #9
 80022ce:	494b      	ldr	r1, [pc, #300]	; (80023fc <main+0x2b0>)
 80022d0:	484b      	ldr	r0, [pc, #300]	; (8002400 <main+0x2b4>)
 80022d2:	f003 f865 	bl	80053a0 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80022d6:	4b4b      	ldr	r3, [pc, #300]	; (8002404 <main+0x2b8>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	4b49      	ldr	r3, [pc, #292]	; (8002404 <main+0x2b8>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f022 0204 	bic.w	r2, r2, #4
 80022e4:	601a      	str	r2, [r3, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(read_DHT11_flag){
 80022e6:	4b48      	ldr	r3, [pc, #288]	; (8002408 <main+0x2bc>)
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d016      	beq.n	800231c <main+0x1d0>
	      read_DHT11_flag = 0;
 80022ee:	4b46      	ldr	r3, [pc, #280]	; (8002408 <main+0x2bc>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	701a      	strb	r2, [r3, #0]
	      dht11_tick_new = HAL_GetTick();
 80022f4:	f000 fe36 	bl	8002f64 <HAL_GetTick>
 80022f8:	4603      	mov	r3, r0
 80022fa:	461a      	mov	r2, r3
 80022fc:	4b43      	ldr	r3, [pc, #268]	; (800240c <main+0x2c0>)
 80022fe:	601a      	str	r2, [r3, #0]
	      Read_DHT11_Sensor();
 8002300:	f7ff fec8 	bl	8002094 <Read_DHT11_Sensor>
	      dht11_tick_period = dht11_tick_new - dht11_tick_old;
 8002304:	4b41      	ldr	r3, [pc, #260]	; (800240c <main+0x2c0>)
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	4b41      	ldr	r3, [pc, #260]	; (8002410 <main+0x2c4>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	4a41      	ldr	r2, [pc, #260]	; (8002414 <main+0x2c8>)
 8002310:	6013      	str	r3, [r2, #0]
	      dht11_tick_old = dht11_tick_new;
 8002312:	4b3e      	ldr	r3, [pc, #248]	; (800240c <main+0x2c0>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a3e      	ldr	r2, [pc, #248]	; (8002410 <main+0x2c4>)
 8002318:	6013      	str	r3, [r2, #0]
 800231a:	e7e4      	b.n	80022e6 <main+0x19a>
	  }
	  else if(read_HCSR04_flag){
 800231c:	4b3e      	ldr	r3, [pc, #248]	; (8002418 <main+0x2cc>)
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d016      	beq.n	8002352 <main+0x206>
		  read_HCSR04_flag = 0;
 8002324:	4b3c      	ldr	r3, [pc, #240]	; (8002418 <main+0x2cc>)
 8002326:	2200      	movs	r2, #0
 8002328:	701a      	strb	r2, [r3, #0]
		  hcsr04_tick_new = HAL_GetTick();
 800232a:	f000 fe1b 	bl	8002f64 <HAL_GetTick>
 800232e:	4603      	mov	r3, r0
 8002330:	461a      	mov	r2, r3
 8002332:	4b3a      	ldr	r3, [pc, #232]	; (800241c <main+0x2d0>)
 8002334:	601a      	str	r2, [r3, #0]
		  Read_HCSR04_Sensor();
 8002336:	f7ff f827 	bl	8001388 <Read_HCSR04_Sensor>
		  hcsr04_tick_period = hcsr04_tick_new - hcsr04_tick_old;
 800233a:	4b38      	ldr	r3, [pc, #224]	; (800241c <main+0x2d0>)
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	4b38      	ldr	r3, [pc, #224]	; (8002420 <main+0x2d4>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	4a37      	ldr	r2, [pc, #220]	; (8002424 <main+0x2d8>)
 8002346:	6013      	str	r3, [r2, #0]
		  hcsr04_tick_old = hcsr04_tick_new;
 8002348:	4b34      	ldr	r3, [pc, #208]	; (800241c <main+0x2d0>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a34      	ldr	r2, [pc, #208]	; (8002420 <main+0x2d4>)
 800234e:	6013      	str	r3, [r2, #0]
 8002350:	e7c9      	b.n	80022e6 <main+0x19a>
	  }
	  else if(lcd_display_flag){
 8002352:	4b35      	ldr	r3, [pc, #212]	; (8002428 <main+0x2dc>)
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d016      	beq.n	8002388 <main+0x23c>
		  lcd_display_flag = 0;
 800235a:	4b33      	ldr	r3, [pc, #204]	; (8002428 <main+0x2dc>)
 800235c:	2200      	movs	r2, #0
 800235e:	701a      	strb	r2, [r3, #0]
		  lcd_tick_new = HAL_GetTick();
 8002360:	f000 fe00 	bl	8002f64 <HAL_GetTick>
 8002364:	4603      	mov	r3, r0
 8002366:	461a      	mov	r2, r3
 8002368:	4b30      	ldr	r3, [pc, #192]	; (800242c <main+0x2e0>)
 800236a:	601a      	str	r2, [r3, #0]
		  LCD_Display();
 800236c:	f7ff f82c 	bl	80013c8 <LCD_Display>
		  lcd_tick_period = lcd_tick_new - lcd_tick_old;
 8002370:	4b2e      	ldr	r3, [pc, #184]	; (800242c <main+0x2e0>)
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	4b2e      	ldr	r3, [pc, #184]	; (8002430 <main+0x2e4>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	4a2e      	ldr	r2, [pc, #184]	; (8002434 <main+0x2e8>)
 800237c:	6013      	str	r3, [r2, #0]
		  lcd_tick_old = lcd_tick_new;
 800237e:	4b2b      	ldr	r3, [pc, #172]	; (800242c <main+0x2e0>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a2b      	ldr	r2, [pc, #172]	; (8002430 <main+0x2e4>)
 8002384:	6013      	str	r3, [r2, #0]
 8002386:	e7ae      	b.n	80022e6 <main+0x19a>
	  }
	  else if(transmit_DHT11_data_flag && (uart_enable_cmd_1 || uart_enable_cmd_2)){
 8002388:	4b2b      	ldr	r3, [pc, #172]	; (8002438 <main+0x2ec>)
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d061      	beq.n	8002454 <main+0x308>
 8002390:	4b2a      	ldr	r3, [pc, #168]	; (800243c <main+0x2f0>)
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d103      	bne.n	80023a0 <main+0x254>
 8002398:	4b29      	ldr	r3, [pc, #164]	; (8002440 <main+0x2f4>)
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d059      	beq.n	8002454 <main+0x308>
		  transmit_DHT11_data_flag = 0;
 80023a0:	4b25      	ldr	r3, [pc, #148]	; (8002438 <main+0x2ec>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	701a      	strb	r2, [r3, #0]
		  DHT11_UART_Transmit();
 80023a6:	f7ff f847 	bl	8001438 <DHT11_UART_Transmit>
		  temp_cnt = 1;
 80023aa:	4b26      	ldr	r3, [pc, #152]	; (8002444 <main+0x2f8>)
 80023ac:	2201      	movs	r2, #1
 80023ae:	701a      	strb	r2, [r3, #0]
		  humi_cnt = 1;
 80023b0:	4b25      	ldr	r3, [pc, #148]	; (8002448 <main+0x2fc>)
 80023b2:	2201      	movs	r2, #1
 80023b4:	701a      	strb	r2, [r3, #0]
		  isHumiTrans = 0;
 80023b6:	4b25      	ldr	r3, [pc, #148]	; (800244c <main+0x300>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	701a      	strb	r2, [r3, #0]
		  if(uart_enable_cmd_2){
 80023bc:	4b20      	ldr	r3, [pc, #128]	; (8002440 <main+0x2f4>)
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	f000 8126 	beq.w	8002612 <main+0x4c6>
			  uart_enable_cmd_2_tmp = 0;
 80023c6:	4b22      	ldr	r3, [pc, #136]	; (8002450 <main+0x304>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	701a      	strb	r2, [r3, #0]
			  uart_enable_cmd_2 = 0;
 80023cc:	4b1c      	ldr	r3, [pc, #112]	; (8002440 <main+0x2f4>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	701a      	strb	r2, [r3, #0]
		  if(uart_enable_cmd_2){
 80023d2:	e11e      	b.n	8002612 <main+0x4c6>
 80023d4:	2000020c 	.word	0x2000020c
 80023d8:	08001389 	.word	0x08001389
 80023dc:	08002095 	.word	0x08002095
 80023e0:	08001439 	.word	0x08001439
 80023e4:	080013c9 	.word	0x080013c9
 80023e8:	200003cc 	.word	0x200003cc
 80023ec:	40010800 	.word	0x40010800
 80023f0:	40010c00 	.word	0x40010c00
 80023f4:	200000f8 	.word	0x200000f8
 80023f8:	200000b0 	.word	0x200000b0
 80023fc:	20000304 	.word	0x20000304
 8002400:	20000140 	.word	0x20000140
 8002404:	20000184 	.word	0x20000184
 8002408:	20000377 	.word	0x20000377
 800240c:	2000039c 	.word	0x2000039c
 8002410:	20000398 	.word	0x20000398
 8002414:	200003a0 	.word	0x200003a0
 8002418:	20000378 	.word	0x20000378
 800241c:	200003b4 	.word	0x200003b4
 8002420:	200003b0 	.word	0x200003b0
 8002424:	200003b8 	.word	0x200003b8
 8002428:	20000380 	.word	0x20000380
 800242c:	200003a8 	.word	0x200003a8
 8002430:	200003a4 	.word	0x200003a4
 8002434:	200003ac 	.word	0x200003ac
 8002438:	20000379 	.word	0x20000379
 800243c:	20000381 	.word	0x20000381
 8002440:	20000382 	.word	0x20000382
 8002444:	20000375 	.word	0x20000375
 8002448:	20000374 	.word	0x20000374
 800244c:	20000386 	.word	0x20000386
 8002450:	20000384 	.word	0x20000384
		  }
	  }
	  else if(transmit_humi_HCSR04_data_flag && (uart_enable_cmd_1 || uart_enable_cmd_2)){
 8002454:	4b6f      	ldr	r3, [pc, #444]	; (8002614 <main+0x4c8>)
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d024      	beq.n	80024a6 <main+0x35a>
 800245c:	4b6e      	ldr	r3, [pc, #440]	; (8002618 <main+0x4cc>)
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d103      	bne.n	800246c <main+0x320>
 8002464:	4b6d      	ldr	r3, [pc, #436]	; (800261c <main+0x4d0>)
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d01c      	beq.n	80024a6 <main+0x35a>
		  transmit_humi_HCSR04_data_flag = 0;
 800246c:	4b69      	ldr	r3, [pc, #420]	; (8002614 <main+0x4c8>)
 800246e:	2200      	movs	r2, #0
 8002470:	701a      	strb	r2, [r3, #0]
		  Humi_HCSR04_UART_Transmit();
 8002472:	f7ff f8c3 	bl	80015fc <Humi_HCSR04_UART_Transmit>
		  humi_cnt = 1;
 8002476:	4b6a      	ldr	r3, [pc, #424]	; (8002620 <main+0x4d4>)
 8002478:	2201      	movs	r2, #1
 800247a:	701a      	strb	r2, [r3, #0]
		  dist_cnt = 1;
 800247c:	4b69      	ldr	r3, [pc, #420]	; (8002624 <main+0x4d8>)
 800247e:	2201      	movs	r2, #1
 8002480:	701a      	strb	r2, [r3, #0]
		  isHumiTrans = 0;
 8002482:	4b69      	ldr	r3, [pc, #420]	; (8002628 <main+0x4dc>)
 8002484:	2200      	movs	r2, #0
 8002486:	701a      	strb	r2, [r3, #0]
		  isDistTrans = 0;
 8002488:	4b68      	ldr	r3, [pc, #416]	; (800262c <main+0x4e0>)
 800248a:	2200      	movs	r2, #0
 800248c:	701a      	strb	r2, [r3, #0]
		  if(uart_enable_cmd_2){
 800248e:	4b63      	ldr	r3, [pc, #396]	; (800261c <main+0x4d0>)
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	2b00      	cmp	r3, #0
 8002494:	f000 80bd 	beq.w	8002612 <main+0x4c6>
			  uart_enable_cmd_2_tmp = 0;
 8002498:	4b65      	ldr	r3, [pc, #404]	; (8002630 <main+0x4e4>)
 800249a:	2200      	movs	r2, #0
 800249c:	701a      	strb	r2, [r3, #0]
			  uart_enable_cmd_2 = 0;
 800249e:	4b5f      	ldr	r3, [pc, #380]	; (800261c <main+0x4d0>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	701a      	strb	r2, [r3, #0]
		  if(uart_enable_cmd_2){
 80024a4:	e0b5      	b.n	8002612 <main+0x4c6>
		  }
	  }
	  else if(transmit_temp_HCSR04_data_flag && (uart_enable_cmd_1 || uart_enable_cmd_2)){
 80024a6:	4b63      	ldr	r3, [pc, #396]	; (8002634 <main+0x4e8>)
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d021      	beq.n	80024f2 <main+0x3a6>
 80024ae:	4b5a      	ldr	r3, [pc, #360]	; (8002618 <main+0x4cc>)
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d103      	bne.n	80024be <main+0x372>
 80024b6:	4b59      	ldr	r3, [pc, #356]	; (800261c <main+0x4d0>)
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d019      	beq.n	80024f2 <main+0x3a6>
		  transmit_temp_HCSR04_data_flag = 0;
 80024be:	4b5d      	ldr	r3, [pc, #372]	; (8002634 <main+0x4e8>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	701a      	strb	r2, [r3, #0]
		  temp_cnt = 1;
 80024c4:	4b5c      	ldr	r3, [pc, #368]	; (8002638 <main+0x4ec>)
 80024c6:	2201      	movs	r2, #1
 80024c8:	701a      	strb	r2, [r3, #0]
		  dist_cnt = 1;
 80024ca:	4b56      	ldr	r3, [pc, #344]	; (8002624 <main+0x4d8>)
 80024cc:	2201      	movs	r2, #1
 80024ce:	701a      	strb	r2, [r3, #0]
		  Temp_HCSR04_UART_Transmit();
 80024d0:	f7ff f8d2 	bl	8001678 <Temp_HCSR04_UART_Transmit>
		  isDistTrans = 0;
 80024d4:	4b55      	ldr	r3, [pc, #340]	; (800262c <main+0x4e0>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	701a      	strb	r2, [r3, #0]
		  if(uart_enable_cmd_2){
 80024da:	4b50      	ldr	r3, [pc, #320]	; (800261c <main+0x4d0>)
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	f000 8097 	beq.w	8002612 <main+0x4c6>
			  uart_enable_cmd_2_tmp = 0;
 80024e4:	4b52      	ldr	r3, [pc, #328]	; (8002630 <main+0x4e4>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	701a      	strb	r2, [r3, #0]
			  uart_enable_cmd_2 = 0;
 80024ea:	4b4c      	ldr	r3, [pc, #304]	; (800261c <main+0x4d0>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	701a      	strb	r2, [r3, #0]
		  if(uart_enable_cmd_2){
 80024f0:	e08f      	b.n	8002612 <main+0x4c6>
		  }
	  }
	  else if(transmit_temp_data_flag && (uart_enable_cmd_1 || uart_enable_cmd_2)){
 80024f2:	4b52      	ldr	r3, [pc, #328]	; (800263c <main+0x4f0>)
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d01a      	beq.n	8002530 <main+0x3e4>
 80024fa:	4b47      	ldr	r3, [pc, #284]	; (8002618 <main+0x4cc>)
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d103      	bne.n	800250a <main+0x3be>
 8002502:	4b46      	ldr	r3, [pc, #280]	; (800261c <main+0x4d0>)
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d012      	beq.n	8002530 <main+0x3e4>
		  transmit_temp_data_flag = 0;
 800250a:	4b4c      	ldr	r3, [pc, #304]	; (800263c <main+0x4f0>)
 800250c:	2200      	movs	r2, #0
 800250e:	701a      	strb	r2, [r3, #0]
		  temp_cnt = 1;
 8002510:	4b49      	ldr	r3, [pc, #292]	; (8002638 <main+0x4ec>)
 8002512:	2201      	movs	r2, #1
 8002514:	701a      	strb	r2, [r3, #0]
		  Temp_UART_Transmit();
 8002516:	f7fe ffe7 	bl	80014e8 <Temp_UART_Transmit>
		  if(uart_enable_cmd_2){
 800251a:	4b40      	ldr	r3, [pc, #256]	; (800261c <main+0x4d0>)
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d077      	beq.n	8002612 <main+0x4c6>
			  uart_enable_cmd_2_tmp = 0;
 8002522:	4b43      	ldr	r3, [pc, #268]	; (8002630 <main+0x4e4>)
 8002524:	2200      	movs	r2, #0
 8002526:	701a      	strb	r2, [r3, #0]
			  uart_enable_cmd_2 = 0;
 8002528:	4b3c      	ldr	r3, [pc, #240]	; (800261c <main+0x4d0>)
 800252a:	2200      	movs	r2, #0
 800252c:	701a      	strb	r2, [r3, #0]
		  if(uart_enable_cmd_2){
 800252e:	e070      	b.n	8002612 <main+0x4c6>
		  }
	  }
	  else if(transmit_humi_data_flag && (uart_enable_cmd_1 || uart_enable_cmd_2)){
 8002530:	4b43      	ldr	r3, [pc, #268]	; (8002640 <main+0x4f4>)
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d01d      	beq.n	8002574 <main+0x428>
 8002538:	4b37      	ldr	r3, [pc, #220]	; (8002618 <main+0x4cc>)
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d103      	bne.n	8002548 <main+0x3fc>
 8002540:	4b36      	ldr	r3, [pc, #216]	; (800261c <main+0x4d0>)
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d015      	beq.n	8002574 <main+0x428>
		  transmit_humi_data_flag = 0;
 8002548:	4b3d      	ldr	r3, [pc, #244]	; (8002640 <main+0x4f4>)
 800254a:	2200      	movs	r2, #0
 800254c:	701a      	strb	r2, [r3, #0]
		  humi_cnt = 1;
 800254e:	4b34      	ldr	r3, [pc, #208]	; (8002620 <main+0x4d4>)
 8002550:	2201      	movs	r2, #1
 8002552:	701a      	strb	r2, [r3, #0]
		  Humi_UART_Transmit();
 8002554:	f7ff f816 	bl	8001584 <Humi_UART_Transmit>
		  isHumiTrans = 0;
 8002558:	4b33      	ldr	r3, [pc, #204]	; (8002628 <main+0x4dc>)
 800255a:	2200      	movs	r2, #0
 800255c:	701a      	strb	r2, [r3, #0]
		  if(uart_enable_cmd_2){
 800255e:	4b2f      	ldr	r3, [pc, #188]	; (800261c <main+0x4d0>)
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d055      	beq.n	8002612 <main+0x4c6>
			  uart_enable_cmd_2_tmp = 0;
 8002566:	4b32      	ldr	r3, [pc, #200]	; (8002630 <main+0x4e4>)
 8002568:	2200      	movs	r2, #0
 800256a:	701a      	strb	r2, [r3, #0]
			  uart_enable_cmd_2 = 0;
 800256c:	4b2b      	ldr	r3, [pc, #172]	; (800261c <main+0x4d0>)
 800256e:	2200      	movs	r2, #0
 8002570:	701a      	strb	r2, [r3, #0]
		  if(uart_enable_cmd_2){
 8002572:	e04e      	b.n	8002612 <main+0x4c6>
		  }
	  }
	  else if(transmit_dist_data_flag && (uart_enable_cmd_1 || uart_enable_cmd_2)){
 8002574:	4b33      	ldr	r3, [pc, #204]	; (8002644 <main+0x4f8>)
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d01d      	beq.n	80025b8 <main+0x46c>
 800257c:	4b26      	ldr	r3, [pc, #152]	; (8002618 <main+0x4cc>)
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d103      	bne.n	800258c <main+0x440>
 8002584:	4b25      	ldr	r3, [pc, #148]	; (800261c <main+0x4d0>)
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d015      	beq.n	80025b8 <main+0x46c>
		  transmit_dist_data_flag = 0;
 800258c:	4b2d      	ldr	r3, [pc, #180]	; (8002644 <main+0x4f8>)
 800258e:	2200      	movs	r2, #0
 8002590:	701a      	strb	r2, [r3, #0]
		  dist_cnt = 1;
 8002592:	4b24      	ldr	r3, [pc, #144]	; (8002624 <main+0x4d8>)
 8002594:	2201      	movs	r2, #1
 8002596:	701a      	strb	r2, [r3, #0]
		  HCSR04_UART_Transmit();
 8002598:	f7ff f8ac 	bl	80016f4 <HCSR04_UART_Transmit>
		  isDistTrans = 0;
 800259c:	4b23      	ldr	r3, [pc, #140]	; (800262c <main+0x4e0>)
 800259e:	2200      	movs	r2, #0
 80025a0:	701a      	strb	r2, [r3, #0]
		  if(uart_enable_cmd_2){
 80025a2:	4b1e      	ldr	r3, [pc, #120]	; (800261c <main+0x4d0>)
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d033      	beq.n	8002612 <main+0x4c6>
			  uart_enable_cmd_2_tmp = 0;
 80025aa:	4b21      	ldr	r3, [pc, #132]	; (8002630 <main+0x4e4>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	701a      	strb	r2, [r3, #0]
			  uart_enable_cmd_2 = 0;
 80025b0:	4b1a      	ldr	r3, [pc, #104]	; (800261c <main+0x4d0>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	701a      	strb	r2, [r3, #0]
		  if(uart_enable_cmd_2){
 80025b6:	e02c      	b.n	8002612 <main+0x4c6>
		  }
	  }
	  else if(transmit_DHT11_HCSR04_data_flag && (uart_enable_cmd_1 || uart_enable_cmd_2)){
 80025b8:	4b23      	ldr	r3, [pc, #140]	; (8002648 <main+0x4fc>)
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	f43f ae92 	beq.w	80022e6 <main+0x19a>
 80025c2:	4b15      	ldr	r3, [pc, #84]	; (8002618 <main+0x4cc>)
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d104      	bne.n	80025d4 <main+0x488>
 80025ca:	4b14      	ldr	r3, [pc, #80]	; (800261c <main+0x4d0>)
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	f43f ae89 	beq.w	80022e6 <main+0x19a>
		  transmit_DHT11_HCSR04_data_flag = 0;
 80025d4:	4b1c      	ldr	r3, [pc, #112]	; (8002648 <main+0x4fc>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	701a      	strb	r2, [r3, #0]
		  dist_cnt = 1;
 80025da:	4b12      	ldr	r3, [pc, #72]	; (8002624 <main+0x4d8>)
 80025dc:	2201      	movs	r2, #1
 80025de:	701a      	strb	r2, [r3, #0]
		  temp_cnt = 1;
 80025e0:	4b15      	ldr	r3, [pc, #84]	; (8002638 <main+0x4ec>)
 80025e2:	2201      	movs	r2, #1
 80025e4:	701a      	strb	r2, [r3, #0]
		  humi_cnt = 1;
 80025e6:	4b0e      	ldr	r3, [pc, #56]	; (8002620 <main+0x4d4>)
 80025e8:	2201      	movs	r2, #1
 80025ea:	701a      	strb	r2, [r3, #0]
		  DHT11_HCSR04_UART_Transmit();
 80025ec:	f7ff f8ba 	bl	8001764 <DHT11_HCSR04_UART_Transmit>
		  isDistTrans = 0;
 80025f0:	4b0e      	ldr	r3, [pc, #56]	; (800262c <main+0x4e0>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	701a      	strb	r2, [r3, #0]
		  isHumiTrans = 0;
 80025f6:	4b0c      	ldr	r3, [pc, #48]	; (8002628 <main+0x4dc>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	701a      	strb	r2, [r3, #0]
		  if(uart_enable_cmd_2){
 80025fc:	4b07      	ldr	r3, [pc, #28]	; (800261c <main+0x4d0>)
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	2b00      	cmp	r3, #0
 8002602:	f43f ae70 	beq.w	80022e6 <main+0x19a>
			  uart_enable_cmd_2_tmp = 0;
 8002606:	4b0a      	ldr	r3, [pc, #40]	; (8002630 <main+0x4e4>)
 8002608:	2200      	movs	r2, #0
 800260a:	701a      	strb	r2, [r3, #0]
			  uart_enable_cmd_2 = 0;
 800260c:	4b03      	ldr	r3, [pc, #12]	; (800261c <main+0x4d0>)
 800260e:	2200      	movs	r2, #0
 8002610:	701a      	strb	r2, [r3, #0]
	  if(read_DHT11_flag){
 8002612:	e668      	b.n	80022e6 <main+0x19a>
 8002614:	2000037f 	.word	0x2000037f
 8002618:	20000381 	.word	0x20000381
 800261c:	20000382 	.word	0x20000382
 8002620:	20000374 	.word	0x20000374
 8002624:	20000376 	.word	0x20000376
 8002628:	20000386 	.word	0x20000386
 800262c:	20000387 	.word	0x20000387
 8002630:	20000384 	.word	0x20000384
 8002634:	2000037e 	.word	0x2000037e
 8002638:	20000375 	.word	0x20000375
 800263c:	2000037a 	.word	0x2000037a
 8002640:	2000037b 	.word	0x2000037b
 8002644:	2000037c 	.word	0x2000037c
 8002648:	2000037d 	.word	0x2000037d

0800264c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b090      	sub	sp, #64	; 0x40
 8002650:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002652:	f107 0318 	add.w	r3, r7, #24
 8002656:	2228      	movs	r2, #40	; 0x28
 8002658:	2100      	movs	r1, #0
 800265a:	4618      	mov	r0, r3
 800265c:	f003 fc3e 	bl	8005edc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002660:	1d3b      	adds	r3, r7, #4
 8002662:	2200      	movs	r2, #0
 8002664:	601a      	str	r2, [r3, #0]
 8002666:	605a      	str	r2, [r3, #4]
 8002668:	609a      	str	r2, [r3, #8]
 800266a:	60da      	str	r2, [r3, #12]
 800266c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800266e:	2301      	movs	r3, #1
 8002670:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002672:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002676:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002678:	2300      	movs	r3, #0
 800267a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800267c:	2301      	movs	r3, #1
 800267e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002680:	2302      	movs	r3, #2
 8002682:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002684:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002688:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800268a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800268e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002690:	f107 0318 	add.w	r3, r7, #24
 8002694:	4618      	mov	r0, r3
 8002696:	f001 fa0b 	bl	8003ab0 <HAL_RCC_OscConfig>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d001      	beq.n	80026a4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80026a0:	f000 f9c8 	bl	8002a34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026a4:	230f      	movs	r3, #15
 80026a6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80026a8:	2302      	movs	r3, #2
 80026aa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026ac:	2300      	movs	r3, #0
 80026ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80026b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80026b6:	2300      	movs	r3, #0
 80026b8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80026ba:	1d3b      	adds	r3, r7, #4
 80026bc:	2102      	movs	r1, #2
 80026be:	4618      	mov	r0, r3
 80026c0:	f001 fc78 	bl	8003fb4 <HAL_RCC_ClockConfig>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <SystemClock_Config+0x82>
  {
    Error_Handler();
 80026ca:	f000 f9b3 	bl	8002a34 <Error_Handler>
  }
}
 80026ce:	bf00      	nop
 80026d0:	3740      	adds	r7, #64	; 0x40
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
	...

080026d8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b08a      	sub	sp, #40	; 0x28
 80026dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026de:	f107 0318 	add.w	r3, r7, #24
 80026e2:	2200      	movs	r2, #0
 80026e4:	601a      	str	r2, [r3, #0]
 80026e6:	605a      	str	r2, [r3, #4]
 80026e8:	609a      	str	r2, [r3, #8]
 80026ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026ec:	f107 0310 	add.w	r3, r7, #16
 80026f0:	2200      	movs	r2, #0
 80026f2:	601a      	str	r2, [r3, #0]
 80026f4:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80026f6:	463b      	mov	r3, r7
 80026f8:	2200      	movs	r2, #0
 80026fa:	601a      	str	r2, [r3, #0]
 80026fc:	605a      	str	r2, [r3, #4]
 80026fe:	609a      	str	r2, [r3, #8]
 8002700:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002702:	4b2d      	ldr	r3, [pc, #180]	; (80027b8 <MX_TIM1_Init+0xe0>)
 8002704:	4a2d      	ldr	r2, [pc, #180]	; (80027bc <MX_TIM1_Init+0xe4>)
 8002706:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8002708:	4b2b      	ldr	r3, [pc, #172]	; (80027b8 <MX_TIM1_Init+0xe0>)
 800270a:	2247      	movs	r2, #71	; 0x47
 800270c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800270e:	4b2a      	ldr	r3, [pc, #168]	; (80027b8 <MX_TIM1_Init+0xe0>)
 8002710:	2200      	movs	r2, #0
 8002712:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002714:	4b28      	ldr	r3, [pc, #160]	; (80027b8 <MX_TIM1_Init+0xe0>)
 8002716:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800271a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800271c:	4b26      	ldr	r3, [pc, #152]	; (80027b8 <MX_TIM1_Init+0xe0>)
 800271e:	2200      	movs	r2, #0
 8002720:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002722:	4b25      	ldr	r3, [pc, #148]	; (80027b8 <MX_TIM1_Init+0xe0>)
 8002724:	2200      	movs	r2, #0
 8002726:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002728:	4b23      	ldr	r3, [pc, #140]	; (80027b8 <MX_TIM1_Init+0xe0>)
 800272a:	2200      	movs	r2, #0
 800272c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800272e:	4822      	ldr	r0, [pc, #136]	; (80027b8 <MX_TIM1_Init+0xe0>)
 8002730:	f001 fdd8 	bl	80042e4 <HAL_TIM_Base_Init>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 800273a:	f000 f97b 	bl	8002a34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800273e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002742:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002744:	f107 0318 	add.w	r3, r7, #24
 8002748:	4619      	mov	r1, r3
 800274a:	481b      	ldr	r0, [pc, #108]	; (80027b8 <MX_TIM1_Init+0xe0>)
 800274c:	f002 f9b0 	bl	8004ab0 <HAL_TIM_ConfigClockSource>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8002756:	f000 f96d 	bl	8002a34 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 800275a:	4817      	ldr	r0, [pc, #92]	; (80027b8 <MX_TIM1_Init+0xe0>)
 800275c:	f001 feae 	bl	80044bc <HAL_TIM_IC_Init>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8002766:	f000 f965 	bl	8002a34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800276a:	2300      	movs	r3, #0
 800276c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800276e:	2300      	movs	r3, #0
 8002770:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002772:	f107 0310 	add.w	r3, r7, #16
 8002776:	4619      	mov	r1, r3
 8002778:	480f      	ldr	r0, [pc, #60]	; (80027b8 <MX_TIM1_Init+0xe0>)
 800277a:	f002 fce7 	bl	800514c <HAL_TIMEx_MasterConfigSynchronization>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d001      	beq.n	8002788 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 8002784:	f000 f956 	bl	8002a34 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002788:	2300      	movs	r3, #0
 800278a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800278c:	2301      	movs	r3, #1
 800278e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002790:	2300      	movs	r3, #0
 8002792:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002794:	2300      	movs	r3, #0
 8002796:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002798:	463b      	mov	r3, r7
 800279a:	2200      	movs	r2, #0
 800279c:	4619      	mov	r1, r3
 800279e:	4806      	ldr	r0, [pc, #24]	; (80027b8 <MX_TIM1_Init+0xe0>)
 80027a0:	f002 f8f2 	bl	8004988 <HAL_TIM_IC_ConfigChannel>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80027aa:	f000 f943 	bl	8002a34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80027ae:	bf00      	nop
 80027b0:	3728      	adds	r7, #40	; 0x28
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	200000b0 	.word	0x200000b0
 80027bc:	40012c00 	.word	0x40012c00

080027c0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b086      	sub	sp, #24
 80027c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027c6:	f107 0308 	add.w	r3, r7, #8
 80027ca:	2200      	movs	r2, #0
 80027cc:	601a      	str	r2, [r3, #0]
 80027ce:	605a      	str	r2, [r3, #4]
 80027d0:	609a      	str	r2, [r3, #8]
 80027d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027d4:	463b      	mov	r3, r7
 80027d6:	2200      	movs	r2, #0
 80027d8:	601a      	str	r2, [r3, #0]
 80027da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80027dc:	4b1d      	ldr	r3, [pc, #116]	; (8002854 <MX_TIM4_Init+0x94>)
 80027de:	4a1e      	ldr	r2, [pc, #120]	; (8002858 <MX_TIM4_Init+0x98>)
 80027e0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7200 - 1;
 80027e2:	4b1c      	ldr	r3, [pc, #112]	; (8002854 <MX_TIM4_Init+0x94>)
 80027e4:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80027e8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027ea:	4b1a      	ldr	r3, [pc, #104]	; (8002854 <MX_TIM4_Init+0x94>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 50000;
 80027f0:	4b18      	ldr	r3, [pc, #96]	; (8002854 <MX_TIM4_Init+0x94>)
 80027f2:	f24c 3250 	movw	r2, #50000	; 0xc350
 80027f6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027f8:	4b16      	ldr	r3, [pc, #88]	; (8002854 <MX_TIM4_Init+0x94>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027fe:	4b15      	ldr	r3, [pc, #84]	; (8002854 <MX_TIM4_Init+0x94>)
 8002800:	2200      	movs	r2, #0
 8002802:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002804:	4813      	ldr	r0, [pc, #76]	; (8002854 <MX_TIM4_Init+0x94>)
 8002806:	f001 fd6d 	bl	80042e4 <HAL_TIM_Base_Init>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d001      	beq.n	8002814 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002810:	f000 f910 	bl	8002a34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002814:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002818:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800281a:	f107 0308 	add.w	r3, r7, #8
 800281e:	4619      	mov	r1, r3
 8002820:	480c      	ldr	r0, [pc, #48]	; (8002854 <MX_TIM4_Init+0x94>)
 8002822:	f002 f945 	bl	8004ab0 <HAL_TIM_ConfigClockSource>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d001      	beq.n	8002830 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 800282c:	f000 f902 	bl	8002a34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002830:	2300      	movs	r3, #0
 8002832:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002834:	2300      	movs	r3, #0
 8002836:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002838:	463b      	mov	r3, r7
 800283a:	4619      	mov	r1, r3
 800283c:	4805      	ldr	r0, [pc, #20]	; (8002854 <MX_TIM4_Init+0x94>)
 800283e:	f002 fc85 	bl	800514c <HAL_TIMEx_MasterConfigSynchronization>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d001      	beq.n	800284c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002848:	f000 f8f4 	bl	8002a34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800284c:	bf00      	nop
 800284e:	3718      	adds	r7, #24
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	200000f8 	.word	0x200000f8
 8002858:	40000800 	.word	0x40000800

0800285c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002860:	4b11      	ldr	r3, [pc, #68]	; (80028a8 <MX_USART1_UART_Init+0x4c>)
 8002862:	4a12      	ldr	r2, [pc, #72]	; (80028ac <MX_USART1_UART_Init+0x50>)
 8002864:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002866:	4b10      	ldr	r3, [pc, #64]	; (80028a8 <MX_USART1_UART_Init+0x4c>)
 8002868:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800286c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800286e:	4b0e      	ldr	r3, [pc, #56]	; (80028a8 <MX_USART1_UART_Init+0x4c>)
 8002870:	2200      	movs	r2, #0
 8002872:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002874:	4b0c      	ldr	r3, [pc, #48]	; (80028a8 <MX_USART1_UART_Init+0x4c>)
 8002876:	2200      	movs	r2, #0
 8002878:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800287a:	4b0b      	ldr	r3, [pc, #44]	; (80028a8 <MX_USART1_UART_Init+0x4c>)
 800287c:	2200      	movs	r2, #0
 800287e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002880:	4b09      	ldr	r3, [pc, #36]	; (80028a8 <MX_USART1_UART_Init+0x4c>)
 8002882:	220c      	movs	r2, #12
 8002884:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002886:	4b08      	ldr	r3, [pc, #32]	; (80028a8 <MX_USART1_UART_Init+0x4c>)
 8002888:	2200      	movs	r2, #0
 800288a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800288c:	4b06      	ldr	r3, [pc, #24]	; (80028a8 <MX_USART1_UART_Init+0x4c>)
 800288e:	2200      	movs	r2, #0
 8002890:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002892:	4805      	ldr	r0, [pc, #20]	; (80028a8 <MX_USART1_UART_Init+0x4c>)
 8002894:	f002 fcca 	bl	800522c <HAL_UART_Init>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d001      	beq.n	80028a2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800289e:	f000 f8c9 	bl	8002a34 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80028a2:	bf00      	nop
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	20000140 	.word	0x20000140
 80028ac:	40013800 	.word	0x40013800

080028b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80028b6:	4b10      	ldr	r3, [pc, #64]	; (80028f8 <MX_DMA_Init+0x48>)
 80028b8:	695b      	ldr	r3, [r3, #20]
 80028ba:	4a0f      	ldr	r2, [pc, #60]	; (80028f8 <MX_DMA_Init+0x48>)
 80028bc:	f043 0301 	orr.w	r3, r3, #1
 80028c0:	6153      	str	r3, [r2, #20]
 80028c2:	4b0d      	ldr	r3, [pc, #52]	; (80028f8 <MX_DMA_Init+0x48>)
 80028c4:	695b      	ldr	r3, [r3, #20]
 80028c6:	f003 0301 	and.w	r3, r3, #1
 80028ca:	607b      	str	r3, [r7, #4]
 80028cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80028ce:	2200      	movs	r2, #0
 80028d0:	2100      	movs	r1, #0
 80028d2:	200e      	movs	r0, #14
 80028d4:	f000 fc4b 	bl	800316e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80028d8:	200e      	movs	r0, #14
 80028da:	f000 fc64 	bl	80031a6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80028de:	2200      	movs	r2, #0
 80028e0:	2100      	movs	r1, #0
 80028e2:	200f      	movs	r0, #15
 80028e4:	f000 fc43 	bl	800316e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80028e8:	200f      	movs	r0, #15
 80028ea:	f000 fc5c 	bl	80031a6 <HAL_NVIC_EnableIRQ>

}
 80028ee:	bf00      	nop
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	40021000 	.word	0x40021000

080028fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b088      	sub	sp, #32
 8002900:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002902:	f107 0310 	add.w	r3, r7, #16
 8002906:	2200      	movs	r2, #0
 8002908:	601a      	str	r2, [r3, #0]
 800290a:	605a      	str	r2, [r3, #4]
 800290c:	609a      	str	r2, [r3, #8]
 800290e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002910:	4b43      	ldr	r3, [pc, #268]	; (8002a20 <MX_GPIO_Init+0x124>)
 8002912:	699b      	ldr	r3, [r3, #24]
 8002914:	4a42      	ldr	r2, [pc, #264]	; (8002a20 <MX_GPIO_Init+0x124>)
 8002916:	f043 0310 	orr.w	r3, r3, #16
 800291a:	6193      	str	r3, [r2, #24]
 800291c:	4b40      	ldr	r3, [pc, #256]	; (8002a20 <MX_GPIO_Init+0x124>)
 800291e:	699b      	ldr	r3, [r3, #24]
 8002920:	f003 0310 	and.w	r3, r3, #16
 8002924:	60fb      	str	r3, [r7, #12]
 8002926:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002928:	4b3d      	ldr	r3, [pc, #244]	; (8002a20 <MX_GPIO_Init+0x124>)
 800292a:	699b      	ldr	r3, [r3, #24]
 800292c:	4a3c      	ldr	r2, [pc, #240]	; (8002a20 <MX_GPIO_Init+0x124>)
 800292e:	f043 0320 	orr.w	r3, r3, #32
 8002932:	6193      	str	r3, [r2, #24]
 8002934:	4b3a      	ldr	r3, [pc, #232]	; (8002a20 <MX_GPIO_Init+0x124>)
 8002936:	699b      	ldr	r3, [r3, #24]
 8002938:	f003 0320 	and.w	r3, r3, #32
 800293c:	60bb      	str	r3, [r7, #8]
 800293e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002940:	4b37      	ldr	r3, [pc, #220]	; (8002a20 <MX_GPIO_Init+0x124>)
 8002942:	699b      	ldr	r3, [r3, #24]
 8002944:	4a36      	ldr	r2, [pc, #216]	; (8002a20 <MX_GPIO_Init+0x124>)
 8002946:	f043 0304 	orr.w	r3, r3, #4
 800294a:	6193      	str	r3, [r2, #24]
 800294c:	4b34      	ldr	r3, [pc, #208]	; (8002a20 <MX_GPIO_Init+0x124>)
 800294e:	699b      	ldr	r3, [r3, #24]
 8002950:	f003 0304 	and.w	r3, r3, #4
 8002954:	607b      	str	r3, [r7, #4]
 8002956:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002958:	4b31      	ldr	r3, [pc, #196]	; (8002a20 <MX_GPIO_Init+0x124>)
 800295a:	699b      	ldr	r3, [r3, #24]
 800295c:	4a30      	ldr	r2, [pc, #192]	; (8002a20 <MX_GPIO_Init+0x124>)
 800295e:	f043 0308 	orr.w	r3, r3, #8
 8002962:	6193      	str	r3, [r2, #24]
 8002964:	4b2e      	ldr	r3, [pc, #184]	; (8002a20 <MX_GPIO_Init+0x124>)
 8002966:	699b      	ldr	r3, [r3, #24]
 8002968:	f003 0308 	and.w	r3, r3, #8
 800296c:	603b      	str	r3, [r7, #0]
 800296e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_SET);
 8002970:	2201      	movs	r2, #1
 8002972:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8002976:	482b      	ldr	r0, [pc, #172]	; (8002a24 <MX_GPIO_Init+0x128>)
 8002978:	f001 f869 	bl	8003a4e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 800297c:	2200      	movs	r2, #0
 800297e:	f640 0178 	movw	r1, #2168	; 0x878
 8002982:	4829      	ldr	r0, [pc, #164]	; (8002a28 <MX_GPIO_Init+0x12c>)
 8002984:	f001 f863 	bl	8003a4e <HAL_GPIO_WritePin>
                          |TRIGGER_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, E_Pin|RS_Pin|DHT11_Pin, GPIO_PIN_RESET);
 8002988:	2200      	movs	r2, #0
 800298a:	f44f 4198 	mov.w	r1, #19456	; 0x4c00
 800298e:	4827      	ldr	r0, [pc, #156]	; (8002a2c <MX_GPIO_Init+0x130>)
 8002990:	f001 f85d 	bl	8003a4e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002994:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002998:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800299a:	2301      	movs	r3, #1
 800299c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800299e:	2300      	movs	r3, #0
 80029a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029a2:	2302      	movs	r3, #2
 80029a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029a6:	f107 0310 	add.w	r3, r7, #16
 80029aa:	4619      	mov	r1, r3
 80029ac:	481d      	ldr	r0, [pc, #116]	; (8002a24 <MX_GPIO_Init+0x128>)
 80029ae:	f000 feb3 	bl	8003718 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 PA5 PA6
                           TRIGGER_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80029b2:	f640 0378 	movw	r3, #2168	; 0x878
 80029b6:	613b      	str	r3, [r7, #16]
                          |TRIGGER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029b8:	2301      	movs	r3, #1
 80029ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029bc:	2300      	movs	r3, #0
 80029be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029c0:	2302      	movs	r3, #2
 80029c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029c4:	f107 0310 	add.w	r3, r7, #16
 80029c8:	4619      	mov	r1, r3
 80029ca:	4817      	ldr	r0, [pc, #92]	; (8002a28 <MX_GPIO_Init+0x12c>)
 80029cc:	f000 fea4 	bl	8003718 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80029d0:	2301      	movs	r3, #1
 80029d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80029d4:	4b16      	ldr	r3, [pc, #88]	; (8002a30 <MX_GPIO_Init+0x134>)
 80029d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d8:	2300      	movs	r3, #0
 80029da:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029dc:	f107 0310 	add.w	r3, r7, #16
 80029e0:	4619      	mov	r1, r3
 80029e2:	4812      	ldr	r0, [pc, #72]	; (8002a2c <MX_GPIO_Init+0x130>)
 80029e4:	f000 fe98 	bl	8003718 <HAL_GPIO_Init>

  /*Configure GPIO pins : E_Pin RS_Pin DHT11_Pin */
  GPIO_InitStruct.Pin = E_Pin|RS_Pin|DHT11_Pin;
 80029e8:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
 80029ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029ee:	2301      	movs	r3, #1
 80029f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f2:	2300      	movs	r3, #0
 80029f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029f6:	2302      	movs	r3, #2
 80029f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029fa:	f107 0310 	add.w	r3, r7, #16
 80029fe:	4619      	mov	r1, r3
 8002a00:	480a      	ldr	r0, [pc, #40]	; (8002a2c <MX_GPIO_Init+0x130>)
 8002a02:	f000 fe89 	bl	8003718 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002a06:	2200      	movs	r2, #0
 8002a08:	2100      	movs	r1, #0
 8002a0a:	2006      	movs	r0, #6
 8002a0c:	f000 fbaf 	bl	800316e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002a10:	2006      	movs	r0, #6
 8002a12:	f000 fbc8 	bl	80031a6 <HAL_NVIC_EnableIRQ>

}
 8002a16:	bf00      	nop
 8002a18:	3720      	adds	r7, #32
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	40021000 	.word	0x40021000
 8002a24:	40011000 	.word	0x40011000
 8002a28:	40010800 	.word	0x40010800
 8002a2c:	40010c00 	.word	0x40010c00
 8002a30:	10210000 	.word	0x10210000

08002a34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a34:	b480      	push	{r7}
 8002a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002a38:	bf00      	nop
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bc80      	pop	{r7}
 8002a3e:	4770      	bx	lr

08002a40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002a46:	4b16      	ldr	r3, [pc, #88]	; (8002aa0 <HAL_MspInit+0x60>)
 8002a48:	699b      	ldr	r3, [r3, #24]
 8002a4a:	4a15      	ldr	r2, [pc, #84]	; (8002aa0 <HAL_MspInit+0x60>)
 8002a4c:	f043 0301 	orr.w	r3, r3, #1
 8002a50:	6193      	str	r3, [r2, #24]
 8002a52:	4b13      	ldr	r3, [pc, #76]	; (8002aa0 <HAL_MspInit+0x60>)
 8002a54:	699b      	ldr	r3, [r3, #24]
 8002a56:	f003 0301 	and.w	r3, r3, #1
 8002a5a:	60bb      	str	r3, [r7, #8]
 8002a5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a5e:	4b10      	ldr	r3, [pc, #64]	; (8002aa0 <HAL_MspInit+0x60>)
 8002a60:	69db      	ldr	r3, [r3, #28]
 8002a62:	4a0f      	ldr	r2, [pc, #60]	; (8002aa0 <HAL_MspInit+0x60>)
 8002a64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a68:	61d3      	str	r3, [r2, #28]
 8002a6a:	4b0d      	ldr	r3, [pc, #52]	; (8002aa0 <HAL_MspInit+0x60>)
 8002a6c:	69db      	ldr	r3, [r3, #28]
 8002a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a72:	607b      	str	r3, [r7, #4]
 8002a74:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8002a76:	2005      	movs	r0, #5
 8002a78:	f000 fb6e 	bl	8003158 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002a7c:	4b09      	ldr	r3, [pc, #36]	; (8002aa4 <HAL_MspInit+0x64>)
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	60fb      	str	r3, [r7, #12]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002a88:	60fb      	str	r3, [r7, #12]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a90:	60fb      	str	r3, [r7, #12]
 8002a92:	4a04      	ldr	r2, [pc, #16]	; (8002aa4 <HAL_MspInit+0x64>)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a98:	bf00      	nop
 8002a9a:	3710      	adds	r7, #16
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	40021000 	.word	0x40021000
 8002aa4:	40010000 	.word	0x40010000

08002aa8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b08a      	sub	sp, #40	; 0x28
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ab0:	f107 0318 	add.w	r3, r7, #24
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	601a      	str	r2, [r3, #0]
 8002ab8:	605a      	str	r2, [r3, #4]
 8002aba:	609a      	str	r2, [r3, #8]
 8002abc:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a33      	ldr	r2, [pc, #204]	; (8002b90 <HAL_TIM_Base_MspInit+0xe8>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d145      	bne.n	8002b54 <HAL_TIM_Base_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002ac8:	4b32      	ldr	r3, [pc, #200]	; (8002b94 <HAL_TIM_Base_MspInit+0xec>)
 8002aca:	699b      	ldr	r3, [r3, #24]
 8002acc:	4a31      	ldr	r2, [pc, #196]	; (8002b94 <HAL_TIM_Base_MspInit+0xec>)
 8002ace:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002ad2:	6193      	str	r3, [r2, #24]
 8002ad4:	4b2f      	ldr	r3, [pc, #188]	; (8002b94 <HAL_TIM_Base_MspInit+0xec>)
 8002ad6:	699b      	ldr	r3, [r3, #24]
 8002ad8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002adc:	617b      	str	r3, [r7, #20]
 8002ade:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ae0:	4b2c      	ldr	r3, [pc, #176]	; (8002b94 <HAL_TIM_Base_MspInit+0xec>)
 8002ae2:	699b      	ldr	r3, [r3, #24]
 8002ae4:	4a2b      	ldr	r2, [pc, #172]	; (8002b94 <HAL_TIM_Base_MspInit+0xec>)
 8002ae6:	f043 0304 	orr.w	r3, r3, #4
 8002aea:	6193      	str	r3, [r2, #24]
 8002aec:	4b29      	ldr	r3, [pc, #164]	; (8002b94 <HAL_TIM_Base_MspInit+0xec>)
 8002aee:	699b      	ldr	r3, [r3, #24]
 8002af0:	f003 0304 	and.w	r3, r3, #4
 8002af4:	613b      	str	r3, [r7, #16]
 8002af6:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002af8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002afc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002afe:	2300      	movs	r3, #0
 8002b00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b02:	2300      	movs	r3, #0
 8002b04:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b06:	f107 0318 	add.w	r3, r7, #24
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	4822      	ldr	r0, [pc, #136]	; (8002b98 <HAL_TIM_Base_MspInit+0xf0>)
 8002b0e:	f000 fe03 	bl	8003718 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8002b12:	2200      	movs	r2, #0
 8002b14:	2100      	movs	r1, #0
 8002b16:	2018      	movs	r0, #24
 8002b18:	f000 fb29 	bl	800316e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8002b1c:	2018      	movs	r0, #24
 8002b1e:	f000 fb42 	bl	80031a6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8002b22:	2200      	movs	r2, #0
 8002b24:	2100      	movs	r1, #0
 8002b26:	2019      	movs	r0, #25
 8002b28:	f000 fb21 	bl	800316e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002b2c:	2019      	movs	r0, #25
 8002b2e:	f000 fb3a 	bl	80031a6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8002b32:	2200      	movs	r2, #0
 8002b34:	2100      	movs	r1, #0
 8002b36:	201a      	movs	r0, #26
 8002b38:	f000 fb19 	bl	800316e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8002b3c:	201a      	movs	r0, #26
 8002b3e:	f000 fb32 	bl	80031a6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 1, 0);
 8002b42:	2200      	movs	r2, #0
 8002b44:	2101      	movs	r1, #1
 8002b46:	201b      	movs	r0, #27
 8002b48:	f000 fb11 	bl	800316e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002b4c:	201b      	movs	r0, #27
 8002b4e:	f000 fb2a 	bl	80031a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002b52:	e018      	b.n	8002b86 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM4)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a10      	ldr	r2, [pc, #64]	; (8002b9c <HAL_TIM_Base_MspInit+0xf4>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d113      	bne.n	8002b86 <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002b5e:	4b0d      	ldr	r3, [pc, #52]	; (8002b94 <HAL_TIM_Base_MspInit+0xec>)
 8002b60:	69db      	ldr	r3, [r3, #28]
 8002b62:	4a0c      	ldr	r2, [pc, #48]	; (8002b94 <HAL_TIM_Base_MspInit+0xec>)
 8002b64:	f043 0304 	orr.w	r3, r3, #4
 8002b68:	61d3      	str	r3, [r2, #28]
 8002b6a:	4b0a      	ldr	r3, [pc, #40]	; (8002b94 <HAL_TIM_Base_MspInit+0xec>)
 8002b6c:	69db      	ldr	r3, [r3, #28]
 8002b6e:	f003 0304 	and.w	r3, r3, #4
 8002b72:	60fb      	str	r3, [r7, #12]
 8002b74:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 2, 0);
 8002b76:	2200      	movs	r2, #0
 8002b78:	2102      	movs	r1, #2
 8002b7a:	201e      	movs	r0, #30
 8002b7c:	f000 faf7 	bl	800316e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002b80:	201e      	movs	r0, #30
 8002b82:	f000 fb10 	bl	80031a6 <HAL_NVIC_EnableIRQ>
}
 8002b86:	bf00      	nop
 8002b88:	3728      	adds	r7, #40	; 0x28
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	40012c00 	.word	0x40012c00
 8002b94:	40021000 	.word	0x40021000
 8002b98:	40010800 	.word	0x40010800
 8002b9c:	40000800 	.word	0x40000800

08002ba0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b088      	sub	sp, #32
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ba8:	f107 0310 	add.w	r3, r7, #16
 8002bac:	2200      	movs	r2, #0
 8002bae:	601a      	str	r2, [r3, #0]
 8002bb0:	605a      	str	r2, [r3, #4]
 8002bb2:	609a      	str	r2, [r3, #8]
 8002bb4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a47      	ldr	r2, [pc, #284]	; (8002cd8 <HAL_UART_MspInit+0x138>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	f040 8086 	bne.w	8002cce <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002bc2:	4b46      	ldr	r3, [pc, #280]	; (8002cdc <HAL_UART_MspInit+0x13c>)
 8002bc4:	699b      	ldr	r3, [r3, #24]
 8002bc6:	4a45      	ldr	r2, [pc, #276]	; (8002cdc <HAL_UART_MspInit+0x13c>)
 8002bc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bcc:	6193      	str	r3, [r2, #24]
 8002bce:	4b43      	ldr	r3, [pc, #268]	; (8002cdc <HAL_UART_MspInit+0x13c>)
 8002bd0:	699b      	ldr	r3, [r3, #24]
 8002bd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bd6:	60fb      	str	r3, [r7, #12]
 8002bd8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bda:	4b40      	ldr	r3, [pc, #256]	; (8002cdc <HAL_UART_MspInit+0x13c>)
 8002bdc:	699b      	ldr	r3, [r3, #24]
 8002bde:	4a3f      	ldr	r2, [pc, #252]	; (8002cdc <HAL_UART_MspInit+0x13c>)
 8002be0:	f043 0304 	orr.w	r3, r3, #4
 8002be4:	6193      	str	r3, [r2, #24]
 8002be6:	4b3d      	ldr	r3, [pc, #244]	; (8002cdc <HAL_UART_MspInit+0x13c>)
 8002be8:	699b      	ldr	r3, [r3, #24]
 8002bea:	f003 0304 	and.w	r3, r3, #4
 8002bee:	60bb      	str	r3, [r7, #8]
 8002bf0:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002bf2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002bf6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bf8:	2302      	movs	r3, #2
 8002bfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c00:	f107 0310 	add.w	r3, r7, #16
 8002c04:	4619      	mov	r1, r3
 8002c06:	4836      	ldr	r0, [pc, #216]	; (8002ce0 <HAL_UART_MspInit+0x140>)
 8002c08:	f000 fd86 	bl	8003718 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002c0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c10:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c12:	2300      	movs	r3, #0
 8002c14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c16:	2300      	movs	r3, #0
 8002c18:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c1a:	f107 0310 	add.w	r3, r7, #16
 8002c1e:	4619      	mov	r1, r3
 8002c20:	482f      	ldr	r0, [pc, #188]	; (8002ce0 <HAL_UART_MspInit+0x140>)
 8002c22:	f000 fd79 	bl	8003718 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002c26:	4b2f      	ldr	r3, [pc, #188]	; (8002ce4 <HAL_UART_MspInit+0x144>)
 8002c28:	4a2f      	ldr	r2, [pc, #188]	; (8002ce8 <HAL_UART_MspInit+0x148>)
 8002c2a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c2c:	4b2d      	ldr	r3, [pc, #180]	; (8002ce4 <HAL_UART_MspInit+0x144>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c32:	4b2c      	ldr	r3, [pc, #176]	; (8002ce4 <HAL_UART_MspInit+0x144>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002c38:	4b2a      	ldr	r3, [pc, #168]	; (8002ce4 <HAL_UART_MspInit+0x144>)
 8002c3a:	2280      	movs	r2, #128	; 0x80
 8002c3c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c3e:	4b29      	ldr	r3, [pc, #164]	; (8002ce4 <HAL_UART_MspInit+0x144>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c44:	4b27      	ldr	r3, [pc, #156]	; (8002ce4 <HAL_UART_MspInit+0x144>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002c4a:	4b26      	ldr	r3, [pc, #152]	; (8002ce4 <HAL_UART_MspInit+0x144>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002c50:	4b24      	ldr	r3, [pc, #144]	; (8002ce4 <HAL_UART_MspInit+0x144>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002c56:	4823      	ldr	r0, [pc, #140]	; (8002ce4 <HAL_UART_MspInit+0x144>)
 8002c58:	f000 fac0 	bl	80031dc <HAL_DMA_Init>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d001      	beq.n	8002c66 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8002c62:	f7ff fee7 	bl	8002a34 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a1e      	ldr	r2, [pc, #120]	; (8002ce4 <HAL_UART_MspInit+0x144>)
 8002c6a:	639a      	str	r2, [r3, #56]	; 0x38
 8002c6c:	4a1d      	ldr	r2, [pc, #116]	; (8002ce4 <HAL_UART_MspInit+0x144>)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8002c72:	4b1e      	ldr	r3, [pc, #120]	; (8002cec <HAL_UART_MspInit+0x14c>)
 8002c74:	4a1e      	ldr	r2, [pc, #120]	; (8002cf0 <HAL_UART_MspInit+0x150>)
 8002c76:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c78:	4b1c      	ldr	r3, [pc, #112]	; (8002cec <HAL_UART_MspInit+0x14c>)
 8002c7a:	2210      	movs	r2, #16
 8002c7c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c7e:	4b1b      	ldr	r3, [pc, #108]	; (8002cec <HAL_UART_MspInit+0x14c>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002c84:	4b19      	ldr	r3, [pc, #100]	; (8002cec <HAL_UART_MspInit+0x14c>)
 8002c86:	2280      	movs	r2, #128	; 0x80
 8002c88:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c8a:	4b18      	ldr	r3, [pc, #96]	; (8002cec <HAL_UART_MspInit+0x14c>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c90:	4b16      	ldr	r3, [pc, #88]	; (8002cec <HAL_UART_MspInit+0x14c>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002c96:	4b15      	ldr	r3, [pc, #84]	; (8002cec <HAL_UART_MspInit+0x14c>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002c9c:	4b13      	ldr	r3, [pc, #76]	; (8002cec <HAL_UART_MspInit+0x14c>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002ca2:	4812      	ldr	r0, [pc, #72]	; (8002cec <HAL_UART_MspInit+0x14c>)
 8002ca4:	f000 fa9a 	bl	80031dc <HAL_DMA_Init>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d001      	beq.n	8002cb2 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 8002cae:	f7ff fec1 	bl	8002a34 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a0d      	ldr	r2, [pc, #52]	; (8002cec <HAL_UART_MspInit+0x14c>)
 8002cb6:	635a      	str	r2, [r3, #52]	; 0x34
 8002cb8:	4a0c      	ldr	r2, [pc, #48]	; (8002cec <HAL_UART_MspInit+0x14c>)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	2100      	movs	r1, #0
 8002cc2:	2025      	movs	r0, #37	; 0x25
 8002cc4:	f000 fa53 	bl	800316e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002cc8:	2025      	movs	r0, #37	; 0x25
 8002cca:	f000 fa6c 	bl	80031a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002cce:	bf00      	nop
 8002cd0:	3720      	adds	r7, #32
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	40013800 	.word	0x40013800
 8002cdc:	40021000 	.word	0x40021000
 8002ce0:	40010800 	.word	0x40010800
 8002ce4:	20000184 	.word	0x20000184
 8002ce8:	40020058 	.word	0x40020058
 8002cec:	200001c8 	.word	0x200001c8
 8002cf0:	40020044 	.word	0x40020044

08002cf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002cf8:	e7fe      	b.n	8002cf8 <NMI_Handler+0x4>

08002cfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cfa:	b480      	push	{r7}
 8002cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002cfe:	e7fe      	b.n	8002cfe <HardFault_Handler+0x4>

08002d00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d00:	b480      	push	{r7}
 8002d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d04:	e7fe      	b.n	8002d04 <MemManage_Handler+0x4>

08002d06 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d06:	b480      	push	{r7}
 8002d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d0a:	e7fe      	b.n	8002d0a <BusFault_Handler+0x4>

08002d0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d10:	e7fe      	b.n	8002d10 <UsageFault_Handler+0x4>

08002d12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d12:	b480      	push	{r7}
 8002d14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d16:	bf00      	nop
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bc80      	pop	{r7}
 8002d1c:	4770      	bx	lr

08002d1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d1e:	b480      	push	{r7}
 8002d20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d22:	bf00      	nop
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bc80      	pop	{r7}
 8002d28:	4770      	bx	lr

08002d2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d2a:	b480      	push	{r7}
 8002d2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d2e:	bf00      	nop
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bc80      	pop	{r7}
 8002d34:	4770      	bx	lr

08002d36 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d36:	b580      	push	{r7, lr}
 8002d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d3a:	f000 f901 	bl	8002f40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d3e:	bf00      	nop
 8002d40:	bd80      	pop	{r7, pc}

08002d42 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002d42:	b580      	push	{r7, lr}
 8002d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002d46:	2001      	movs	r0, #1
 8002d48:	f000 fe9a 	bl	8003a80 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002d4c:	bf00      	nop
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002d54:	4802      	ldr	r0, [pc, #8]	; (8002d60 <DMA1_Channel4_IRQHandler+0x10>)
 8002d56:	f000 fbab 	bl	80034b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002d5a:	bf00      	nop
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	200001c8 	.word	0x200001c8

08002d64 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002d68:	4802      	ldr	r0, [pc, #8]	; (8002d74 <DMA1_Channel5_IRQHandler+0x10>)
 8002d6a:	f000 fba1 	bl	80034b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002d6e:	bf00      	nop
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	20000184 	.word	0x20000184

08002d78 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002d7c:	4802      	ldr	r0, [pc, #8]	; (8002d88 <TIM1_BRK_IRQHandler+0x10>)
 8002d7e:	f001 fcfb 	bl	8004778 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8002d82:	bf00      	nop
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	200000b0 	.word	0x200000b0

08002d8c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002d90:	4802      	ldr	r0, [pc, #8]	; (8002d9c <TIM1_UP_IRQHandler+0x10>)
 8002d92:	f001 fcf1 	bl	8004778 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002d96:	bf00      	nop
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	200000b0 	.word	0x200000b0

08002da0 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002da4:	4802      	ldr	r0, [pc, #8]	; (8002db0 <TIM1_TRG_COM_IRQHandler+0x10>)
 8002da6:	f001 fce7 	bl	8004778 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8002daa:	bf00      	nop
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	200000b0 	.word	0x200000b0

08002db4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002db8:	4802      	ldr	r0, [pc, #8]	; (8002dc4 <TIM1_CC_IRQHandler+0x10>)
 8002dba:	f001 fcdd 	bl	8004778 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002dbe:	bf00      	nop
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	200000b0 	.word	0x200000b0

08002dc8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002dcc:	4802      	ldr	r0, [pc, #8]	; (8002dd8 <TIM4_IRQHandler+0x10>)
 8002dce:	f001 fcd3 	bl	8004778 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002dd2:	bf00      	nop
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	200000f8 	.word	0x200000f8

08002ddc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002de0:	4802      	ldr	r0, [pc, #8]	; (8002dec <USART1_IRQHandler+0x10>)
 8002de2:	f002 fb2d 	bl	8005440 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002de6:	bf00      	nop
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	20000140 	.word	0x20000140

08002df0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b086      	sub	sp, #24
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002df8:	4a14      	ldr	r2, [pc, #80]	; (8002e4c <_sbrk+0x5c>)
 8002dfa:	4b15      	ldr	r3, [pc, #84]	; (8002e50 <_sbrk+0x60>)
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e04:	4b13      	ldr	r3, [pc, #76]	; (8002e54 <_sbrk+0x64>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d102      	bne.n	8002e12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e0c:	4b11      	ldr	r3, [pc, #68]	; (8002e54 <_sbrk+0x64>)
 8002e0e:	4a12      	ldr	r2, [pc, #72]	; (8002e58 <_sbrk+0x68>)
 8002e10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e12:	4b10      	ldr	r3, [pc, #64]	; (8002e54 <_sbrk+0x64>)
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4413      	add	r3, r2
 8002e1a:	693a      	ldr	r2, [r7, #16]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d207      	bcs.n	8002e30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e20:	f003 f824 	bl	8005e6c <__errno>
 8002e24:	4603      	mov	r3, r0
 8002e26:	220c      	movs	r2, #12
 8002e28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e2a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e2e:	e009      	b.n	8002e44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e30:	4b08      	ldr	r3, [pc, #32]	; (8002e54 <_sbrk+0x64>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e36:	4b07      	ldr	r3, [pc, #28]	; (8002e54 <_sbrk+0x64>)
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4413      	add	r3, r2
 8002e3e:	4a05      	ldr	r2, [pc, #20]	; (8002e54 <_sbrk+0x64>)
 8002e40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e42:	68fb      	ldr	r3, [r7, #12]
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3718      	adds	r7, #24
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	20005000 	.word	0x20005000
 8002e50:	00000400 	.word	0x00000400
 8002e54:	20000484 	.word	0x20000484
 8002e58:	200004a0 	.word	0x200004a0

08002e5c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e60:	bf00      	nop
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bc80      	pop	{r7}
 8002e66:	4770      	bx	lr

08002e68 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e68:	480c      	ldr	r0, [pc, #48]	; (8002e9c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002e6a:	490d      	ldr	r1, [pc, #52]	; (8002ea0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002e6c:	4a0d      	ldr	r2, [pc, #52]	; (8002ea4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002e6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e70:	e002      	b.n	8002e78 <LoopCopyDataInit>

08002e72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e76:	3304      	adds	r3, #4

08002e78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e7c:	d3f9      	bcc.n	8002e72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e7e:	4a0a      	ldr	r2, [pc, #40]	; (8002ea8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002e80:	4c0a      	ldr	r4, [pc, #40]	; (8002eac <LoopFillZerobss+0x22>)
  movs r3, #0
 8002e82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e84:	e001      	b.n	8002e8a <LoopFillZerobss>

08002e86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e88:	3204      	adds	r2, #4

08002e8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e8c:	d3fb      	bcc.n	8002e86 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002e8e:	f7ff ffe5 	bl	8002e5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e92:	f002 fff1 	bl	8005e78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002e96:	f7ff f959 	bl	800214c <main>
  bx lr
 8002e9a:	4770      	bx	lr
  ldr r0, =_sdata
 8002e9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ea0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002ea4:	08006994 	.word	0x08006994
  ldr r2, =_sbss
 8002ea8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002eac:	2000049c 	.word	0x2000049c

08002eb0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002eb0:	e7fe      	b.n	8002eb0 <ADC1_2_IRQHandler>
	...

08002eb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002eb8:	4b08      	ldr	r3, [pc, #32]	; (8002edc <HAL_Init+0x28>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a07      	ldr	r2, [pc, #28]	; (8002edc <HAL_Init+0x28>)
 8002ebe:	f043 0310 	orr.w	r3, r3, #16
 8002ec2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ec4:	2003      	movs	r0, #3
 8002ec6:	f000 f947 	bl	8003158 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002eca:	2000      	movs	r0, #0
 8002ecc:	f000 f808 	bl	8002ee0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ed0:	f7ff fdb6 	bl	8002a40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	40022000 	.word	0x40022000

08002ee0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ee8:	4b12      	ldr	r3, [pc, #72]	; (8002f34 <HAL_InitTick+0x54>)
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	4b12      	ldr	r3, [pc, #72]	; (8002f38 <HAL_InitTick+0x58>)
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ef6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002efe:	4618      	mov	r0, r3
 8002f00:	f000 f95f 	bl	80031c2 <HAL_SYSTICK_Config>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d001      	beq.n	8002f0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e00e      	b.n	8002f2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2b0f      	cmp	r3, #15
 8002f12:	d80a      	bhi.n	8002f2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f14:	2200      	movs	r2, #0
 8002f16:	6879      	ldr	r1, [r7, #4]
 8002f18:	f04f 30ff 	mov.w	r0, #4294967295
 8002f1c:	f000 f927 	bl	800316e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f20:	4a06      	ldr	r2, [pc, #24]	; (8002f3c <HAL_InitTick+0x5c>)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f26:	2300      	movs	r3, #0
 8002f28:	e000      	b.n	8002f2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3708      	adds	r7, #8
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	20000004 	.word	0x20000004
 8002f38:	2000000c 	.word	0x2000000c
 8002f3c:	20000008 	.word	0x20000008

08002f40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f40:	b480      	push	{r7}
 8002f42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f44:	4b05      	ldr	r3, [pc, #20]	; (8002f5c <HAL_IncTick+0x1c>)
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	461a      	mov	r2, r3
 8002f4a:	4b05      	ldr	r3, [pc, #20]	; (8002f60 <HAL_IncTick+0x20>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4413      	add	r3, r2
 8002f50:	4a03      	ldr	r2, [pc, #12]	; (8002f60 <HAL_IncTick+0x20>)
 8002f52:	6013      	str	r3, [r2, #0]
}
 8002f54:	bf00      	nop
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bc80      	pop	{r7}
 8002f5a:	4770      	bx	lr
 8002f5c:	2000000c 	.word	0x2000000c
 8002f60:	20000488 	.word	0x20000488

08002f64 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f64:	b480      	push	{r7}
 8002f66:	af00      	add	r7, sp, #0
  return uwTick;
 8002f68:	4b02      	ldr	r3, [pc, #8]	; (8002f74 <HAL_GetTick+0x10>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bc80      	pop	{r7}
 8002f72:	4770      	bx	lr
 8002f74:	20000488 	.word	0x20000488

08002f78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f80:	f7ff fff0 	bl	8002f64 <HAL_GetTick>
 8002f84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f90:	d005      	beq.n	8002f9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f92:	4b0a      	ldr	r3, [pc, #40]	; (8002fbc <HAL_Delay+0x44>)
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	461a      	mov	r2, r3
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	4413      	add	r3, r2
 8002f9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002f9e:	bf00      	nop
 8002fa0:	f7ff ffe0 	bl	8002f64 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	68fa      	ldr	r2, [r7, #12]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d8f7      	bhi.n	8002fa0 <HAL_Delay+0x28>
  {
  }
}
 8002fb0:	bf00      	nop
 8002fb2:	bf00      	nop
 8002fb4:	3710      	adds	r7, #16
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	2000000c 	.word	0x2000000c

08002fc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b085      	sub	sp, #20
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f003 0307 	and.w	r3, r3, #7
 8002fce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fd0:	4b0c      	ldr	r3, [pc, #48]	; (8003004 <__NVIC_SetPriorityGrouping+0x44>)
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fd6:	68ba      	ldr	r2, [r7, #8]
 8002fd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002fdc:	4013      	ands	r3, r2
 8002fde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fe8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002fec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ff0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ff2:	4a04      	ldr	r2, [pc, #16]	; (8003004 <__NVIC_SetPriorityGrouping+0x44>)
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	60d3      	str	r3, [r2, #12]
}
 8002ff8:	bf00      	nop
 8002ffa:	3714      	adds	r7, #20
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bc80      	pop	{r7}
 8003000:	4770      	bx	lr
 8003002:	bf00      	nop
 8003004:	e000ed00 	.word	0xe000ed00

08003008 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003008:	b480      	push	{r7}
 800300a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800300c:	4b04      	ldr	r3, [pc, #16]	; (8003020 <__NVIC_GetPriorityGrouping+0x18>)
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	0a1b      	lsrs	r3, r3, #8
 8003012:	f003 0307 	and.w	r3, r3, #7
}
 8003016:	4618      	mov	r0, r3
 8003018:	46bd      	mov	sp, r7
 800301a:	bc80      	pop	{r7}
 800301c:	4770      	bx	lr
 800301e:	bf00      	nop
 8003020:	e000ed00 	.word	0xe000ed00

08003024 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	4603      	mov	r3, r0
 800302c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800302e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003032:	2b00      	cmp	r3, #0
 8003034:	db0b      	blt.n	800304e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003036:	79fb      	ldrb	r3, [r7, #7]
 8003038:	f003 021f 	and.w	r2, r3, #31
 800303c:	4906      	ldr	r1, [pc, #24]	; (8003058 <__NVIC_EnableIRQ+0x34>)
 800303e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003042:	095b      	lsrs	r3, r3, #5
 8003044:	2001      	movs	r0, #1
 8003046:	fa00 f202 	lsl.w	r2, r0, r2
 800304a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800304e:	bf00      	nop
 8003050:	370c      	adds	r7, #12
 8003052:	46bd      	mov	sp, r7
 8003054:	bc80      	pop	{r7}
 8003056:	4770      	bx	lr
 8003058:	e000e100 	.word	0xe000e100

0800305c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	4603      	mov	r3, r0
 8003064:	6039      	str	r1, [r7, #0]
 8003066:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003068:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800306c:	2b00      	cmp	r3, #0
 800306e:	db0a      	blt.n	8003086 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	b2da      	uxtb	r2, r3
 8003074:	490c      	ldr	r1, [pc, #48]	; (80030a8 <__NVIC_SetPriority+0x4c>)
 8003076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800307a:	0112      	lsls	r2, r2, #4
 800307c:	b2d2      	uxtb	r2, r2
 800307e:	440b      	add	r3, r1
 8003080:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003084:	e00a      	b.n	800309c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	b2da      	uxtb	r2, r3
 800308a:	4908      	ldr	r1, [pc, #32]	; (80030ac <__NVIC_SetPriority+0x50>)
 800308c:	79fb      	ldrb	r3, [r7, #7]
 800308e:	f003 030f 	and.w	r3, r3, #15
 8003092:	3b04      	subs	r3, #4
 8003094:	0112      	lsls	r2, r2, #4
 8003096:	b2d2      	uxtb	r2, r2
 8003098:	440b      	add	r3, r1
 800309a:	761a      	strb	r2, [r3, #24]
}
 800309c:	bf00      	nop
 800309e:	370c      	adds	r7, #12
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bc80      	pop	{r7}
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	e000e100 	.word	0xe000e100
 80030ac:	e000ed00 	.word	0xe000ed00

080030b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b089      	sub	sp, #36	; 0x24
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	60b9      	str	r1, [r7, #8]
 80030ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f003 0307 	and.w	r3, r3, #7
 80030c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	f1c3 0307 	rsb	r3, r3, #7
 80030ca:	2b04      	cmp	r3, #4
 80030cc:	bf28      	it	cs
 80030ce:	2304      	movcs	r3, #4
 80030d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	3304      	adds	r3, #4
 80030d6:	2b06      	cmp	r3, #6
 80030d8:	d902      	bls.n	80030e0 <NVIC_EncodePriority+0x30>
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	3b03      	subs	r3, #3
 80030de:	e000      	b.n	80030e2 <NVIC_EncodePriority+0x32>
 80030e0:	2300      	movs	r3, #0
 80030e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030e4:	f04f 32ff 	mov.w	r2, #4294967295
 80030e8:	69bb      	ldr	r3, [r7, #24]
 80030ea:	fa02 f303 	lsl.w	r3, r2, r3
 80030ee:	43da      	mvns	r2, r3
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	401a      	ands	r2, r3
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030f8:	f04f 31ff 	mov.w	r1, #4294967295
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003102:	43d9      	mvns	r1, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003108:	4313      	orrs	r3, r2
         );
}
 800310a:	4618      	mov	r0, r3
 800310c:	3724      	adds	r7, #36	; 0x24
 800310e:	46bd      	mov	sp, r7
 8003110:	bc80      	pop	{r7}
 8003112:	4770      	bx	lr

08003114 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	3b01      	subs	r3, #1
 8003120:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003124:	d301      	bcc.n	800312a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003126:	2301      	movs	r3, #1
 8003128:	e00f      	b.n	800314a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800312a:	4a0a      	ldr	r2, [pc, #40]	; (8003154 <SysTick_Config+0x40>)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	3b01      	subs	r3, #1
 8003130:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003132:	210f      	movs	r1, #15
 8003134:	f04f 30ff 	mov.w	r0, #4294967295
 8003138:	f7ff ff90 	bl	800305c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800313c:	4b05      	ldr	r3, [pc, #20]	; (8003154 <SysTick_Config+0x40>)
 800313e:	2200      	movs	r2, #0
 8003140:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003142:	4b04      	ldr	r3, [pc, #16]	; (8003154 <SysTick_Config+0x40>)
 8003144:	2207      	movs	r2, #7
 8003146:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003148:	2300      	movs	r3, #0
}
 800314a:	4618      	mov	r0, r3
 800314c:	3708      	adds	r7, #8
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	e000e010 	.word	0xe000e010

08003158 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f7ff ff2d 	bl	8002fc0 <__NVIC_SetPriorityGrouping>
}
 8003166:	bf00      	nop
 8003168:	3708      	adds	r7, #8
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}

0800316e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800316e:	b580      	push	{r7, lr}
 8003170:	b086      	sub	sp, #24
 8003172:	af00      	add	r7, sp, #0
 8003174:	4603      	mov	r3, r0
 8003176:	60b9      	str	r1, [r7, #8]
 8003178:	607a      	str	r2, [r7, #4]
 800317a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800317c:	2300      	movs	r3, #0
 800317e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003180:	f7ff ff42 	bl	8003008 <__NVIC_GetPriorityGrouping>
 8003184:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	68b9      	ldr	r1, [r7, #8]
 800318a:	6978      	ldr	r0, [r7, #20]
 800318c:	f7ff ff90 	bl	80030b0 <NVIC_EncodePriority>
 8003190:	4602      	mov	r2, r0
 8003192:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003196:	4611      	mov	r1, r2
 8003198:	4618      	mov	r0, r3
 800319a:	f7ff ff5f 	bl	800305c <__NVIC_SetPriority>
}
 800319e:	bf00      	nop
 80031a0:	3718      	adds	r7, #24
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}

080031a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031a6:	b580      	push	{r7, lr}
 80031a8:	b082      	sub	sp, #8
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	4603      	mov	r3, r0
 80031ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031b4:	4618      	mov	r0, r3
 80031b6:	f7ff ff35 	bl	8003024 <__NVIC_EnableIRQ>
}
 80031ba:	bf00      	nop
 80031bc:	3708      	adds	r7, #8
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}

080031c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031c2:	b580      	push	{r7, lr}
 80031c4:	b082      	sub	sp, #8
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f7ff ffa2 	bl	8003114 <SysTick_Config>
 80031d0:	4603      	mov	r3, r0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3708      	adds	r7, #8
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
	...

080031dc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80031dc:	b480      	push	{r7}
 80031de:	b085      	sub	sp, #20
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80031e4:	2300      	movs	r3, #0
 80031e6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d101      	bne.n	80031f2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e043      	b.n	800327a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	461a      	mov	r2, r3
 80031f8:	4b22      	ldr	r3, [pc, #136]	; (8003284 <HAL_DMA_Init+0xa8>)
 80031fa:	4413      	add	r3, r2
 80031fc:	4a22      	ldr	r2, [pc, #136]	; (8003288 <HAL_DMA_Init+0xac>)
 80031fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003202:	091b      	lsrs	r3, r3, #4
 8003204:	009a      	lsls	r2, r3, #2
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4a1f      	ldr	r2, [pc, #124]	; (800328c <HAL_DMA_Init+0xb0>)
 800320e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2202      	movs	r2, #2
 8003214:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003226:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800322a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003234:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003240:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	695b      	ldr	r3, [r3, #20]
 8003246:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800324c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	69db      	ldr	r3, [r3, #28]
 8003252:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003254:	68fa      	ldr	r2, [r7, #12]
 8003256:	4313      	orrs	r3, r2
 8003258:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	68fa      	ldr	r2, [r7, #12]
 8003260:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003278:	2300      	movs	r3, #0
}
 800327a:	4618      	mov	r0, r3
 800327c:	3714      	adds	r7, #20
 800327e:	46bd      	mov	sp, r7
 8003280:	bc80      	pop	{r7}
 8003282:	4770      	bx	lr
 8003284:	bffdfff8 	.word	0xbffdfff8
 8003288:	cccccccd 	.word	0xcccccccd
 800328c:	40020000 	.word	0x40020000

08003290 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b086      	sub	sp, #24
 8003294:	af00      	add	r7, sp, #0
 8003296:	60f8      	str	r0, [r7, #12]
 8003298:	60b9      	str	r1, [r7, #8]
 800329a:	607a      	str	r2, [r7, #4]
 800329c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800329e:	2300      	movs	r3, #0
 80032a0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d101      	bne.n	80032b0 <HAL_DMA_Start_IT+0x20>
 80032ac:	2302      	movs	r3, #2
 80032ae:	e04a      	b.n	8003346 <HAL_DMA_Start_IT+0xb6>
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d13a      	bne.n	8003338 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2202      	movs	r2, #2
 80032c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2200      	movs	r2, #0
 80032ce:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f022 0201 	bic.w	r2, r2, #1
 80032de:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	68b9      	ldr	r1, [r7, #8]
 80032e6:	68f8      	ldr	r0, [r7, #12]
 80032e8:	f000 f9e8 	bl	80036bc <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d008      	beq.n	8003306 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f042 020e 	orr.w	r2, r2, #14
 8003302:	601a      	str	r2, [r3, #0]
 8003304:	e00f      	b.n	8003326 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f022 0204 	bic.w	r2, r2, #4
 8003314:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f042 020a 	orr.w	r2, r2, #10
 8003324:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f042 0201 	orr.w	r2, r2, #1
 8003334:	601a      	str	r2, [r3, #0]
 8003336:	e005      	b.n	8003344 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2200      	movs	r2, #0
 800333c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003340:	2302      	movs	r3, #2
 8003342:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003344:	7dfb      	ldrb	r3, [r7, #23]
}
 8003346:	4618      	mov	r0, r3
 8003348:	3718      	adds	r7, #24
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}

0800334e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800334e:	b480      	push	{r7}
 8003350:	b085      	sub	sp, #20
 8003352:	af00      	add	r7, sp, #0
 8003354:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003356:	2300      	movs	r3, #0
 8003358:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003360:	2b02      	cmp	r3, #2
 8003362:	d008      	beq.n	8003376 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2204      	movs	r2, #4
 8003368:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e020      	b.n	80033b8 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f022 020e 	bic.w	r2, r2, #14
 8003384:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f022 0201 	bic.w	r2, r2, #1
 8003394:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800339e:	2101      	movs	r1, #1
 80033a0:	fa01 f202 	lsl.w	r2, r1, r2
 80033a4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2201      	movs	r2, #1
 80033aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2200      	movs	r2, #0
 80033b2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80033b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3714      	adds	r7, #20
 80033bc:	46bd      	mov	sp, r7
 80033be:	bc80      	pop	{r7}
 80033c0:	4770      	bx	lr
	...

080033c4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b084      	sub	sp, #16
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033cc:	2300      	movs	r3, #0
 80033ce:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d005      	beq.n	80033e6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2204      	movs	r2, #4
 80033de:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	73fb      	strb	r3, [r7, #15]
 80033e4:	e051      	b.n	800348a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f022 020e 	bic.w	r2, r2, #14
 80033f4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f022 0201 	bic.w	r2, r2, #1
 8003404:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a22      	ldr	r2, [pc, #136]	; (8003494 <HAL_DMA_Abort_IT+0xd0>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d029      	beq.n	8003464 <HAL_DMA_Abort_IT+0xa0>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a20      	ldr	r2, [pc, #128]	; (8003498 <HAL_DMA_Abort_IT+0xd4>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d022      	beq.n	8003460 <HAL_DMA_Abort_IT+0x9c>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a1f      	ldr	r2, [pc, #124]	; (800349c <HAL_DMA_Abort_IT+0xd8>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d01a      	beq.n	800345a <HAL_DMA_Abort_IT+0x96>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a1d      	ldr	r2, [pc, #116]	; (80034a0 <HAL_DMA_Abort_IT+0xdc>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d012      	beq.n	8003454 <HAL_DMA_Abort_IT+0x90>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a1c      	ldr	r2, [pc, #112]	; (80034a4 <HAL_DMA_Abort_IT+0xe0>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d00a      	beq.n	800344e <HAL_DMA_Abort_IT+0x8a>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a1a      	ldr	r2, [pc, #104]	; (80034a8 <HAL_DMA_Abort_IT+0xe4>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d102      	bne.n	8003448 <HAL_DMA_Abort_IT+0x84>
 8003442:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003446:	e00e      	b.n	8003466 <HAL_DMA_Abort_IT+0xa2>
 8003448:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800344c:	e00b      	b.n	8003466 <HAL_DMA_Abort_IT+0xa2>
 800344e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003452:	e008      	b.n	8003466 <HAL_DMA_Abort_IT+0xa2>
 8003454:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003458:	e005      	b.n	8003466 <HAL_DMA_Abort_IT+0xa2>
 800345a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800345e:	e002      	b.n	8003466 <HAL_DMA_Abort_IT+0xa2>
 8003460:	2310      	movs	r3, #16
 8003462:	e000      	b.n	8003466 <HAL_DMA_Abort_IT+0xa2>
 8003464:	2301      	movs	r3, #1
 8003466:	4a11      	ldr	r2, [pc, #68]	; (80034ac <HAL_DMA_Abort_IT+0xe8>)
 8003468:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2201      	movs	r2, #1
 800346e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800347e:	2b00      	cmp	r3, #0
 8003480:	d003      	beq.n	800348a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	4798      	blx	r3
    } 
  }
  return status;
 800348a:	7bfb      	ldrb	r3, [r7, #15]
}
 800348c:	4618      	mov	r0, r3
 800348e:	3710      	adds	r7, #16
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}
 8003494:	40020008 	.word	0x40020008
 8003498:	4002001c 	.word	0x4002001c
 800349c:	40020030 	.word	0x40020030
 80034a0:	40020044 	.word	0x40020044
 80034a4:	40020058 	.word	0x40020058
 80034a8:	4002006c 	.word	0x4002006c
 80034ac:	40020000 	.word	0x40020000

080034b0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034cc:	2204      	movs	r2, #4
 80034ce:	409a      	lsls	r2, r3
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	4013      	ands	r3, r2
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d04f      	beq.n	8003578 <HAL_DMA_IRQHandler+0xc8>
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	f003 0304 	and.w	r3, r3, #4
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d04a      	beq.n	8003578 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0320 	and.w	r3, r3, #32
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d107      	bne.n	8003500 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f022 0204 	bic.w	r2, r2, #4
 80034fe:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a66      	ldr	r2, [pc, #408]	; (80036a0 <HAL_DMA_IRQHandler+0x1f0>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d029      	beq.n	800355e <HAL_DMA_IRQHandler+0xae>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a65      	ldr	r2, [pc, #404]	; (80036a4 <HAL_DMA_IRQHandler+0x1f4>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d022      	beq.n	800355a <HAL_DMA_IRQHandler+0xaa>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a63      	ldr	r2, [pc, #396]	; (80036a8 <HAL_DMA_IRQHandler+0x1f8>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d01a      	beq.n	8003554 <HAL_DMA_IRQHandler+0xa4>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a62      	ldr	r2, [pc, #392]	; (80036ac <HAL_DMA_IRQHandler+0x1fc>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d012      	beq.n	800354e <HAL_DMA_IRQHandler+0x9e>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a60      	ldr	r2, [pc, #384]	; (80036b0 <HAL_DMA_IRQHandler+0x200>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d00a      	beq.n	8003548 <HAL_DMA_IRQHandler+0x98>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a5f      	ldr	r2, [pc, #380]	; (80036b4 <HAL_DMA_IRQHandler+0x204>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d102      	bne.n	8003542 <HAL_DMA_IRQHandler+0x92>
 800353c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003540:	e00e      	b.n	8003560 <HAL_DMA_IRQHandler+0xb0>
 8003542:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003546:	e00b      	b.n	8003560 <HAL_DMA_IRQHandler+0xb0>
 8003548:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800354c:	e008      	b.n	8003560 <HAL_DMA_IRQHandler+0xb0>
 800354e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003552:	e005      	b.n	8003560 <HAL_DMA_IRQHandler+0xb0>
 8003554:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003558:	e002      	b.n	8003560 <HAL_DMA_IRQHandler+0xb0>
 800355a:	2340      	movs	r3, #64	; 0x40
 800355c:	e000      	b.n	8003560 <HAL_DMA_IRQHandler+0xb0>
 800355e:	2304      	movs	r3, #4
 8003560:	4a55      	ldr	r2, [pc, #340]	; (80036b8 <HAL_DMA_IRQHandler+0x208>)
 8003562:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003568:	2b00      	cmp	r3, #0
 800356a:	f000 8094 	beq.w	8003696 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003576:	e08e      	b.n	8003696 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357c:	2202      	movs	r2, #2
 800357e:	409a      	lsls	r2, r3
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	4013      	ands	r3, r2
 8003584:	2b00      	cmp	r3, #0
 8003586:	d056      	beq.n	8003636 <HAL_DMA_IRQHandler+0x186>
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	f003 0302 	and.w	r3, r3, #2
 800358e:	2b00      	cmp	r3, #0
 8003590:	d051      	beq.n	8003636 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0320 	and.w	r3, r3, #32
 800359c:	2b00      	cmp	r3, #0
 800359e:	d10b      	bne.n	80035b8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f022 020a 	bic.w	r2, r2, #10
 80035ae:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a38      	ldr	r2, [pc, #224]	; (80036a0 <HAL_DMA_IRQHandler+0x1f0>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d029      	beq.n	8003616 <HAL_DMA_IRQHandler+0x166>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a37      	ldr	r2, [pc, #220]	; (80036a4 <HAL_DMA_IRQHandler+0x1f4>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d022      	beq.n	8003612 <HAL_DMA_IRQHandler+0x162>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a35      	ldr	r2, [pc, #212]	; (80036a8 <HAL_DMA_IRQHandler+0x1f8>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d01a      	beq.n	800360c <HAL_DMA_IRQHandler+0x15c>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a34      	ldr	r2, [pc, #208]	; (80036ac <HAL_DMA_IRQHandler+0x1fc>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d012      	beq.n	8003606 <HAL_DMA_IRQHandler+0x156>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a32      	ldr	r2, [pc, #200]	; (80036b0 <HAL_DMA_IRQHandler+0x200>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d00a      	beq.n	8003600 <HAL_DMA_IRQHandler+0x150>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a31      	ldr	r2, [pc, #196]	; (80036b4 <HAL_DMA_IRQHandler+0x204>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d102      	bne.n	80035fa <HAL_DMA_IRQHandler+0x14a>
 80035f4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80035f8:	e00e      	b.n	8003618 <HAL_DMA_IRQHandler+0x168>
 80035fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035fe:	e00b      	b.n	8003618 <HAL_DMA_IRQHandler+0x168>
 8003600:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003604:	e008      	b.n	8003618 <HAL_DMA_IRQHandler+0x168>
 8003606:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800360a:	e005      	b.n	8003618 <HAL_DMA_IRQHandler+0x168>
 800360c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003610:	e002      	b.n	8003618 <HAL_DMA_IRQHandler+0x168>
 8003612:	2320      	movs	r3, #32
 8003614:	e000      	b.n	8003618 <HAL_DMA_IRQHandler+0x168>
 8003616:	2302      	movs	r3, #2
 8003618:	4a27      	ldr	r2, [pc, #156]	; (80036b8 <HAL_DMA_IRQHandler+0x208>)
 800361a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003628:	2b00      	cmp	r3, #0
 800362a:	d034      	beq.n	8003696 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003634:	e02f      	b.n	8003696 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363a:	2208      	movs	r2, #8
 800363c:	409a      	lsls	r2, r3
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	4013      	ands	r3, r2
 8003642:	2b00      	cmp	r3, #0
 8003644:	d028      	beq.n	8003698 <HAL_DMA_IRQHandler+0x1e8>
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	f003 0308 	and.w	r3, r3, #8
 800364c:	2b00      	cmp	r3, #0
 800364e:	d023      	beq.n	8003698 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f022 020e 	bic.w	r2, r2, #14
 800365e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003668:	2101      	movs	r1, #1
 800366a:	fa01 f202 	lsl.w	r2, r1, r2
 800366e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2201      	movs	r2, #1
 8003674:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2201      	movs	r2, #1
 800367a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800368a:	2b00      	cmp	r3, #0
 800368c:	d004      	beq.n	8003698 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	4798      	blx	r3
    }
  }
  return;
 8003696:	bf00      	nop
 8003698:	bf00      	nop
}
 800369a:	3710      	adds	r7, #16
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	40020008 	.word	0x40020008
 80036a4:	4002001c 	.word	0x4002001c
 80036a8:	40020030 	.word	0x40020030
 80036ac:	40020044 	.word	0x40020044
 80036b0:	40020058 	.word	0x40020058
 80036b4:	4002006c 	.word	0x4002006c
 80036b8:	40020000 	.word	0x40020000

080036bc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036bc:	b480      	push	{r7}
 80036be:	b085      	sub	sp, #20
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	60b9      	str	r1, [r7, #8]
 80036c6:	607a      	str	r2, [r7, #4]
 80036c8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036d2:	2101      	movs	r1, #1
 80036d4:	fa01 f202 	lsl.w	r2, r1, r2
 80036d8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	683a      	ldr	r2, [r7, #0]
 80036e0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	2b10      	cmp	r3, #16
 80036e8:	d108      	bne.n	80036fc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	68ba      	ldr	r2, [r7, #8]
 80036f8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80036fa:	e007      	b.n	800370c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	68ba      	ldr	r2, [r7, #8]
 8003702:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	60da      	str	r2, [r3, #12]
}
 800370c:	bf00      	nop
 800370e:	3714      	adds	r7, #20
 8003710:	46bd      	mov	sp, r7
 8003712:	bc80      	pop	{r7}
 8003714:	4770      	bx	lr
	...

08003718 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003718:	b480      	push	{r7}
 800371a:	b08b      	sub	sp, #44	; 0x2c
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003722:	2300      	movs	r3, #0
 8003724:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003726:	2300      	movs	r3, #0
 8003728:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800372a:	e169      	b.n	8003a00 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800372c:	2201      	movs	r2, #1
 800372e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003730:	fa02 f303 	lsl.w	r3, r2, r3
 8003734:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	69fa      	ldr	r2, [r7, #28]
 800373c:	4013      	ands	r3, r2
 800373e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003740:	69ba      	ldr	r2, [r7, #24]
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	429a      	cmp	r2, r3
 8003746:	f040 8158 	bne.w	80039fa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	4a9a      	ldr	r2, [pc, #616]	; (80039b8 <HAL_GPIO_Init+0x2a0>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d05e      	beq.n	8003812 <HAL_GPIO_Init+0xfa>
 8003754:	4a98      	ldr	r2, [pc, #608]	; (80039b8 <HAL_GPIO_Init+0x2a0>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d875      	bhi.n	8003846 <HAL_GPIO_Init+0x12e>
 800375a:	4a98      	ldr	r2, [pc, #608]	; (80039bc <HAL_GPIO_Init+0x2a4>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d058      	beq.n	8003812 <HAL_GPIO_Init+0xfa>
 8003760:	4a96      	ldr	r2, [pc, #600]	; (80039bc <HAL_GPIO_Init+0x2a4>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d86f      	bhi.n	8003846 <HAL_GPIO_Init+0x12e>
 8003766:	4a96      	ldr	r2, [pc, #600]	; (80039c0 <HAL_GPIO_Init+0x2a8>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d052      	beq.n	8003812 <HAL_GPIO_Init+0xfa>
 800376c:	4a94      	ldr	r2, [pc, #592]	; (80039c0 <HAL_GPIO_Init+0x2a8>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d869      	bhi.n	8003846 <HAL_GPIO_Init+0x12e>
 8003772:	4a94      	ldr	r2, [pc, #592]	; (80039c4 <HAL_GPIO_Init+0x2ac>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d04c      	beq.n	8003812 <HAL_GPIO_Init+0xfa>
 8003778:	4a92      	ldr	r2, [pc, #584]	; (80039c4 <HAL_GPIO_Init+0x2ac>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d863      	bhi.n	8003846 <HAL_GPIO_Init+0x12e>
 800377e:	4a92      	ldr	r2, [pc, #584]	; (80039c8 <HAL_GPIO_Init+0x2b0>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d046      	beq.n	8003812 <HAL_GPIO_Init+0xfa>
 8003784:	4a90      	ldr	r2, [pc, #576]	; (80039c8 <HAL_GPIO_Init+0x2b0>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d85d      	bhi.n	8003846 <HAL_GPIO_Init+0x12e>
 800378a:	2b12      	cmp	r3, #18
 800378c:	d82a      	bhi.n	80037e4 <HAL_GPIO_Init+0xcc>
 800378e:	2b12      	cmp	r3, #18
 8003790:	d859      	bhi.n	8003846 <HAL_GPIO_Init+0x12e>
 8003792:	a201      	add	r2, pc, #4	; (adr r2, 8003798 <HAL_GPIO_Init+0x80>)
 8003794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003798:	08003813 	.word	0x08003813
 800379c:	080037ed 	.word	0x080037ed
 80037a0:	080037ff 	.word	0x080037ff
 80037a4:	08003841 	.word	0x08003841
 80037a8:	08003847 	.word	0x08003847
 80037ac:	08003847 	.word	0x08003847
 80037b0:	08003847 	.word	0x08003847
 80037b4:	08003847 	.word	0x08003847
 80037b8:	08003847 	.word	0x08003847
 80037bc:	08003847 	.word	0x08003847
 80037c0:	08003847 	.word	0x08003847
 80037c4:	08003847 	.word	0x08003847
 80037c8:	08003847 	.word	0x08003847
 80037cc:	08003847 	.word	0x08003847
 80037d0:	08003847 	.word	0x08003847
 80037d4:	08003847 	.word	0x08003847
 80037d8:	08003847 	.word	0x08003847
 80037dc:	080037f5 	.word	0x080037f5
 80037e0:	08003809 	.word	0x08003809
 80037e4:	4a79      	ldr	r2, [pc, #484]	; (80039cc <HAL_GPIO_Init+0x2b4>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d013      	beq.n	8003812 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80037ea:	e02c      	b.n	8003846 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	623b      	str	r3, [r7, #32]
          break;
 80037f2:	e029      	b.n	8003848 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	3304      	adds	r3, #4
 80037fa:	623b      	str	r3, [r7, #32]
          break;
 80037fc:	e024      	b.n	8003848 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	3308      	adds	r3, #8
 8003804:	623b      	str	r3, [r7, #32]
          break;
 8003806:	e01f      	b.n	8003848 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	330c      	adds	r3, #12
 800380e:	623b      	str	r3, [r7, #32]
          break;
 8003810:	e01a      	b.n	8003848 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d102      	bne.n	8003820 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800381a:	2304      	movs	r3, #4
 800381c:	623b      	str	r3, [r7, #32]
          break;
 800381e:	e013      	b.n	8003848 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	2b01      	cmp	r3, #1
 8003826:	d105      	bne.n	8003834 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003828:	2308      	movs	r3, #8
 800382a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	69fa      	ldr	r2, [r7, #28]
 8003830:	611a      	str	r2, [r3, #16]
          break;
 8003832:	e009      	b.n	8003848 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003834:	2308      	movs	r3, #8
 8003836:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	69fa      	ldr	r2, [r7, #28]
 800383c:	615a      	str	r2, [r3, #20]
          break;
 800383e:	e003      	b.n	8003848 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003840:	2300      	movs	r3, #0
 8003842:	623b      	str	r3, [r7, #32]
          break;
 8003844:	e000      	b.n	8003848 <HAL_GPIO_Init+0x130>
          break;
 8003846:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003848:	69bb      	ldr	r3, [r7, #24]
 800384a:	2bff      	cmp	r3, #255	; 0xff
 800384c:	d801      	bhi.n	8003852 <HAL_GPIO_Init+0x13a>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	e001      	b.n	8003856 <HAL_GPIO_Init+0x13e>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	3304      	adds	r3, #4
 8003856:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003858:	69bb      	ldr	r3, [r7, #24]
 800385a:	2bff      	cmp	r3, #255	; 0xff
 800385c:	d802      	bhi.n	8003864 <HAL_GPIO_Init+0x14c>
 800385e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	e002      	b.n	800386a <HAL_GPIO_Init+0x152>
 8003864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003866:	3b08      	subs	r3, #8
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	210f      	movs	r1, #15
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	fa01 f303 	lsl.w	r3, r1, r3
 8003878:	43db      	mvns	r3, r3
 800387a:	401a      	ands	r2, r3
 800387c:	6a39      	ldr	r1, [r7, #32]
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	fa01 f303 	lsl.w	r3, r1, r3
 8003884:	431a      	orrs	r2, r3
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003892:	2b00      	cmp	r3, #0
 8003894:	f000 80b1 	beq.w	80039fa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003898:	4b4d      	ldr	r3, [pc, #308]	; (80039d0 <HAL_GPIO_Init+0x2b8>)
 800389a:	699b      	ldr	r3, [r3, #24]
 800389c:	4a4c      	ldr	r2, [pc, #304]	; (80039d0 <HAL_GPIO_Init+0x2b8>)
 800389e:	f043 0301 	orr.w	r3, r3, #1
 80038a2:	6193      	str	r3, [r2, #24]
 80038a4:	4b4a      	ldr	r3, [pc, #296]	; (80039d0 <HAL_GPIO_Init+0x2b8>)
 80038a6:	699b      	ldr	r3, [r3, #24]
 80038a8:	f003 0301 	and.w	r3, r3, #1
 80038ac:	60bb      	str	r3, [r7, #8]
 80038ae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80038b0:	4a48      	ldr	r2, [pc, #288]	; (80039d4 <HAL_GPIO_Init+0x2bc>)
 80038b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b4:	089b      	lsrs	r3, r3, #2
 80038b6:	3302      	adds	r3, #2
 80038b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038bc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80038be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c0:	f003 0303 	and.w	r3, r3, #3
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	220f      	movs	r2, #15
 80038c8:	fa02 f303 	lsl.w	r3, r2, r3
 80038cc:	43db      	mvns	r3, r3
 80038ce:	68fa      	ldr	r2, [r7, #12]
 80038d0:	4013      	ands	r3, r2
 80038d2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	4a40      	ldr	r2, [pc, #256]	; (80039d8 <HAL_GPIO_Init+0x2c0>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d013      	beq.n	8003904 <HAL_GPIO_Init+0x1ec>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	4a3f      	ldr	r2, [pc, #252]	; (80039dc <HAL_GPIO_Init+0x2c4>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d00d      	beq.n	8003900 <HAL_GPIO_Init+0x1e8>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	4a3e      	ldr	r2, [pc, #248]	; (80039e0 <HAL_GPIO_Init+0x2c8>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d007      	beq.n	80038fc <HAL_GPIO_Init+0x1e4>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4a3d      	ldr	r2, [pc, #244]	; (80039e4 <HAL_GPIO_Init+0x2cc>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d101      	bne.n	80038f8 <HAL_GPIO_Init+0x1e0>
 80038f4:	2303      	movs	r3, #3
 80038f6:	e006      	b.n	8003906 <HAL_GPIO_Init+0x1ee>
 80038f8:	2304      	movs	r3, #4
 80038fa:	e004      	b.n	8003906 <HAL_GPIO_Init+0x1ee>
 80038fc:	2302      	movs	r3, #2
 80038fe:	e002      	b.n	8003906 <HAL_GPIO_Init+0x1ee>
 8003900:	2301      	movs	r3, #1
 8003902:	e000      	b.n	8003906 <HAL_GPIO_Init+0x1ee>
 8003904:	2300      	movs	r3, #0
 8003906:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003908:	f002 0203 	and.w	r2, r2, #3
 800390c:	0092      	lsls	r2, r2, #2
 800390e:	4093      	lsls	r3, r2
 8003910:	68fa      	ldr	r2, [r7, #12]
 8003912:	4313      	orrs	r3, r2
 8003914:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003916:	492f      	ldr	r1, [pc, #188]	; (80039d4 <HAL_GPIO_Init+0x2bc>)
 8003918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391a:	089b      	lsrs	r3, r3, #2
 800391c:	3302      	adds	r3, #2
 800391e:	68fa      	ldr	r2, [r7, #12]
 8003920:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800392c:	2b00      	cmp	r3, #0
 800392e:	d006      	beq.n	800393e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003930:	4b2d      	ldr	r3, [pc, #180]	; (80039e8 <HAL_GPIO_Init+0x2d0>)
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	492c      	ldr	r1, [pc, #176]	; (80039e8 <HAL_GPIO_Init+0x2d0>)
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	4313      	orrs	r3, r2
 800393a:	600b      	str	r3, [r1, #0]
 800393c:	e006      	b.n	800394c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800393e:	4b2a      	ldr	r3, [pc, #168]	; (80039e8 <HAL_GPIO_Init+0x2d0>)
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	69bb      	ldr	r3, [r7, #24]
 8003944:	43db      	mvns	r3, r3
 8003946:	4928      	ldr	r1, [pc, #160]	; (80039e8 <HAL_GPIO_Init+0x2d0>)
 8003948:	4013      	ands	r3, r2
 800394a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d006      	beq.n	8003966 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003958:	4b23      	ldr	r3, [pc, #140]	; (80039e8 <HAL_GPIO_Init+0x2d0>)
 800395a:	685a      	ldr	r2, [r3, #4]
 800395c:	4922      	ldr	r1, [pc, #136]	; (80039e8 <HAL_GPIO_Init+0x2d0>)
 800395e:	69bb      	ldr	r3, [r7, #24]
 8003960:	4313      	orrs	r3, r2
 8003962:	604b      	str	r3, [r1, #4]
 8003964:	e006      	b.n	8003974 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003966:	4b20      	ldr	r3, [pc, #128]	; (80039e8 <HAL_GPIO_Init+0x2d0>)
 8003968:	685a      	ldr	r2, [r3, #4]
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	43db      	mvns	r3, r3
 800396e:	491e      	ldr	r1, [pc, #120]	; (80039e8 <HAL_GPIO_Init+0x2d0>)
 8003970:	4013      	ands	r3, r2
 8003972:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d006      	beq.n	800398e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003980:	4b19      	ldr	r3, [pc, #100]	; (80039e8 <HAL_GPIO_Init+0x2d0>)
 8003982:	689a      	ldr	r2, [r3, #8]
 8003984:	4918      	ldr	r1, [pc, #96]	; (80039e8 <HAL_GPIO_Init+0x2d0>)
 8003986:	69bb      	ldr	r3, [r7, #24]
 8003988:	4313      	orrs	r3, r2
 800398a:	608b      	str	r3, [r1, #8]
 800398c:	e006      	b.n	800399c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800398e:	4b16      	ldr	r3, [pc, #88]	; (80039e8 <HAL_GPIO_Init+0x2d0>)
 8003990:	689a      	ldr	r2, [r3, #8]
 8003992:	69bb      	ldr	r3, [r7, #24]
 8003994:	43db      	mvns	r3, r3
 8003996:	4914      	ldr	r1, [pc, #80]	; (80039e8 <HAL_GPIO_Init+0x2d0>)
 8003998:	4013      	ands	r3, r2
 800399a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d021      	beq.n	80039ec <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80039a8:	4b0f      	ldr	r3, [pc, #60]	; (80039e8 <HAL_GPIO_Init+0x2d0>)
 80039aa:	68da      	ldr	r2, [r3, #12]
 80039ac:	490e      	ldr	r1, [pc, #56]	; (80039e8 <HAL_GPIO_Init+0x2d0>)
 80039ae:	69bb      	ldr	r3, [r7, #24]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	60cb      	str	r3, [r1, #12]
 80039b4:	e021      	b.n	80039fa <HAL_GPIO_Init+0x2e2>
 80039b6:	bf00      	nop
 80039b8:	10320000 	.word	0x10320000
 80039bc:	10310000 	.word	0x10310000
 80039c0:	10220000 	.word	0x10220000
 80039c4:	10210000 	.word	0x10210000
 80039c8:	10120000 	.word	0x10120000
 80039cc:	10110000 	.word	0x10110000
 80039d0:	40021000 	.word	0x40021000
 80039d4:	40010000 	.word	0x40010000
 80039d8:	40010800 	.word	0x40010800
 80039dc:	40010c00 	.word	0x40010c00
 80039e0:	40011000 	.word	0x40011000
 80039e4:	40011400 	.word	0x40011400
 80039e8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80039ec:	4b0b      	ldr	r3, [pc, #44]	; (8003a1c <HAL_GPIO_Init+0x304>)
 80039ee:	68da      	ldr	r2, [r3, #12]
 80039f0:	69bb      	ldr	r3, [r7, #24]
 80039f2:	43db      	mvns	r3, r3
 80039f4:	4909      	ldr	r1, [pc, #36]	; (8003a1c <HAL_GPIO_Init+0x304>)
 80039f6:	4013      	ands	r3, r2
 80039f8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80039fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fc:	3301      	adds	r3, #1
 80039fe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a06:	fa22 f303 	lsr.w	r3, r2, r3
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	f47f ae8e 	bne.w	800372c <HAL_GPIO_Init+0x14>
  }
}
 8003a10:	bf00      	nop
 8003a12:	bf00      	nop
 8003a14:	372c      	adds	r7, #44	; 0x2c
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bc80      	pop	{r7}
 8003a1a:	4770      	bx	lr
 8003a1c:	40010400 	.word	0x40010400

08003a20 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b085      	sub	sp, #20
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	460b      	mov	r3, r1
 8003a2a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	689a      	ldr	r2, [r3, #8]
 8003a30:	887b      	ldrh	r3, [r7, #2]
 8003a32:	4013      	ands	r3, r2
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d002      	beq.n	8003a3e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	73fb      	strb	r3, [r7, #15]
 8003a3c:	e001      	b.n	8003a42 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a42:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3714      	adds	r7, #20
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bc80      	pop	{r7}
 8003a4c:	4770      	bx	lr

08003a4e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a4e:	b480      	push	{r7}
 8003a50:	b083      	sub	sp, #12
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	6078      	str	r0, [r7, #4]
 8003a56:	460b      	mov	r3, r1
 8003a58:	807b      	strh	r3, [r7, #2]
 8003a5a:	4613      	mov	r3, r2
 8003a5c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003a5e:	787b      	ldrb	r3, [r7, #1]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d003      	beq.n	8003a6c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a64:	887a      	ldrh	r2, [r7, #2]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003a6a:	e003      	b.n	8003a74 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003a6c:	887b      	ldrh	r3, [r7, #2]
 8003a6e:	041a      	lsls	r2, r3, #16
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	611a      	str	r2, [r3, #16]
}
 8003a74:	bf00      	nop
 8003a76:	370c      	adds	r7, #12
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bc80      	pop	{r7}
 8003a7c:	4770      	bx	lr
	...

08003a80 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b082      	sub	sp, #8
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	4603      	mov	r3, r0
 8003a88:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003a8a:	4b08      	ldr	r3, [pc, #32]	; (8003aac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a8c:	695a      	ldr	r2, [r3, #20]
 8003a8e:	88fb      	ldrh	r3, [r7, #6]
 8003a90:	4013      	ands	r3, r2
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d006      	beq.n	8003aa4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003a96:	4a05      	ldr	r2, [pc, #20]	; (8003aac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a98:	88fb      	ldrh	r3, [r7, #6]
 8003a9a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003a9c:	88fb      	ldrh	r3, [r7, #6]
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f7fd fb1e 	bl	80010e0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003aa4:	bf00      	nop
 8003aa6:	3708      	adds	r7, #8
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}
 8003aac:	40010400 	.word	0x40010400

08003ab0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b086      	sub	sp, #24
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d101      	bne.n	8003ac2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e272      	b.n	8003fa8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0301 	and.w	r3, r3, #1
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	f000 8087 	beq.w	8003bde <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ad0:	4b92      	ldr	r3, [pc, #584]	; (8003d1c <HAL_RCC_OscConfig+0x26c>)
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	f003 030c 	and.w	r3, r3, #12
 8003ad8:	2b04      	cmp	r3, #4
 8003ada:	d00c      	beq.n	8003af6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003adc:	4b8f      	ldr	r3, [pc, #572]	; (8003d1c <HAL_RCC_OscConfig+0x26c>)
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f003 030c 	and.w	r3, r3, #12
 8003ae4:	2b08      	cmp	r3, #8
 8003ae6:	d112      	bne.n	8003b0e <HAL_RCC_OscConfig+0x5e>
 8003ae8:	4b8c      	ldr	r3, [pc, #560]	; (8003d1c <HAL_RCC_OscConfig+0x26c>)
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003af0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003af4:	d10b      	bne.n	8003b0e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003af6:	4b89      	ldr	r3, [pc, #548]	; (8003d1c <HAL_RCC_OscConfig+0x26c>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d06c      	beq.n	8003bdc <HAL_RCC_OscConfig+0x12c>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d168      	bne.n	8003bdc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e24c      	b.n	8003fa8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b16:	d106      	bne.n	8003b26 <HAL_RCC_OscConfig+0x76>
 8003b18:	4b80      	ldr	r3, [pc, #512]	; (8003d1c <HAL_RCC_OscConfig+0x26c>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a7f      	ldr	r2, [pc, #508]	; (8003d1c <HAL_RCC_OscConfig+0x26c>)
 8003b1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b22:	6013      	str	r3, [r2, #0]
 8003b24:	e02e      	b.n	8003b84 <HAL_RCC_OscConfig+0xd4>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d10c      	bne.n	8003b48 <HAL_RCC_OscConfig+0x98>
 8003b2e:	4b7b      	ldr	r3, [pc, #492]	; (8003d1c <HAL_RCC_OscConfig+0x26c>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a7a      	ldr	r2, [pc, #488]	; (8003d1c <HAL_RCC_OscConfig+0x26c>)
 8003b34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b38:	6013      	str	r3, [r2, #0]
 8003b3a:	4b78      	ldr	r3, [pc, #480]	; (8003d1c <HAL_RCC_OscConfig+0x26c>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a77      	ldr	r2, [pc, #476]	; (8003d1c <HAL_RCC_OscConfig+0x26c>)
 8003b40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b44:	6013      	str	r3, [r2, #0]
 8003b46:	e01d      	b.n	8003b84 <HAL_RCC_OscConfig+0xd4>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b50:	d10c      	bne.n	8003b6c <HAL_RCC_OscConfig+0xbc>
 8003b52:	4b72      	ldr	r3, [pc, #456]	; (8003d1c <HAL_RCC_OscConfig+0x26c>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a71      	ldr	r2, [pc, #452]	; (8003d1c <HAL_RCC_OscConfig+0x26c>)
 8003b58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b5c:	6013      	str	r3, [r2, #0]
 8003b5e:	4b6f      	ldr	r3, [pc, #444]	; (8003d1c <HAL_RCC_OscConfig+0x26c>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a6e      	ldr	r2, [pc, #440]	; (8003d1c <HAL_RCC_OscConfig+0x26c>)
 8003b64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b68:	6013      	str	r3, [r2, #0]
 8003b6a:	e00b      	b.n	8003b84 <HAL_RCC_OscConfig+0xd4>
 8003b6c:	4b6b      	ldr	r3, [pc, #428]	; (8003d1c <HAL_RCC_OscConfig+0x26c>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a6a      	ldr	r2, [pc, #424]	; (8003d1c <HAL_RCC_OscConfig+0x26c>)
 8003b72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b76:	6013      	str	r3, [r2, #0]
 8003b78:	4b68      	ldr	r3, [pc, #416]	; (8003d1c <HAL_RCC_OscConfig+0x26c>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a67      	ldr	r2, [pc, #412]	; (8003d1c <HAL_RCC_OscConfig+0x26c>)
 8003b7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b82:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d013      	beq.n	8003bb4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b8c:	f7ff f9ea 	bl	8002f64 <HAL_GetTick>
 8003b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b92:	e008      	b.n	8003ba6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b94:	f7ff f9e6 	bl	8002f64 <HAL_GetTick>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	2b64      	cmp	r3, #100	; 0x64
 8003ba0:	d901      	bls.n	8003ba6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e200      	b.n	8003fa8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ba6:	4b5d      	ldr	r3, [pc, #372]	; (8003d1c <HAL_RCC_OscConfig+0x26c>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d0f0      	beq.n	8003b94 <HAL_RCC_OscConfig+0xe4>
 8003bb2:	e014      	b.n	8003bde <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bb4:	f7ff f9d6 	bl	8002f64 <HAL_GetTick>
 8003bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bba:	e008      	b.n	8003bce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bbc:	f7ff f9d2 	bl	8002f64 <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	2b64      	cmp	r3, #100	; 0x64
 8003bc8:	d901      	bls.n	8003bce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e1ec      	b.n	8003fa8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bce:	4b53      	ldr	r3, [pc, #332]	; (8003d1c <HAL_RCC_OscConfig+0x26c>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d1f0      	bne.n	8003bbc <HAL_RCC_OscConfig+0x10c>
 8003bda:	e000      	b.n	8003bde <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0302 	and.w	r3, r3, #2
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d063      	beq.n	8003cb2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003bea:	4b4c      	ldr	r3, [pc, #304]	; (8003d1c <HAL_RCC_OscConfig+0x26c>)
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	f003 030c 	and.w	r3, r3, #12
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d00b      	beq.n	8003c0e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003bf6:	4b49      	ldr	r3, [pc, #292]	; (8003d1c <HAL_RCC_OscConfig+0x26c>)
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	f003 030c 	and.w	r3, r3, #12
 8003bfe:	2b08      	cmp	r3, #8
 8003c00:	d11c      	bne.n	8003c3c <HAL_RCC_OscConfig+0x18c>
 8003c02:	4b46      	ldr	r3, [pc, #280]	; (8003d1c <HAL_RCC_OscConfig+0x26c>)
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d116      	bne.n	8003c3c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c0e:	4b43      	ldr	r3, [pc, #268]	; (8003d1c <HAL_RCC_OscConfig+0x26c>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0302 	and.w	r3, r3, #2
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d005      	beq.n	8003c26 <HAL_RCC_OscConfig+0x176>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d001      	beq.n	8003c26 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e1c0      	b.n	8003fa8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c26:	4b3d      	ldr	r3, [pc, #244]	; (8003d1c <HAL_RCC_OscConfig+0x26c>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	695b      	ldr	r3, [r3, #20]
 8003c32:	00db      	lsls	r3, r3, #3
 8003c34:	4939      	ldr	r1, [pc, #228]	; (8003d1c <HAL_RCC_OscConfig+0x26c>)
 8003c36:	4313      	orrs	r3, r2
 8003c38:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c3a:	e03a      	b.n	8003cb2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	691b      	ldr	r3, [r3, #16]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d020      	beq.n	8003c86 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c44:	4b36      	ldr	r3, [pc, #216]	; (8003d20 <HAL_RCC_OscConfig+0x270>)
 8003c46:	2201      	movs	r2, #1
 8003c48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c4a:	f7ff f98b 	bl	8002f64 <HAL_GetTick>
 8003c4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c50:	e008      	b.n	8003c64 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c52:	f7ff f987 	bl	8002f64 <HAL_GetTick>
 8003c56:	4602      	mov	r2, r0
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	2b02      	cmp	r3, #2
 8003c5e:	d901      	bls.n	8003c64 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003c60:	2303      	movs	r3, #3
 8003c62:	e1a1      	b.n	8003fa8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c64:	4b2d      	ldr	r3, [pc, #180]	; (8003d1c <HAL_RCC_OscConfig+0x26c>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0302 	and.w	r3, r3, #2
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d0f0      	beq.n	8003c52 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c70:	4b2a      	ldr	r3, [pc, #168]	; (8003d1c <HAL_RCC_OscConfig+0x26c>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	695b      	ldr	r3, [r3, #20]
 8003c7c:	00db      	lsls	r3, r3, #3
 8003c7e:	4927      	ldr	r1, [pc, #156]	; (8003d1c <HAL_RCC_OscConfig+0x26c>)
 8003c80:	4313      	orrs	r3, r2
 8003c82:	600b      	str	r3, [r1, #0]
 8003c84:	e015      	b.n	8003cb2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c86:	4b26      	ldr	r3, [pc, #152]	; (8003d20 <HAL_RCC_OscConfig+0x270>)
 8003c88:	2200      	movs	r2, #0
 8003c8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c8c:	f7ff f96a 	bl	8002f64 <HAL_GetTick>
 8003c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c92:	e008      	b.n	8003ca6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c94:	f7ff f966 	bl	8002f64 <HAL_GetTick>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d901      	bls.n	8003ca6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	e180      	b.n	8003fa8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ca6:	4b1d      	ldr	r3, [pc, #116]	; (8003d1c <HAL_RCC_OscConfig+0x26c>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0302 	and.w	r3, r3, #2
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d1f0      	bne.n	8003c94 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0308 	and.w	r3, r3, #8
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d03a      	beq.n	8003d34 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	699b      	ldr	r3, [r3, #24]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d019      	beq.n	8003cfa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cc6:	4b17      	ldr	r3, [pc, #92]	; (8003d24 <HAL_RCC_OscConfig+0x274>)
 8003cc8:	2201      	movs	r2, #1
 8003cca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ccc:	f7ff f94a 	bl	8002f64 <HAL_GetTick>
 8003cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cd2:	e008      	b.n	8003ce6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cd4:	f7ff f946 	bl	8002f64 <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	2b02      	cmp	r3, #2
 8003ce0:	d901      	bls.n	8003ce6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e160      	b.n	8003fa8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ce6:	4b0d      	ldr	r3, [pc, #52]	; (8003d1c <HAL_RCC_OscConfig+0x26c>)
 8003ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cea:	f003 0302 	and.w	r3, r3, #2
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d0f0      	beq.n	8003cd4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003cf2:	2001      	movs	r0, #1
 8003cf4:	f000 fad8 	bl	80042a8 <RCC_Delay>
 8003cf8:	e01c      	b.n	8003d34 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cfa:	4b0a      	ldr	r3, [pc, #40]	; (8003d24 <HAL_RCC_OscConfig+0x274>)
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d00:	f7ff f930 	bl	8002f64 <HAL_GetTick>
 8003d04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d06:	e00f      	b.n	8003d28 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d08:	f7ff f92c 	bl	8002f64 <HAL_GetTick>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	2b02      	cmp	r3, #2
 8003d14:	d908      	bls.n	8003d28 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003d16:	2303      	movs	r3, #3
 8003d18:	e146      	b.n	8003fa8 <HAL_RCC_OscConfig+0x4f8>
 8003d1a:	bf00      	nop
 8003d1c:	40021000 	.word	0x40021000
 8003d20:	42420000 	.word	0x42420000
 8003d24:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d28:	4b92      	ldr	r3, [pc, #584]	; (8003f74 <HAL_RCC_OscConfig+0x4c4>)
 8003d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2c:	f003 0302 	and.w	r3, r3, #2
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d1e9      	bne.n	8003d08 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0304 	and.w	r3, r3, #4
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	f000 80a6 	beq.w	8003e8e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d42:	2300      	movs	r3, #0
 8003d44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d46:	4b8b      	ldr	r3, [pc, #556]	; (8003f74 <HAL_RCC_OscConfig+0x4c4>)
 8003d48:	69db      	ldr	r3, [r3, #28]
 8003d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d10d      	bne.n	8003d6e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d52:	4b88      	ldr	r3, [pc, #544]	; (8003f74 <HAL_RCC_OscConfig+0x4c4>)
 8003d54:	69db      	ldr	r3, [r3, #28]
 8003d56:	4a87      	ldr	r2, [pc, #540]	; (8003f74 <HAL_RCC_OscConfig+0x4c4>)
 8003d58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d5c:	61d3      	str	r3, [r2, #28]
 8003d5e:	4b85      	ldr	r3, [pc, #532]	; (8003f74 <HAL_RCC_OscConfig+0x4c4>)
 8003d60:	69db      	ldr	r3, [r3, #28]
 8003d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d66:	60bb      	str	r3, [r7, #8]
 8003d68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d6e:	4b82      	ldr	r3, [pc, #520]	; (8003f78 <HAL_RCC_OscConfig+0x4c8>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d118      	bne.n	8003dac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d7a:	4b7f      	ldr	r3, [pc, #508]	; (8003f78 <HAL_RCC_OscConfig+0x4c8>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a7e      	ldr	r2, [pc, #504]	; (8003f78 <HAL_RCC_OscConfig+0x4c8>)
 8003d80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d86:	f7ff f8ed 	bl	8002f64 <HAL_GetTick>
 8003d8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d8c:	e008      	b.n	8003da0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d8e:	f7ff f8e9 	bl	8002f64 <HAL_GetTick>
 8003d92:	4602      	mov	r2, r0
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	2b64      	cmp	r3, #100	; 0x64
 8003d9a:	d901      	bls.n	8003da0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	e103      	b.n	8003fa8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003da0:	4b75      	ldr	r3, [pc, #468]	; (8003f78 <HAL_RCC_OscConfig+0x4c8>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d0f0      	beq.n	8003d8e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d106      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x312>
 8003db4:	4b6f      	ldr	r3, [pc, #444]	; (8003f74 <HAL_RCC_OscConfig+0x4c4>)
 8003db6:	6a1b      	ldr	r3, [r3, #32]
 8003db8:	4a6e      	ldr	r2, [pc, #440]	; (8003f74 <HAL_RCC_OscConfig+0x4c4>)
 8003dba:	f043 0301 	orr.w	r3, r3, #1
 8003dbe:	6213      	str	r3, [r2, #32]
 8003dc0:	e02d      	b.n	8003e1e <HAL_RCC_OscConfig+0x36e>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d10c      	bne.n	8003de4 <HAL_RCC_OscConfig+0x334>
 8003dca:	4b6a      	ldr	r3, [pc, #424]	; (8003f74 <HAL_RCC_OscConfig+0x4c4>)
 8003dcc:	6a1b      	ldr	r3, [r3, #32]
 8003dce:	4a69      	ldr	r2, [pc, #420]	; (8003f74 <HAL_RCC_OscConfig+0x4c4>)
 8003dd0:	f023 0301 	bic.w	r3, r3, #1
 8003dd4:	6213      	str	r3, [r2, #32]
 8003dd6:	4b67      	ldr	r3, [pc, #412]	; (8003f74 <HAL_RCC_OscConfig+0x4c4>)
 8003dd8:	6a1b      	ldr	r3, [r3, #32]
 8003dda:	4a66      	ldr	r2, [pc, #408]	; (8003f74 <HAL_RCC_OscConfig+0x4c4>)
 8003ddc:	f023 0304 	bic.w	r3, r3, #4
 8003de0:	6213      	str	r3, [r2, #32]
 8003de2:	e01c      	b.n	8003e1e <HAL_RCC_OscConfig+0x36e>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	2b05      	cmp	r3, #5
 8003dea:	d10c      	bne.n	8003e06 <HAL_RCC_OscConfig+0x356>
 8003dec:	4b61      	ldr	r3, [pc, #388]	; (8003f74 <HAL_RCC_OscConfig+0x4c4>)
 8003dee:	6a1b      	ldr	r3, [r3, #32]
 8003df0:	4a60      	ldr	r2, [pc, #384]	; (8003f74 <HAL_RCC_OscConfig+0x4c4>)
 8003df2:	f043 0304 	orr.w	r3, r3, #4
 8003df6:	6213      	str	r3, [r2, #32]
 8003df8:	4b5e      	ldr	r3, [pc, #376]	; (8003f74 <HAL_RCC_OscConfig+0x4c4>)
 8003dfa:	6a1b      	ldr	r3, [r3, #32]
 8003dfc:	4a5d      	ldr	r2, [pc, #372]	; (8003f74 <HAL_RCC_OscConfig+0x4c4>)
 8003dfe:	f043 0301 	orr.w	r3, r3, #1
 8003e02:	6213      	str	r3, [r2, #32]
 8003e04:	e00b      	b.n	8003e1e <HAL_RCC_OscConfig+0x36e>
 8003e06:	4b5b      	ldr	r3, [pc, #364]	; (8003f74 <HAL_RCC_OscConfig+0x4c4>)
 8003e08:	6a1b      	ldr	r3, [r3, #32]
 8003e0a:	4a5a      	ldr	r2, [pc, #360]	; (8003f74 <HAL_RCC_OscConfig+0x4c4>)
 8003e0c:	f023 0301 	bic.w	r3, r3, #1
 8003e10:	6213      	str	r3, [r2, #32]
 8003e12:	4b58      	ldr	r3, [pc, #352]	; (8003f74 <HAL_RCC_OscConfig+0x4c4>)
 8003e14:	6a1b      	ldr	r3, [r3, #32]
 8003e16:	4a57      	ldr	r2, [pc, #348]	; (8003f74 <HAL_RCC_OscConfig+0x4c4>)
 8003e18:	f023 0304 	bic.w	r3, r3, #4
 8003e1c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d015      	beq.n	8003e52 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e26:	f7ff f89d 	bl	8002f64 <HAL_GetTick>
 8003e2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e2c:	e00a      	b.n	8003e44 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e2e:	f7ff f899 	bl	8002f64 <HAL_GetTick>
 8003e32:	4602      	mov	r2, r0
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	1ad3      	subs	r3, r2, r3
 8003e38:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d901      	bls.n	8003e44 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003e40:	2303      	movs	r3, #3
 8003e42:	e0b1      	b.n	8003fa8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e44:	4b4b      	ldr	r3, [pc, #300]	; (8003f74 <HAL_RCC_OscConfig+0x4c4>)
 8003e46:	6a1b      	ldr	r3, [r3, #32]
 8003e48:	f003 0302 	and.w	r3, r3, #2
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d0ee      	beq.n	8003e2e <HAL_RCC_OscConfig+0x37e>
 8003e50:	e014      	b.n	8003e7c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e52:	f7ff f887 	bl	8002f64 <HAL_GetTick>
 8003e56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e58:	e00a      	b.n	8003e70 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e5a:	f7ff f883 	bl	8002f64 <HAL_GetTick>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d901      	bls.n	8003e70 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003e6c:	2303      	movs	r3, #3
 8003e6e:	e09b      	b.n	8003fa8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e70:	4b40      	ldr	r3, [pc, #256]	; (8003f74 <HAL_RCC_OscConfig+0x4c4>)
 8003e72:	6a1b      	ldr	r3, [r3, #32]
 8003e74:	f003 0302 	and.w	r3, r3, #2
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d1ee      	bne.n	8003e5a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003e7c:	7dfb      	ldrb	r3, [r7, #23]
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d105      	bne.n	8003e8e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e82:	4b3c      	ldr	r3, [pc, #240]	; (8003f74 <HAL_RCC_OscConfig+0x4c4>)
 8003e84:	69db      	ldr	r3, [r3, #28]
 8003e86:	4a3b      	ldr	r2, [pc, #236]	; (8003f74 <HAL_RCC_OscConfig+0x4c4>)
 8003e88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e8c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	69db      	ldr	r3, [r3, #28]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	f000 8087 	beq.w	8003fa6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e98:	4b36      	ldr	r3, [pc, #216]	; (8003f74 <HAL_RCC_OscConfig+0x4c4>)
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f003 030c 	and.w	r3, r3, #12
 8003ea0:	2b08      	cmp	r3, #8
 8003ea2:	d061      	beq.n	8003f68 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	69db      	ldr	r3, [r3, #28]
 8003ea8:	2b02      	cmp	r3, #2
 8003eaa:	d146      	bne.n	8003f3a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eac:	4b33      	ldr	r3, [pc, #204]	; (8003f7c <HAL_RCC_OscConfig+0x4cc>)
 8003eae:	2200      	movs	r2, #0
 8003eb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eb2:	f7ff f857 	bl	8002f64 <HAL_GetTick>
 8003eb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003eb8:	e008      	b.n	8003ecc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eba:	f7ff f853 	bl	8002f64 <HAL_GetTick>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	2b02      	cmp	r3, #2
 8003ec6:	d901      	bls.n	8003ecc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003ec8:	2303      	movs	r3, #3
 8003eca:	e06d      	b.n	8003fa8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ecc:	4b29      	ldr	r3, [pc, #164]	; (8003f74 <HAL_RCC_OscConfig+0x4c4>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d1f0      	bne.n	8003eba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6a1b      	ldr	r3, [r3, #32]
 8003edc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ee0:	d108      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003ee2:	4b24      	ldr	r3, [pc, #144]	; (8003f74 <HAL_RCC_OscConfig+0x4c4>)
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	4921      	ldr	r1, [pc, #132]	; (8003f74 <HAL_RCC_OscConfig+0x4c4>)
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ef4:	4b1f      	ldr	r3, [pc, #124]	; (8003f74 <HAL_RCC_OscConfig+0x4c4>)
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6a19      	ldr	r1, [r3, #32]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f04:	430b      	orrs	r3, r1
 8003f06:	491b      	ldr	r1, [pc, #108]	; (8003f74 <HAL_RCC_OscConfig+0x4c4>)
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f0c:	4b1b      	ldr	r3, [pc, #108]	; (8003f7c <HAL_RCC_OscConfig+0x4cc>)
 8003f0e:	2201      	movs	r2, #1
 8003f10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f12:	f7ff f827 	bl	8002f64 <HAL_GetTick>
 8003f16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f18:	e008      	b.n	8003f2c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f1a:	f7ff f823 	bl	8002f64 <HAL_GetTick>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	2b02      	cmp	r3, #2
 8003f26:	d901      	bls.n	8003f2c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	e03d      	b.n	8003fa8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f2c:	4b11      	ldr	r3, [pc, #68]	; (8003f74 <HAL_RCC_OscConfig+0x4c4>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d0f0      	beq.n	8003f1a <HAL_RCC_OscConfig+0x46a>
 8003f38:	e035      	b.n	8003fa6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f3a:	4b10      	ldr	r3, [pc, #64]	; (8003f7c <HAL_RCC_OscConfig+0x4cc>)
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f40:	f7ff f810 	bl	8002f64 <HAL_GetTick>
 8003f44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f46:	e008      	b.n	8003f5a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f48:	f7ff f80c 	bl	8002f64 <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	d901      	bls.n	8003f5a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	e026      	b.n	8003fa8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f5a:	4b06      	ldr	r3, [pc, #24]	; (8003f74 <HAL_RCC_OscConfig+0x4c4>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d1f0      	bne.n	8003f48 <HAL_RCC_OscConfig+0x498>
 8003f66:	e01e      	b.n	8003fa6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	69db      	ldr	r3, [r3, #28]
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d107      	bne.n	8003f80 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e019      	b.n	8003fa8 <HAL_RCC_OscConfig+0x4f8>
 8003f74:	40021000 	.word	0x40021000
 8003f78:	40007000 	.word	0x40007000
 8003f7c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003f80:	4b0b      	ldr	r3, [pc, #44]	; (8003fb0 <HAL_RCC_OscConfig+0x500>)
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6a1b      	ldr	r3, [r3, #32]
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d106      	bne.n	8003fa2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d001      	beq.n	8003fa6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e000      	b.n	8003fa8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003fa6:	2300      	movs	r3, #0
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3718      	adds	r7, #24
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	40021000 	.word	0x40021000

08003fb4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d101      	bne.n	8003fc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e0d0      	b.n	800416a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003fc8:	4b6a      	ldr	r3, [pc, #424]	; (8004174 <HAL_RCC_ClockConfig+0x1c0>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 0307 	and.w	r3, r3, #7
 8003fd0:	683a      	ldr	r2, [r7, #0]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d910      	bls.n	8003ff8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fd6:	4b67      	ldr	r3, [pc, #412]	; (8004174 <HAL_RCC_ClockConfig+0x1c0>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f023 0207 	bic.w	r2, r3, #7
 8003fde:	4965      	ldr	r1, [pc, #404]	; (8004174 <HAL_RCC_ClockConfig+0x1c0>)
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fe6:	4b63      	ldr	r3, [pc, #396]	; (8004174 <HAL_RCC_ClockConfig+0x1c0>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0307 	and.w	r3, r3, #7
 8003fee:	683a      	ldr	r2, [r7, #0]
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d001      	beq.n	8003ff8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e0b8      	b.n	800416a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 0302 	and.w	r3, r3, #2
 8004000:	2b00      	cmp	r3, #0
 8004002:	d020      	beq.n	8004046 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0304 	and.w	r3, r3, #4
 800400c:	2b00      	cmp	r3, #0
 800400e:	d005      	beq.n	800401c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004010:	4b59      	ldr	r3, [pc, #356]	; (8004178 <HAL_RCC_ClockConfig+0x1c4>)
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	4a58      	ldr	r2, [pc, #352]	; (8004178 <HAL_RCC_ClockConfig+0x1c4>)
 8004016:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800401a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0308 	and.w	r3, r3, #8
 8004024:	2b00      	cmp	r3, #0
 8004026:	d005      	beq.n	8004034 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004028:	4b53      	ldr	r3, [pc, #332]	; (8004178 <HAL_RCC_ClockConfig+0x1c4>)
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	4a52      	ldr	r2, [pc, #328]	; (8004178 <HAL_RCC_ClockConfig+0x1c4>)
 800402e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004032:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004034:	4b50      	ldr	r3, [pc, #320]	; (8004178 <HAL_RCC_ClockConfig+0x1c4>)
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	494d      	ldr	r1, [pc, #308]	; (8004178 <HAL_RCC_ClockConfig+0x1c4>)
 8004042:	4313      	orrs	r3, r2
 8004044:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 0301 	and.w	r3, r3, #1
 800404e:	2b00      	cmp	r3, #0
 8004050:	d040      	beq.n	80040d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	2b01      	cmp	r3, #1
 8004058:	d107      	bne.n	800406a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800405a:	4b47      	ldr	r3, [pc, #284]	; (8004178 <HAL_RCC_ClockConfig+0x1c4>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d115      	bne.n	8004092 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e07f      	b.n	800416a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	2b02      	cmp	r3, #2
 8004070:	d107      	bne.n	8004082 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004072:	4b41      	ldr	r3, [pc, #260]	; (8004178 <HAL_RCC_ClockConfig+0x1c4>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800407a:	2b00      	cmp	r3, #0
 800407c:	d109      	bne.n	8004092 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e073      	b.n	800416a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004082:	4b3d      	ldr	r3, [pc, #244]	; (8004178 <HAL_RCC_ClockConfig+0x1c4>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 0302 	and.w	r3, r3, #2
 800408a:	2b00      	cmp	r3, #0
 800408c:	d101      	bne.n	8004092 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e06b      	b.n	800416a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004092:	4b39      	ldr	r3, [pc, #228]	; (8004178 <HAL_RCC_ClockConfig+0x1c4>)
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	f023 0203 	bic.w	r2, r3, #3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	4936      	ldr	r1, [pc, #216]	; (8004178 <HAL_RCC_ClockConfig+0x1c4>)
 80040a0:	4313      	orrs	r3, r2
 80040a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040a4:	f7fe ff5e 	bl	8002f64 <HAL_GetTick>
 80040a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040aa:	e00a      	b.n	80040c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040ac:	f7fe ff5a 	bl	8002f64 <HAL_GetTick>
 80040b0:	4602      	mov	r2, r0
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d901      	bls.n	80040c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e053      	b.n	800416a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040c2:	4b2d      	ldr	r3, [pc, #180]	; (8004178 <HAL_RCC_ClockConfig+0x1c4>)
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	f003 020c 	and.w	r2, r3, #12
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d1eb      	bne.n	80040ac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040d4:	4b27      	ldr	r3, [pc, #156]	; (8004174 <HAL_RCC_ClockConfig+0x1c0>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 0307 	and.w	r3, r3, #7
 80040dc:	683a      	ldr	r2, [r7, #0]
 80040de:	429a      	cmp	r2, r3
 80040e0:	d210      	bcs.n	8004104 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040e2:	4b24      	ldr	r3, [pc, #144]	; (8004174 <HAL_RCC_ClockConfig+0x1c0>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f023 0207 	bic.w	r2, r3, #7
 80040ea:	4922      	ldr	r1, [pc, #136]	; (8004174 <HAL_RCC_ClockConfig+0x1c0>)
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040f2:	4b20      	ldr	r3, [pc, #128]	; (8004174 <HAL_RCC_ClockConfig+0x1c0>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 0307 	and.w	r3, r3, #7
 80040fa:	683a      	ldr	r2, [r7, #0]
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d001      	beq.n	8004104 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e032      	b.n	800416a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 0304 	and.w	r3, r3, #4
 800410c:	2b00      	cmp	r3, #0
 800410e:	d008      	beq.n	8004122 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004110:	4b19      	ldr	r3, [pc, #100]	; (8004178 <HAL_RCC_ClockConfig+0x1c4>)
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	4916      	ldr	r1, [pc, #88]	; (8004178 <HAL_RCC_ClockConfig+0x1c4>)
 800411e:	4313      	orrs	r3, r2
 8004120:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 0308 	and.w	r3, r3, #8
 800412a:	2b00      	cmp	r3, #0
 800412c:	d009      	beq.n	8004142 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800412e:	4b12      	ldr	r3, [pc, #72]	; (8004178 <HAL_RCC_ClockConfig+0x1c4>)
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	691b      	ldr	r3, [r3, #16]
 800413a:	00db      	lsls	r3, r3, #3
 800413c:	490e      	ldr	r1, [pc, #56]	; (8004178 <HAL_RCC_ClockConfig+0x1c4>)
 800413e:	4313      	orrs	r3, r2
 8004140:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004142:	f000 f821 	bl	8004188 <HAL_RCC_GetSysClockFreq>
 8004146:	4602      	mov	r2, r0
 8004148:	4b0b      	ldr	r3, [pc, #44]	; (8004178 <HAL_RCC_ClockConfig+0x1c4>)
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	091b      	lsrs	r3, r3, #4
 800414e:	f003 030f 	and.w	r3, r3, #15
 8004152:	490a      	ldr	r1, [pc, #40]	; (800417c <HAL_RCC_ClockConfig+0x1c8>)
 8004154:	5ccb      	ldrb	r3, [r1, r3]
 8004156:	fa22 f303 	lsr.w	r3, r2, r3
 800415a:	4a09      	ldr	r2, [pc, #36]	; (8004180 <HAL_RCC_ClockConfig+0x1cc>)
 800415c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800415e:	4b09      	ldr	r3, [pc, #36]	; (8004184 <HAL_RCC_ClockConfig+0x1d0>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4618      	mov	r0, r3
 8004164:	f7fe febc 	bl	8002ee0 <HAL_InitTick>

  return HAL_OK;
 8004168:	2300      	movs	r3, #0
}
 800416a:	4618      	mov	r0, r3
 800416c:	3710      	adds	r7, #16
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	40022000 	.word	0x40022000
 8004178:	40021000 	.word	0x40021000
 800417c:	08006940 	.word	0x08006940
 8004180:	20000004 	.word	0x20000004
 8004184:	20000008 	.word	0x20000008

08004188 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004188:	b490      	push	{r4, r7}
 800418a:	b08a      	sub	sp, #40	; 0x28
 800418c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800418e:	4b29      	ldr	r3, [pc, #164]	; (8004234 <HAL_RCC_GetSysClockFreq+0xac>)
 8004190:	1d3c      	adds	r4, r7, #4
 8004192:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004194:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004198:	f240 2301 	movw	r3, #513	; 0x201
 800419c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800419e:	2300      	movs	r3, #0
 80041a0:	61fb      	str	r3, [r7, #28]
 80041a2:	2300      	movs	r3, #0
 80041a4:	61bb      	str	r3, [r7, #24]
 80041a6:	2300      	movs	r3, #0
 80041a8:	627b      	str	r3, [r7, #36]	; 0x24
 80041aa:	2300      	movs	r3, #0
 80041ac:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80041ae:	2300      	movs	r3, #0
 80041b0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80041b2:	4b21      	ldr	r3, [pc, #132]	; (8004238 <HAL_RCC_GetSysClockFreq+0xb0>)
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	f003 030c 	and.w	r3, r3, #12
 80041be:	2b04      	cmp	r3, #4
 80041c0:	d002      	beq.n	80041c8 <HAL_RCC_GetSysClockFreq+0x40>
 80041c2:	2b08      	cmp	r3, #8
 80041c4:	d003      	beq.n	80041ce <HAL_RCC_GetSysClockFreq+0x46>
 80041c6:	e02b      	b.n	8004220 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80041c8:	4b1c      	ldr	r3, [pc, #112]	; (800423c <HAL_RCC_GetSysClockFreq+0xb4>)
 80041ca:	623b      	str	r3, [r7, #32]
      break;
 80041cc:	e02b      	b.n	8004226 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	0c9b      	lsrs	r3, r3, #18
 80041d2:	f003 030f 	and.w	r3, r3, #15
 80041d6:	3328      	adds	r3, #40	; 0x28
 80041d8:	443b      	add	r3, r7
 80041da:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80041de:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80041e0:	69fb      	ldr	r3, [r7, #28]
 80041e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d012      	beq.n	8004210 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80041ea:	4b13      	ldr	r3, [pc, #76]	; (8004238 <HAL_RCC_GetSysClockFreq+0xb0>)
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	0c5b      	lsrs	r3, r3, #17
 80041f0:	f003 0301 	and.w	r3, r3, #1
 80041f4:	3328      	adds	r3, #40	; 0x28
 80041f6:	443b      	add	r3, r7
 80041f8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80041fc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	4a0e      	ldr	r2, [pc, #56]	; (800423c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004202:	fb03 f202 	mul.w	r2, r3, r2
 8004206:	69bb      	ldr	r3, [r7, #24]
 8004208:	fbb2 f3f3 	udiv	r3, r2, r3
 800420c:	627b      	str	r3, [r7, #36]	; 0x24
 800420e:	e004      	b.n	800421a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	4a0b      	ldr	r2, [pc, #44]	; (8004240 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004214:	fb02 f303 	mul.w	r3, r2, r3
 8004218:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800421a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421c:	623b      	str	r3, [r7, #32]
      break;
 800421e:	e002      	b.n	8004226 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004220:	4b06      	ldr	r3, [pc, #24]	; (800423c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004222:	623b      	str	r3, [r7, #32]
      break;
 8004224:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004226:	6a3b      	ldr	r3, [r7, #32]
}
 8004228:	4618      	mov	r0, r3
 800422a:	3728      	adds	r7, #40	; 0x28
 800422c:	46bd      	mov	sp, r7
 800422e:	bc90      	pop	{r4, r7}
 8004230:	4770      	bx	lr
 8004232:	bf00      	nop
 8004234:	08006930 	.word	0x08006930
 8004238:	40021000 	.word	0x40021000
 800423c:	007a1200 	.word	0x007a1200
 8004240:	003d0900 	.word	0x003d0900

08004244 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004244:	b480      	push	{r7}
 8004246:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004248:	4b02      	ldr	r3, [pc, #8]	; (8004254 <HAL_RCC_GetHCLKFreq+0x10>)
 800424a:	681b      	ldr	r3, [r3, #0]
}
 800424c:	4618      	mov	r0, r3
 800424e:	46bd      	mov	sp, r7
 8004250:	bc80      	pop	{r7}
 8004252:	4770      	bx	lr
 8004254:	20000004 	.word	0x20000004

08004258 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800425c:	f7ff fff2 	bl	8004244 <HAL_RCC_GetHCLKFreq>
 8004260:	4602      	mov	r2, r0
 8004262:	4b05      	ldr	r3, [pc, #20]	; (8004278 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	0a1b      	lsrs	r3, r3, #8
 8004268:	f003 0307 	and.w	r3, r3, #7
 800426c:	4903      	ldr	r1, [pc, #12]	; (800427c <HAL_RCC_GetPCLK1Freq+0x24>)
 800426e:	5ccb      	ldrb	r3, [r1, r3]
 8004270:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004274:	4618      	mov	r0, r3
 8004276:	bd80      	pop	{r7, pc}
 8004278:	40021000 	.word	0x40021000
 800427c:	08006950 	.word	0x08006950

08004280 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004284:	f7ff ffde 	bl	8004244 <HAL_RCC_GetHCLKFreq>
 8004288:	4602      	mov	r2, r0
 800428a:	4b05      	ldr	r3, [pc, #20]	; (80042a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	0adb      	lsrs	r3, r3, #11
 8004290:	f003 0307 	and.w	r3, r3, #7
 8004294:	4903      	ldr	r1, [pc, #12]	; (80042a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004296:	5ccb      	ldrb	r3, [r1, r3]
 8004298:	fa22 f303 	lsr.w	r3, r2, r3
}
 800429c:	4618      	mov	r0, r3
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	40021000 	.word	0x40021000
 80042a4:	08006950 	.word	0x08006950

080042a8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b085      	sub	sp, #20
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80042b0:	4b0a      	ldr	r3, [pc, #40]	; (80042dc <RCC_Delay+0x34>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a0a      	ldr	r2, [pc, #40]	; (80042e0 <RCC_Delay+0x38>)
 80042b6:	fba2 2303 	umull	r2, r3, r2, r3
 80042ba:	0a5b      	lsrs	r3, r3, #9
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	fb02 f303 	mul.w	r3, r2, r3
 80042c2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80042c4:	bf00      	nop
  }
  while (Delay --);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	1e5a      	subs	r2, r3, #1
 80042ca:	60fa      	str	r2, [r7, #12]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d1f9      	bne.n	80042c4 <RCC_Delay+0x1c>
}
 80042d0:	bf00      	nop
 80042d2:	bf00      	nop
 80042d4:	3714      	adds	r7, #20
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bc80      	pop	{r7}
 80042da:	4770      	bx	lr
 80042dc:	20000004 	.word	0x20000004
 80042e0:	10624dd3 	.word	0x10624dd3

080042e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b082      	sub	sp, #8
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d101      	bne.n	80042f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e041      	b.n	800437a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d106      	bne.n	8004310 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f7fe fbcc 	bl	8002aa8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2202      	movs	r2, #2
 8004314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	3304      	adds	r3, #4
 8004320:	4619      	mov	r1, r3
 8004322:	4610      	mov	r0, r2
 8004324:	f000 fce8 	bl	8004cf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004378:	2300      	movs	r3, #0
}
 800437a:	4618      	mov	r0, r3
 800437c:	3708      	adds	r7, #8
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
	...

08004384 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004384:	b480      	push	{r7}
 8004386:	b085      	sub	sp, #20
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004392:	b2db      	uxtb	r3, r3
 8004394:	2b01      	cmp	r3, #1
 8004396:	d001      	beq.n	800439c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e032      	b.n	8004402 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2202      	movs	r2, #2
 80043a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a18      	ldr	r2, [pc, #96]	; (800440c <HAL_TIM_Base_Start+0x88>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d00e      	beq.n	80043cc <HAL_TIM_Base_Start+0x48>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043b6:	d009      	beq.n	80043cc <HAL_TIM_Base_Start+0x48>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a14      	ldr	r2, [pc, #80]	; (8004410 <HAL_TIM_Base_Start+0x8c>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d004      	beq.n	80043cc <HAL_TIM_Base_Start+0x48>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a13      	ldr	r2, [pc, #76]	; (8004414 <HAL_TIM_Base_Start+0x90>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d111      	bne.n	80043f0 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	f003 0307 	and.w	r3, r3, #7
 80043d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2b06      	cmp	r3, #6
 80043dc:	d010      	beq.n	8004400 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f042 0201 	orr.w	r2, r2, #1
 80043ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043ee:	e007      	b.n	8004400 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f042 0201 	orr.w	r2, r2, #1
 80043fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004400:	2300      	movs	r3, #0
}
 8004402:	4618      	mov	r0, r3
 8004404:	3714      	adds	r7, #20
 8004406:	46bd      	mov	sp, r7
 8004408:	bc80      	pop	{r7}
 800440a:	4770      	bx	lr
 800440c:	40012c00 	.word	0x40012c00
 8004410:	40000400 	.word	0x40000400
 8004414:	40000800 	.word	0x40000800

08004418 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004418:	b480      	push	{r7}
 800441a:	b085      	sub	sp, #20
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004426:	b2db      	uxtb	r3, r3
 8004428:	2b01      	cmp	r3, #1
 800442a:	d001      	beq.n	8004430 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	e03a      	b.n	80044a6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2202      	movs	r2, #2
 8004434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	68da      	ldr	r2, [r3, #12]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f042 0201 	orr.w	r2, r2, #1
 8004446:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a18      	ldr	r2, [pc, #96]	; (80044b0 <HAL_TIM_Base_Start_IT+0x98>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d00e      	beq.n	8004470 <HAL_TIM_Base_Start_IT+0x58>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800445a:	d009      	beq.n	8004470 <HAL_TIM_Base_Start_IT+0x58>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a14      	ldr	r2, [pc, #80]	; (80044b4 <HAL_TIM_Base_Start_IT+0x9c>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d004      	beq.n	8004470 <HAL_TIM_Base_Start_IT+0x58>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a13      	ldr	r2, [pc, #76]	; (80044b8 <HAL_TIM_Base_Start_IT+0xa0>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d111      	bne.n	8004494 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	f003 0307 	and.w	r3, r3, #7
 800447a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2b06      	cmp	r3, #6
 8004480:	d010      	beq.n	80044a4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f042 0201 	orr.w	r2, r2, #1
 8004490:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004492:	e007      	b.n	80044a4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f042 0201 	orr.w	r2, r2, #1
 80044a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044a4:	2300      	movs	r3, #0
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3714      	adds	r7, #20
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bc80      	pop	{r7}
 80044ae:	4770      	bx	lr
 80044b0:	40012c00 	.word	0x40012c00
 80044b4:	40000400 	.word	0x40000400
 80044b8:	40000800 	.word	0x40000800

080044bc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b082      	sub	sp, #8
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d101      	bne.n	80044ce <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e041      	b.n	8004552 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d106      	bne.n	80044e8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f000 f839 	bl	800455a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2202      	movs	r2, #2
 80044ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	3304      	adds	r3, #4
 80044f8:	4619      	mov	r1, r3
 80044fa:	4610      	mov	r0, r2
 80044fc:	f000 fbfc 	bl	8004cf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2201      	movs	r2, #1
 8004524:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004550:	2300      	movs	r3, #0
}
 8004552:	4618      	mov	r0, r3
 8004554:	3708      	adds	r7, #8
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}

0800455a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800455a:	b480      	push	{r7}
 800455c:	b083      	sub	sp, #12
 800455e:	af00      	add	r7, sp, #0
 8004560:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004562:	bf00      	nop
 8004564:	370c      	adds	r7, #12
 8004566:	46bd      	mov	sp, r7
 8004568:	bc80      	pop	{r7}
 800456a:	4770      	bx	lr

0800456c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b084      	sub	sp, #16
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d104      	bne.n	8004586 <HAL_TIM_IC_Start_IT+0x1a>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004582:	b2db      	uxtb	r3, r3
 8004584:	e013      	b.n	80045ae <HAL_TIM_IC_Start_IT+0x42>
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	2b04      	cmp	r3, #4
 800458a:	d104      	bne.n	8004596 <HAL_TIM_IC_Start_IT+0x2a>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004592:	b2db      	uxtb	r3, r3
 8004594:	e00b      	b.n	80045ae <HAL_TIM_IC_Start_IT+0x42>
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	2b08      	cmp	r3, #8
 800459a:	d104      	bne.n	80045a6 <HAL_TIM_IC_Start_IT+0x3a>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	e003      	b.n	80045ae <HAL_TIM_IC_Start_IT+0x42>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d104      	bne.n	80045c0 <HAL_TIM_IC_Start_IT+0x54>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	e013      	b.n	80045e8 <HAL_TIM_IC_Start_IT+0x7c>
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	2b04      	cmp	r3, #4
 80045c4:	d104      	bne.n	80045d0 <HAL_TIM_IC_Start_IT+0x64>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	e00b      	b.n	80045e8 <HAL_TIM_IC_Start_IT+0x7c>
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	2b08      	cmp	r3, #8
 80045d4:	d104      	bne.n	80045e0 <HAL_TIM_IC_Start_IT+0x74>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	e003      	b.n	80045e8 <HAL_TIM_IC_Start_IT+0x7c>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80045ea:	7bfb      	ldrb	r3, [r7, #15]
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d102      	bne.n	80045f6 <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80045f0:	7bbb      	ldrb	r3, [r7, #14]
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d001      	beq.n	80045fa <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e0b3      	b.n	8004762 <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d104      	bne.n	800460a <HAL_TIM_IC_Start_IT+0x9e>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2202      	movs	r2, #2
 8004604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004608:	e013      	b.n	8004632 <HAL_TIM_IC_Start_IT+0xc6>
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	2b04      	cmp	r3, #4
 800460e:	d104      	bne.n	800461a <HAL_TIM_IC_Start_IT+0xae>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2202      	movs	r2, #2
 8004614:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004618:	e00b      	b.n	8004632 <HAL_TIM_IC_Start_IT+0xc6>
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	2b08      	cmp	r3, #8
 800461e:	d104      	bne.n	800462a <HAL_TIM_IC_Start_IT+0xbe>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2202      	movs	r2, #2
 8004624:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004628:	e003      	b.n	8004632 <HAL_TIM_IC_Start_IT+0xc6>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2202      	movs	r2, #2
 800462e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d104      	bne.n	8004642 <HAL_TIM_IC_Start_IT+0xd6>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2202      	movs	r2, #2
 800463c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004640:	e013      	b.n	800466a <HAL_TIM_IC_Start_IT+0xfe>
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	2b04      	cmp	r3, #4
 8004646:	d104      	bne.n	8004652 <HAL_TIM_IC_Start_IT+0xe6>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2202      	movs	r2, #2
 800464c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004650:	e00b      	b.n	800466a <HAL_TIM_IC_Start_IT+0xfe>
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	2b08      	cmp	r3, #8
 8004656:	d104      	bne.n	8004662 <HAL_TIM_IC_Start_IT+0xf6>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2202      	movs	r2, #2
 800465c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004660:	e003      	b.n	800466a <HAL_TIM_IC_Start_IT+0xfe>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2202      	movs	r2, #2
 8004666:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	2b0c      	cmp	r3, #12
 800466e:	d841      	bhi.n	80046f4 <HAL_TIM_IC_Start_IT+0x188>
 8004670:	a201      	add	r2, pc, #4	; (adr r2, 8004678 <HAL_TIM_IC_Start_IT+0x10c>)
 8004672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004676:	bf00      	nop
 8004678:	080046ad 	.word	0x080046ad
 800467c:	080046f5 	.word	0x080046f5
 8004680:	080046f5 	.word	0x080046f5
 8004684:	080046f5 	.word	0x080046f5
 8004688:	080046bf 	.word	0x080046bf
 800468c:	080046f5 	.word	0x080046f5
 8004690:	080046f5 	.word	0x080046f5
 8004694:	080046f5 	.word	0x080046f5
 8004698:	080046d1 	.word	0x080046d1
 800469c:	080046f5 	.word	0x080046f5
 80046a0:	080046f5 	.word	0x080046f5
 80046a4:	080046f5 	.word	0x080046f5
 80046a8:	080046e3 	.word	0x080046e3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	68da      	ldr	r2, [r3, #12]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f042 0202 	orr.w	r2, r2, #2
 80046ba:	60da      	str	r2, [r3, #12]
      break;
 80046bc:	e01b      	b.n	80046f6 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	68da      	ldr	r2, [r3, #12]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f042 0204 	orr.w	r2, r2, #4
 80046cc:	60da      	str	r2, [r3, #12]
      break;
 80046ce:	e012      	b.n	80046f6 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	68da      	ldr	r2, [r3, #12]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f042 0208 	orr.w	r2, r2, #8
 80046de:	60da      	str	r2, [r3, #12]
      break;
 80046e0:	e009      	b.n	80046f6 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	68da      	ldr	r2, [r3, #12]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f042 0210 	orr.w	r2, r2, #16
 80046f0:	60da      	str	r2, [r3, #12]
      break;
 80046f2:	e000      	b.n	80046f6 <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 80046f4:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2201      	movs	r2, #1
 80046fc:	6839      	ldr	r1, [r7, #0]
 80046fe:	4618      	mov	r0, r3
 8004700:	f000 fcff 	bl	8005102 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a18      	ldr	r2, [pc, #96]	; (800476c <HAL_TIM_IC_Start_IT+0x200>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d00e      	beq.n	800472c <HAL_TIM_IC_Start_IT+0x1c0>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004716:	d009      	beq.n	800472c <HAL_TIM_IC_Start_IT+0x1c0>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a14      	ldr	r2, [pc, #80]	; (8004770 <HAL_TIM_IC_Start_IT+0x204>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d004      	beq.n	800472c <HAL_TIM_IC_Start_IT+0x1c0>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a13      	ldr	r2, [pc, #76]	; (8004774 <HAL_TIM_IC_Start_IT+0x208>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d111      	bne.n	8004750 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	f003 0307 	and.w	r3, r3, #7
 8004736:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	2b06      	cmp	r3, #6
 800473c:	d010      	beq.n	8004760 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f042 0201 	orr.w	r2, r2, #1
 800474c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800474e:	e007      	b.n	8004760 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f042 0201 	orr.w	r2, r2, #1
 800475e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004760:	2300      	movs	r3, #0
}
 8004762:	4618      	mov	r0, r3
 8004764:	3710      	adds	r7, #16
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}
 800476a:	bf00      	nop
 800476c:	40012c00 	.word	0x40012c00
 8004770:	40000400 	.word	0x40000400
 8004774:	40000800 	.word	0x40000800

08004778 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b082      	sub	sp, #8
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	691b      	ldr	r3, [r3, #16]
 8004786:	f003 0302 	and.w	r3, r3, #2
 800478a:	2b02      	cmp	r3, #2
 800478c:	d122      	bne.n	80047d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	f003 0302 	and.w	r3, r3, #2
 8004798:	2b02      	cmp	r3, #2
 800479a:	d11b      	bne.n	80047d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f06f 0202 	mvn.w	r2, #2
 80047a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2201      	movs	r2, #1
 80047aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	699b      	ldr	r3, [r3, #24]
 80047b2:	f003 0303 	and.w	r3, r3, #3
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d003      	beq.n	80047c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f7fc fd44 	bl	8001248 <HAL_TIM_IC_CaptureCallback>
 80047c0:	e005      	b.n	80047ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f000 fa7c 	bl	8004cc0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f000 fa82 	bl	8004cd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2200      	movs	r2, #0
 80047d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	691b      	ldr	r3, [r3, #16]
 80047da:	f003 0304 	and.w	r3, r3, #4
 80047de:	2b04      	cmp	r3, #4
 80047e0:	d122      	bne.n	8004828 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	f003 0304 	and.w	r3, r3, #4
 80047ec:	2b04      	cmp	r3, #4
 80047ee:	d11b      	bne.n	8004828 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f06f 0204 	mvn.w	r2, #4
 80047f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2202      	movs	r2, #2
 80047fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	699b      	ldr	r3, [r3, #24]
 8004806:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800480a:	2b00      	cmp	r3, #0
 800480c:	d003      	beq.n	8004816 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f7fc fd1a 	bl	8001248 <HAL_TIM_IC_CaptureCallback>
 8004814:	e005      	b.n	8004822 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f000 fa52 	bl	8004cc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	f000 fa58 	bl	8004cd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	691b      	ldr	r3, [r3, #16]
 800482e:	f003 0308 	and.w	r3, r3, #8
 8004832:	2b08      	cmp	r3, #8
 8004834:	d122      	bne.n	800487c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	f003 0308 	and.w	r3, r3, #8
 8004840:	2b08      	cmp	r3, #8
 8004842:	d11b      	bne.n	800487c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f06f 0208 	mvn.w	r2, #8
 800484c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2204      	movs	r2, #4
 8004852:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	69db      	ldr	r3, [r3, #28]
 800485a:	f003 0303 	and.w	r3, r3, #3
 800485e:	2b00      	cmp	r3, #0
 8004860:	d003      	beq.n	800486a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f7fc fcf0 	bl	8001248 <HAL_TIM_IC_CaptureCallback>
 8004868:	e005      	b.n	8004876 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f000 fa28 	bl	8004cc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	f000 fa2e 	bl	8004cd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2200      	movs	r2, #0
 800487a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	691b      	ldr	r3, [r3, #16]
 8004882:	f003 0310 	and.w	r3, r3, #16
 8004886:	2b10      	cmp	r3, #16
 8004888:	d122      	bne.n	80048d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	f003 0310 	and.w	r3, r3, #16
 8004894:	2b10      	cmp	r3, #16
 8004896:	d11b      	bne.n	80048d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f06f 0210 	mvn.w	r2, #16
 80048a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2208      	movs	r2, #8
 80048a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	69db      	ldr	r3, [r3, #28]
 80048ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d003      	beq.n	80048be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f7fc fcc6 	bl	8001248 <HAL_TIM_IC_CaptureCallback>
 80048bc:	e005      	b.n	80048ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f000 f9fe 	bl	8004cc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f000 fa04 	bl	8004cd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	691b      	ldr	r3, [r3, #16]
 80048d6:	f003 0301 	and.w	r3, r3, #1
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d10e      	bne.n	80048fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	f003 0301 	and.w	r3, r3, #1
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d107      	bne.n	80048fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f06f 0201 	mvn.w	r2, #1
 80048f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f7fd f8f0 	bl	8001adc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	691b      	ldr	r3, [r3, #16]
 8004902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004906:	2b80      	cmp	r3, #128	; 0x80
 8004908:	d10e      	bne.n	8004928 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	68db      	ldr	r3, [r3, #12]
 8004910:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004914:	2b80      	cmp	r3, #128	; 0x80
 8004916:	d107      	bne.n	8004928 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004920:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f000 fc79 	bl	800521a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	691b      	ldr	r3, [r3, #16]
 800492e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004932:	2b40      	cmp	r3, #64	; 0x40
 8004934:	d10e      	bne.n	8004954 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004940:	2b40      	cmp	r3, #64	; 0x40
 8004942:	d107      	bne.n	8004954 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800494c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f000 f9c8 	bl	8004ce4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	691b      	ldr	r3, [r3, #16]
 800495a:	f003 0320 	and.w	r3, r3, #32
 800495e:	2b20      	cmp	r3, #32
 8004960:	d10e      	bne.n	8004980 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	f003 0320 	and.w	r3, r3, #32
 800496c:	2b20      	cmp	r3, #32
 800496e:	d107      	bne.n	8004980 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f06f 0220 	mvn.w	r2, #32
 8004978:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 fc44 	bl	8005208 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004980:	bf00      	nop
 8004982:	3708      	adds	r7, #8
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}

08004988 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b084      	sub	sp, #16
 800498c:	af00      	add	r7, sp, #0
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	60b9      	str	r1, [r7, #8]
 8004992:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800499a:	2b01      	cmp	r3, #1
 800499c:	d101      	bne.n	80049a2 <HAL_TIM_IC_ConfigChannel+0x1a>
 800499e:	2302      	movs	r3, #2
 80049a0:	e082      	b.n	8004aa8 <HAL_TIM_IC_ConfigChannel+0x120>
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2201      	movs	r2, #1
 80049a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d11b      	bne.n	80049e8 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6818      	ldr	r0, [r3, #0]
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	6819      	ldr	r1, [r3, #0]
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	685a      	ldr	r2, [r3, #4]
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	68db      	ldr	r3, [r3, #12]
 80049c0:	f000 f9fc 	bl	8004dbc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	699a      	ldr	r2, [r3, #24]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f022 020c 	bic.w	r2, r2, #12
 80049d2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	6999      	ldr	r1, [r3, #24]
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	689a      	ldr	r2, [r3, #8]
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	430a      	orrs	r2, r1
 80049e4:	619a      	str	r2, [r3, #24]
 80049e6:	e05a      	b.n	8004a9e <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2b04      	cmp	r3, #4
 80049ec:	d11c      	bne.n	8004a28 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	6818      	ldr	r0, [r3, #0]
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	6819      	ldr	r1, [r3, #0]
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	685a      	ldr	r2, [r3, #4]
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	68db      	ldr	r3, [r3, #12]
 80049fe:	f000 fa65 	bl	8004ecc <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	699a      	ldr	r2, [r3, #24]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004a10:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	6999      	ldr	r1, [r3, #24]
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	021a      	lsls	r2, r3, #8
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	430a      	orrs	r2, r1
 8004a24:	619a      	str	r2, [r3, #24]
 8004a26:	e03a      	b.n	8004a9e <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2b08      	cmp	r3, #8
 8004a2c:	d11b      	bne.n	8004a66 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	6818      	ldr	r0, [r3, #0]
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	6819      	ldr	r1, [r3, #0]
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	685a      	ldr	r2, [r3, #4]
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	68db      	ldr	r3, [r3, #12]
 8004a3e:	f000 fab0 	bl	8004fa2 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	69da      	ldr	r2, [r3, #28]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f022 020c 	bic.w	r2, r2, #12
 8004a50:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	69d9      	ldr	r1, [r3, #28]
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	689a      	ldr	r2, [r3, #8]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	430a      	orrs	r2, r1
 8004a62:	61da      	str	r2, [r3, #28]
 8004a64:	e01b      	b.n	8004a9e <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	6818      	ldr	r0, [r3, #0]
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	6819      	ldr	r1, [r3, #0]
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	685a      	ldr	r2, [r3, #4]
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	f000 facf 	bl	8005018 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	69da      	ldr	r2, [r3, #28]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004a88:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	69d9      	ldr	r1, [r3, #28]
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	021a      	lsls	r2, r3, #8
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	430a      	orrs	r2, r1
 8004a9c:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004aa6:	2300      	movs	r3, #0
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3710      	adds	r7, #16
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}

08004ab0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b084      	sub	sp, #16
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d101      	bne.n	8004ac8 <HAL_TIM_ConfigClockSource+0x18>
 8004ac4:	2302      	movs	r3, #2
 8004ac6:	e0b3      	b.n	8004c30 <HAL_TIM_ConfigClockSource+0x180>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2202      	movs	r2, #2
 8004ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004ae6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004aee:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	68fa      	ldr	r2, [r7, #12]
 8004af6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b00:	d03e      	beq.n	8004b80 <HAL_TIM_ConfigClockSource+0xd0>
 8004b02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b06:	f200 8087 	bhi.w	8004c18 <HAL_TIM_ConfigClockSource+0x168>
 8004b0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b0e:	f000 8085 	beq.w	8004c1c <HAL_TIM_ConfigClockSource+0x16c>
 8004b12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b16:	d87f      	bhi.n	8004c18 <HAL_TIM_ConfigClockSource+0x168>
 8004b18:	2b70      	cmp	r3, #112	; 0x70
 8004b1a:	d01a      	beq.n	8004b52 <HAL_TIM_ConfigClockSource+0xa2>
 8004b1c:	2b70      	cmp	r3, #112	; 0x70
 8004b1e:	d87b      	bhi.n	8004c18 <HAL_TIM_ConfigClockSource+0x168>
 8004b20:	2b60      	cmp	r3, #96	; 0x60
 8004b22:	d050      	beq.n	8004bc6 <HAL_TIM_ConfigClockSource+0x116>
 8004b24:	2b60      	cmp	r3, #96	; 0x60
 8004b26:	d877      	bhi.n	8004c18 <HAL_TIM_ConfigClockSource+0x168>
 8004b28:	2b50      	cmp	r3, #80	; 0x50
 8004b2a:	d03c      	beq.n	8004ba6 <HAL_TIM_ConfigClockSource+0xf6>
 8004b2c:	2b50      	cmp	r3, #80	; 0x50
 8004b2e:	d873      	bhi.n	8004c18 <HAL_TIM_ConfigClockSource+0x168>
 8004b30:	2b40      	cmp	r3, #64	; 0x40
 8004b32:	d058      	beq.n	8004be6 <HAL_TIM_ConfigClockSource+0x136>
 8004b34:	2b40      	cmp	r3, #64	; 0x40
 8004b36:	d86f      	bhi.n	8004c18 <HAL_TIM_ConfigClockSource+0x168>
 8004b38:	2b30      	cmp	r3, #48	; 0x30
 8004b3a:	d064      	beq.n	8004c06 <HAL_TIM_ConfigClockSource+0x156>
 8004b3c:	2b30      	cmp	r3, #48	; 0x30
 8004b3e:	d86b      	bhi.n	8004c18 <HAL_TIM_ConfigClockSource+0x168>
 8004b40:	2b20      	cmp	r3, #32
 8004b42:	d060      	beq.n	8004c06 <HAL_TIM_ConfigClockSource+0x156>
 8004b44:	2b20      	cmp	r3, #32
 8004b46:	d867      	bhi.n	8004c18 <HAL_TIM_ConfigClockSource+0x168>
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d05c      	beq.n	8004c06 <HAL_TIM_ConfigClockSource+0x156>
 8004b4c:	2b10      	cmp	r3, #16
 8004b4e:	d05a      	beq.n	8004c06 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004b50:	e062      	b.n	8004c18 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6818      	ldr	r0, [r3, #0]
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	6899      	ldr	r1, [r3, #8]
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	685a      	ldr	r2, [r3, #4]
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	f000 faaf 	bl	80050c4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004b74:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	68fa      	ldr	r2, [r7, #12]
 8004b7c:	609a      	str	r2, [r3, #8]
      break;
 8004b7e:	e04e      	b.n	8004c1e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6818      	ldr	r0, [r3, #0]
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	6899      	ldr	r1, [r3, #8]
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	685a      	ldr	r2, [r3, #4]
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	f000 fa98 	bl	80050c4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	689a      	ldr	r2, [r3, #8]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ba2:	609a      	str	r2, [r3, #8]
      break;
 8004ba4:	e03b      	b.n	8004c1e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6818      	ldr	r0, [r3, #0]
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	6859      	ldr	r1, [r3, #4]
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	f000 f95c 	bl	8004e70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	2150      	movs	r1, #80	; 0x50
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f000 fa66 	bl	8005090 <TIM_ITRx_SetConfig>
      break;
 8004bc4:	e02b      	b.n	8004c1e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6818      	ldr	r0, [r3, #0]
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	6859      	ldr	r1, [r3, #4]
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	f000 f9b6 	bl	8004f44 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	2160      	movs	r1, #96	; 0x60
 8004bde:	4618      	mov	r0, r3
 8004be0:	f000 fa56 	bl	8005090 <TIM_ITRx_SetConfig>
      break;
 8004be4:	e01b      	b.n	8004c1e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6818      	ldr	r0, [r3, #0]
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	6859      	ldr	r1, [r3, #4]
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	68db      	ldr	r3, [r3, #12]
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	f000 f93c 	bl	8004e70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	2140      	movs	r1, #64	; 0x40
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f000 fa46 	bl	8005090 <TIM_ITRx_SetConfig>
      break;
 8004c04:	e00b      	b.n	8004c1e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4619      	mov	r1, r3
 8004c10:	4610      	mov	r0, r2
 8004c12:	f000 fa3d 	bl	8005090 <TIM_ITRx_SetConfig>
        break;
 8004c16:	e002      	b.n	8004c1e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004c18:	bf00      	nop
 8004c1a:	e000      	b.n	8004c1e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004c1c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2201      	movs	r2, #1
 8004c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c2e:	2300      	movs	r3, #0
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3710      	adds	r7, #16
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}

08004c38 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b085      	sub	sp, #20
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004c42:	2300      	movs	r3, #0
 8004c44:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	2b0c      	cmp	r3, #12
 8004c4a:	d831      	bhi.n	8004cb0 <HAL_TIM_ReadCapturedValue+0x78>
 8004c4c:	a201      	add	r2, pc, #4	; (adr r2, 8004c54 <HAL_TIM_ReadCapturedValue+0x1c>)
 8004c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c52:	bf00      	nop
 8004c54:	08004c89 	.word	0x08004c89
 8004c58:	08004cb1 	.word	0x08004cb1
 8004c5c:	08004cb1 	.word	0x08004cb1
 8004c60:	08004cb1 	.word	0x08004cb1
 8004c64:	08004c93 	.word	0x08004c93
 8004c68:	08004cb1 	.word	0x08004cb1
 8004c6c:	08004cb1 	.word	0x08004cb1
 8004c70:	08004cb1 	.word	0x08004cb1
 8004c74:	08004c9d 	.word	0x08004c9d
 8004c78:	08004cb1 	.word	0x08004cb1
 8004c7c:	08004cb1 	.word	0x08004cb1
 8004c80:	08004cb1 	.word	0x08004cb1
 8004c84:	08004ca7 	.word	0x08004ca7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c8e:	60fb      	str	r3, [r7, #12]

      break;
 8004c90:	e00f      	b.n	8004cb2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c98:	60fb      	str	r3, [r7, #12]

      break;
 8004c9a:	e00a      	b.n	8004cb2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ca2:	60fb      	str	r3, [r7, #12]

      break;
 8004ca4:	e005      	b.n	8004cb2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cac:	60fb      	str	r3, [r7, #12]

      break;
 8004cae:	e000      	b.n	8004cb2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004cb0:	bf00      	nop
  }

  return tmpreg;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3714      	adds	r7, #20
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bc80      	pop	{r7}
 8004cbc:	4770      	bx	lr
 8004cbe:	bf00      	nop

08004cc0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b083      	sub	sp, #12
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004cc8:	bf00      	nop
 8004cca:	370c      	adds	r7, #12
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bc80      	pop	{r7}
 8004cd0:	4770      	bx	lr

08004cd2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004cd2:	b480      	push	{r7}
 8004cd4:	b083      	sub	sp, #12
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004cda:	bf00      	nop
 8004cdc:	370c      	adds	r7, #12
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bc80      	pop	{r7}
 8004ce2:	4770      	bx	lr

08004ce4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b083      	sub	sp, #12
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004cec:	bf00      	nop
 8004cee:	370c      	adds	r7, #12
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bc80      	pop	{r7}
 8004cf4:	4770      	bx	lr
	...

08004cf8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b085      	sub	sp, #20
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	4a29      	ldr	r2, [pc, #164]	; (8004db0 <TIM_Base_SetConfig+0xb8>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d00b      	beq.n	8004d28 <TIM_Base_SetConfig+0x30>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d16:	d007      	beq.n	8004d28 <TIM_Base_SetConfig+0x30>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	4a26      	ldr	r2, [pc, #152]	; (8004db4 <TIM_Base_SetConfig+0xbc>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d003      	beq.n	8004d28 <TIM_Base_SetConfig+0x30>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	4a25      	ldr	r2, [pc, #148]	; (8004db8 <TIM_Base_SetConfig+0xc0>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d108      	bne.n	8004d3a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	68fa      	ldr	r2, [r7, #12]
 8004d36:	4313      	orrs	r3, r2
 8004d38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	4a1c      	ldr	r2, [pc, #112]	; (8004db0 <TIM_Base_SetConfig+0xb8>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d00b      	beq.n	8004d5a <TIM_Base_SetConfig+0x62>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d48:	d007      	beq.n	8004d5a <TIM_Base_SetConfig+0x62>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	4a19      	ldr	r2, [pc, #100]	; (8004db4 <TIM_Base_SetConfig+0xbc>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d003      	beq.n	8004d5a <TIM_Base_SetConfig+0x62>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	4a18      	ldr	r2, [pc, #96]	; (8004db8 <TIM_Base_SetConfig+0xc0>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d108      	bne.n	8004d6c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	68db      	ldr	r3, [r3, #12]
 8004d66:	68fa      	ldr	r2, [r7, #12]
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	695b      	ldr	r3, [r3, #20]
 8004d76:	4313      	orrs	r3, r2
 8004d78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	68fa      	ldr	r2, [r7, #12]
 8004d7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	689a      	ldr	r2, [r3, #8]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	4a07      	ldr	r2, [pc, #28]	; (8004db0 <TIM_Base_SetConfig+0xb8>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d103      	bne.n	8004da0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	691a      	ldr	r2, [r3, #16]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2201      	movs	r2, #1
 8004da4:	615a      	str	r2, [r3, #20]
}
 8004da6:	bf00      	nop
 8004da8:	3714      	adds	r7, #20
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bc80      	pop	{r7}
 8004dae:	4770      	bx	lr
 8004db0:	40012c00 	.word	0x40012c00
 8004db4:	40000400 	.word	0x40000400
 8004db8:	40000800 	.word	0x40000800

08004dbc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b087      	sub	sp, #28
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	60f8      	str	r0, [r7, #12]
 8004dc4:	60b9      	str	r1, [r7, #8]
 8004dc6:	607a      	str	r2, [r7, #4]
 8004dc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	6a1b      	ldr	r3, [r3, #32]
 8004dce:	f023 0201 	bic.w	r2, r3, #1
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	699b      	ldr	r3, [r3, #24]
 8004dda:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6a1b      	ldr	r3, [r3, #32]
 8004de0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	4a1f      	ldr	r2, [pc, #124]	; (8004e64 <TIM_TI1_SetConfig+0xa8>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d00b      	beq.n	8004e02 <TIM_TI1_SetConfig+0x46>
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004df0:	d007      	beq.n	8004e02 <TIM_TI1_SetConfig+0x46>
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	4a1c      	ldr	r2, [pc, #112]	; (8004e68 <TIM_TI1_SetConfig+0xac>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d003      	beq.n	8004e02 <TIM_TI1_SetConfig+0x46>
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	4a1b      	ldr	r2, [pc, #108]	; (8004e6c <TIM_TI1_SetConfig+0xb0>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d101      	bne.n	8004e06 <TIM_TI1_SetConfig+0x4a>
 8004e02:	2301      	movs	r3, #1
 8004e04:	e000      	b.n	8004e08 <TIM_TI1_SetConfig+0x4c>
 8004e06:	2300      	movs	r3, #0
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d008      	beq.n	8004e1e <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	f023 0303 	bic.w	r3, r3, #3
 8004e12:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004e14:	697a      	ldr	r2, [r7, #20]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	617b      	str	r3, [r7, #20]
 8004e1c:	e003      	b.n	8004e26 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	f043 0301 	orr.w	r3, r3, #1
 8004e24:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e2c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	011b      	lsls	r3, r3, #4
 8004e32:	b2db      	uxtb	r3, r3
 8004e34:	697a      	ldr	r2, [r7, #20]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	f023 030a 	bic.w	r3, r3, #10
 8004e40:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	f003 030a 	and.w	r3, r3, #10
 8004e48:	693a      	ldr	r2, [r7, #16]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	697a      	ldr	r2, [r7, #20]
 8004e52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	693a      	ldr	r2, [r7, #16]
 8004e58:	621a      	str	r2, [r3, #32]
}
 8004e5a:	bf00      	nop
 8004e5c:	371c      	adds	r7, #28
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bc80      	pop	{r7}
 8004e62:	4770      	bx	lr
 8004e64:	40012c00 	.word	0x40012c00
 8004e68:	40000400 	.word	0x40000400
 8004e6c:	40000800 	.word	0x40000800

08004e70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b087      	sub	sp, #28
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	60f8      	str	r0, [r7, #12]
 8004e78:	60b9      	str	r1, [r7, #8]
 8004e7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	6a1b      	ldr	r3, [r3, #32]
 8004e80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	6a1b      	ldr	r3, [r3, #32]
 8004e86:	f023 0201 	bic.w	r2, r3, #1
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	699b      	ldr	r3, [r3, #24]
 8004e92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	011b      	lsls	r3, r3, #4
 8004ea0:	693a      	ldr	r2, [r7, #16]
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	f023 030a 	bic.w	r3, r3, #10
 8004eac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004eae:	697a      	ldr	r2, [r7, #20]
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	693a      	ldr	r2, [r7, #16]
 8004eba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	697a      	ldr	r2, [r7, #20]
 8004ec0:	621a      	str	r2, [r3, #32]
}
 8004ec2:	bf00      	nop
 8004ec4:	371c      	adds	r7, #28
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bc80      	pop	{r7}
 8004eca:	4770      	bx	lr

08004ecc <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b087      	sub	sp, #28
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	60b9      	str	r1, [r7, #8]
 8004ed6:	607a      	str	r2, [r7, #4]
 8004ed8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	6a1b      	ldr	r3, [r3, #32]
 8004ede:	f023 0210 	bic.w	r2, r3, #16
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	699b      	ldr	r3, [r3, #24]
 8004eea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	6a1b      	ldr	r3, [r3, #32]
 8004ef0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ef8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	021b      	lsls	r3, r3, #8
 8004efe:	697a      	ldr	r2, [r7, #20]
 8004f00:	4313      	orrs	r3, r2
 8004f02:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f0a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	031b      	lsls	r3, r3, #12
 8004f10:	b29b      	uxth	r3, r3
 8004f12:	697a      	ldr	r2, [r7, #20]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004f1e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	011b      	lsls	r3, r3, #4
 8004f24:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004f28:	693a      	ldr	r2, [r7, #16]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	697a      	ldr	r2, [r7, #20]
 8004f32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	693a      	ldr	r2, [r7, #16]
 8004f38:	621a      	str	r2, [r3, #32]
}
 8004f3a:	bf00      	nop
 8004f3c:	371c      	adds	r7, #28
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bc80      	pop	{r7}
 8004f42:	4770      	bx	lr

08004f44 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b087      	sub	sp, #28
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	60f8      	str	r0, [r7, #12]
 8004f4c:	60b9      	str	r1, [r7, #8]
 8004f4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	6a1b      	ldr	r3, [r3, #32]
 8004f54:	f023 0210 	bic.w	r2, r3, #16
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	699b      	ldr	r3, [r3, #24]
 8004f60:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	6a1b      	ldr	r3, [r3, #32]
 8004f66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f6e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	031b      	lsls	r3, r3, #12
 8004f74:	697a      	ldr	r2, [r7, #20]
 8004f76:	4313      	orrs	r3, r2
 8004f78:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004f80:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	011b      	lsls	r3, r3, #4
 8004f86:	693a      	ldr	r2, [r7, #16]
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	697a      	ldr	r2, [r7, #20]
 8004f90:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	693a      	ldr	r2, [r7, #16]
 8004f96:	621a      	str	r2, [r3, #32]
}
 8004f98:	bf00      	nop
 8004f9a:	371c      	adds	r7, #28
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bc80      	pop	{r7}
 8004fa0:	4770      	bx	lr

08004fa2 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004fa2:	b480      	push	{r7}
 8004fa4:	b087      	sub	sp, #28
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	60f8      	str	r0, [r7, #12]
 8004faa:	60b9      	str	r1, [r7, #8]
 8004fac:	607a      	str	r2, [r7, #4]
 8004fae:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	6a1b      	ldr	r3, [r3, #32]
 8004fb4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	69db      	ldr	r3, [r3, #28]
 8004fc0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	6a1b      	ldr	r3, [r3, #32]
 8004fc6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	f023 0303 	bic.w	r3, r3, #3
 8004fce:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004fd0:	697a      	ldr	r2, [r7, #20]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004fde:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	011b      	lsls	r3, r3, #4
 8004fe4:	b2db      	uxtb	r3, r3
 8004fe6:	697a      	ldr	r2, [r7, #20]
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ff2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	021b      	lsls	r3, r3, #8
 8004ff8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ffc:	693a      	ldr	r2, [r7, #16]
 8004ffe:	4313      	orrs	r3, r2
 8005000:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	697a      	ldr	r2, [r7, #20]
 8005006:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	693a      	ldr	r2, [r7, #16]
 800500c:	621a      	str	r2, [r3, #32]
}
 800500e:	bf00      	nop
 8005010:	371c      	adds	r7, #28
 8005012:	46bd      	mov	sp, r7
 8005014:	bc80      	pop	{r7}
 8005016:	4770      	bx	lr

08005018 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005018:	b480      	push	{r7}
 800501a:	b087      	sub	sp, #28
 800501c:	af00      	add	r7, sp, #0
 800501e:	60f8      	str	r0, [r7, #12]
 8005020:	60b9      	str	r1, [r7, #8]
 8005022:	607a      	str	r2, [r7, #4]
 8005024:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	6a1b      	ldr	r3, [r3, #32]
 800502a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	69db      	ldr	r3, [r3, #28]
 8005036:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	6a1b      	ldr	r3, [r3, #32]
 800503c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005044:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	021b      	lsls	r3, r3, #8
 800504a:	697a      	ldr	r2, [r7, #20]
 800504c:	4313      	orrs	r3, r2
 800504e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005056:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	031b      	lsls	r3, r3, #12
 800505c:	b29b      	uxth	r3, r3
 800505e:	697a      	ldr	r2, [r7, #20]
 8005060:	4313      	orrs	r3, r2
 8005062:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800506a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	031b      	lsls	r3, r3, #12
 8005070:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005074:	693a      	ldr	r2, [r7, #16]
 8005076:	4313      	orrs	r3, r2
 8005078:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	697a      	ldr	r2, [r7, #20]
 800507e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	693a      	ldr	r2, [r7, #16]
 8005084:	621a      	str	r2, [r3, #32]
}
 8005086:	bf00      	nop
 8005088:	371c      	adds	r7, #28
 800508a:	46bd      	mov	sp, r7
 800508c:	bc80      	pop	{r7}
 800508e:	4770      	bx	lr

08005090 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005090:	b480      	push	{r7}
 8005092:	b085      	sub	sp, #20
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050a6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80050a8:	683a      	ldr	r2, [r7, #0]
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	4313      	orrs	r3, r2
 80050ae:	f043 0307 	orr.w	r3, r3, #7
 80050b2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	68fa      	ldr	r2, [r7, #12]
 80050b8:	609a      	str	r2, [r3, #8]
}
 80050ba:	bf00      	nop
 80050bc:	3714      	adds	r7, #20
 80050be:	46bd      	mov	sp, r7
 80050c0:	bc80      	pop	{r7}
 80050c2:	4770      	bx	lr

080050c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b087      	sub	sp, #28
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	60f8      	str	r0, [r7, #12]
 80050cc:	60b9      	str	r1, [r7, #8]
 80050ce:	607a      	str	r2, [r7, #4]
 80050d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80050de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	021a      	lsls	r2, r3, #8
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	431a      	orrs	r2, r3
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	4313      	orrs	r3, r2
 80050ec:	697a      	ldr	r2, [r7, #20]
 80050ee:	4313      	orrs	r3, r2
 80050f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	697a      	ldr	r2, [r7, #20]
 80050f6:	609a      	str	r2, [r3, #8]
}
 80050f8:	bf00      	nop
 80050fa:	371c      	adds	r7, #28
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bc80      	pop	{r7}
 8005100:	4770      	bx	lr

08005102 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005102:	b480      	push	{r7}
 8005104:	b087      	sub	sp, #28
 8005106:	af00      	add	r7, sp, #0
 8005108:	60f8      	str	r0, [r7, #12]
 800510a:	60b9      	str	r1, [r7, #8]
 800510c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	f003 031f 	and.w	r3, r3, #31
 8005114:	2201      	movs	r2, #1
 8005116:	fa02 f303 	lsl.w	r3, r2, r3
 800511a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	6a1a      	ldr	r2, [r3, #32]
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	43db      	mvns	r3, r3
 8005124:	401a      	ands	r2, r3
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	6a1a      	ldr	r2, [r3, #32]
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	f003 031f 	and.w	r3, r3, #31
 8005134:	6879      	ldr	r1, [r7, #4]
 8005136:	fa01 f303 	lsl.w	r3, r1, r3
 800513a:	431a      	orrs	r2, r3
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	621a      	str	r2, [r3, #32]
}
 8005140:	bf00      	nop
 8005142:	371c      	adds	r7, #28
 8005144:	46bd      	mov	sp, r7
 8005146:	bc80      	pop	{r7}
 8005148:	4770      	bx	lr
	...

0800514c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800514c:	b480      	push	{r7}
 800514e:	b085      	sub	sp, #20
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800515c:	2b01      	cmp	r3, #1
 800515e:	d101      	bne.n	8005164 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005160:	2302      	movs	r3, #2
 8005162:	e046      	b.n	80051f2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2202      	movs	r2, #2
 8005170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800518a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	68fa      	ldr	r2, [r7, #12]
 8005192:	4313      	orrs	r3, r2
 8005194:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	68fa      	ldr	r2, [r7, #12]
 800519c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a16      	ldr	r2, [pc, #88]	; (80051fc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d00e      	beq.n	80051c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051b0:	d009      	beq.n	80051c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a12      	ldr	r2, [pc, #72]	; (8005200 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d004      	beq.n	80051c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a10      	ldr	r2, [pc, #64]	; (8005204 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d10c      	bne.n	80051e0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	68ba      	ldr	r2, [r7, #8]
 80051d4:	4313      	orrs	r3, r2
 80051d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	68ba      	ldr	r2, [r7, #8]
 80051de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051f0:	2300      	movs	r3, #0
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3714      	adds	r7, #20
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bc80      	pop	{r7}
 80051fa:	4770      	bx	lr
 80051fc:	40012c00 	.word	0x40012c00
 8005200:	40000400 	.word	0x40000400
 8005204:	40000800 	.word	0x40000800

08005208 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005208:	b480      	push	{r7}
 800520a:	b083      	sub	sp, #12
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005210:	bf00      	nop
 8005212:	370c      	adds	r7, #12
 8005214:	46bd      	mov	sp, r7
 8005216:	bc80      	pop	{r7}
 8005218:	4770      	bx	lr

0800521a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800521a:	b480      	push	{r7}
 800521c:	b083      	sub	sp, #12
 800521e:	af00      	add	r7, sp, #0
 8005220:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005222:	bf00      	nop
 8005224:	370c      	adds	r7, #12
 8005226:	46bd      	mov	sp, r7
 8005228:	bc80      	pop	{r7}
 800522a:	4770      	bx	lr

0800522c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b082      	sub	sp, #8
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d101      	bne.n	800523e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	e03f      	b.n	80052be <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005244:	b2db      	uxtb	r3, r3
 8005246:	2b00      	cmp	r3, #0
 8005248:	d106      	bne.n	8005258 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f7fd fca4 	bl	8002ba0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2224      	movs	r2, #36	; 0x24
 800525c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	68da      	ldr	r2, [r3, #12]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800526e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f000 fd6d 	bl	8005d50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	691a      	ldr	r2, [r3, #16]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005284:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	695a      	ldr	r2, [r3, #20]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005294:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	68da      	ldr	r2, [r3, #12]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80052a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2220      	movs	r2, #32
 80052b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2220      	movs	r2, #32
 80052b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80052bc:	2300      	movs	r3, #0
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3708      	adds	r7, #8
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
	...

080052c8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b086      	sub	sp, #24
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	60f8      	str	r0, [r7, #12]
 80052d0:	60b9      	str	r1, [r7, #8]
 80052d2:	4613      	mov	r3, r2
 80052d4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	2b20      	cmp	r3, #32
 80052e0:	d153      	bne.n	800538a <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d002      	beq.n	80052ee <HAL_UART_Transmit_DMA+0x26>
 80052e8:	88fb      	ldrh	r3, [r7, #6]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d101      	bne.n	80052f2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	e04c      	b.n	800538c <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d101      	bne.n	8005300 <HAL_UART_Transmit_DMA+0x38>
 80052fc:	2302      	movs	r3, #2
 80052fe:	e045      	b.n	800538c <HAL_UART_Transmit_DMA+0xc4>
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2201      	movs	r2, #1
 8005304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005308:	68ba      	ldr	r2, [r7, #8]
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	88fa      	ldrh	r2, [r7, #6]
 8005312:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	88fa      	ldrh	r2, [r7, #6]
 8005318:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2200      	movs	r2, #0
 800531e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2221      	movs	r2, #33	; 0x21
 8005324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800532c:	4a19      	ldr	r2, [pc, #100]	; (8005394 <HAL_UART_Transmit_DMA+0xcc>)
 800532e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005334:	4a18      	ldr	r2, [pc, #96]	; (8005398 <HAL_UART_Transmit_DMA+0xd0>)
 8005336:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800533c:	4a17      	ldr	r2, [pc, #92]	; (800539c <HAL_UART_Transmit_DMA+0xd4>)
 800533e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005344:	2200      	movs	r2, #0
 8005346:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 8005348:	f107 0308 	add.w	r3, r7, #8
 800534c:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	6819      	ldr	r1, [r3, #0]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	3304      	adds	r3, #4
 800535c:	461a      	mov	r2, r3
 800535e:	88fb      	ldrh	r3, [r7, #6]
 8005360:	f7fd ff96 	bl	8003290 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800536c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2200      	movs	r2, #0
 8005372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	695a      	ldr	r2, [r3, #20]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005384:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8005386:	2300      	movs	r3, #0
 8005388:	e000      	b.n	800538c <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800538a:	2302      	movs	r3, #2
  }
}
 800538c:	4618      	mov	r0, r3
 800538e:	3718      	adds	r7, #24
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}
 8005394:	080057ef 	.word	0x080057ef
 8005398:	08005841 	.word	0x08005841
 800539c:	08005929 	.word	0x08005929

080053a0 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b086      	sub	sp, #24
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	60f8      	str	r0, [r7, #12]
 80053a8:	60b9      	str	r1, [r7, #8]
 80053aa:	4613      	mov	r3, r2
 80053ac:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	2b20      	cmp	r3, #32
 80053b8:	d13c      	bne.n	8005434 <HAL_UARTEx_ReceiveToIdle_DMA+0x94>
  {
    if ((pData == NULL) || (Size == 0U))
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d002      	beq.n	80053c6 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80053c0:	88fb      	ldrh	r3, [r7, #6]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d101      	bne.n	80053ca <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	e035      	b.n	8005436 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
    }

    __HAL_LOCK(huart);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d101      	bne.n	80053d8 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 80053d4:	2302      	movs	r3, #2
 80053d6:	e02e      	b.n	8005436 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2201      	movs	r2, #1
 80053dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2201      	movs	r2, #1
 80053e4:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80053e6:	88fb      	ldrh	r3, [r7, #6]
 80053e8:	461a      	mov	r2, r3
 80053ea:	68b9      	ldr	r1, [r7, #8]
 80053ec:	68f8      	ldr	r0, [r7, #12]
 80053ee:	f000 fae5 	bl	80059bc <UART_Start_Receive_DMA>
 80053f2:	4603      	mov	r3, r0
 80053f4:	75fb      	strb	r3, [r7, #23]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80053f6:	7dfb      	ldrb	r3, [r7, #23]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d119      	bne.n	8005430 <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005400:	2b01      	cmp	r3, #1
 8005402:	d113      	bne.n	800542c <HAL_UARTEx_ReceiveToIdle_DMA+0x8c>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005404:	2300      	movs	r3, #0
 8005406:	613b      	str	r3, [r7, #16]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	613b      	str	r3, [r7, #16]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	613b      	str	r3, [r7, #16]
 8005418:	693b      	ldr	r3, [r7, #16]
        SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	68da      	ldr	r2, [r3, #12]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f042 0210 	orr.w	r2, r2, #16
 8005428:	60da      	str	r2, [r3, #12]
 800542a:	e001      	b.n	8005430 <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800542c:	2301      	movs	r3, #1
 800542e:	75fb      	strb	r3, [r7, #23]
      }
    }

    return status;
 8005430:	7dfb      	ldrb	r3, [r7, #23]
 8005432:	e000      	b.n	8005436 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
  }
  else
  {
    return HAL_BUSY;
 8005434:	2302      	movs	r3, #2
  }
}
 8005436:	4618      	mov	r0, r3
 8005438:	3718      	adds	r7, #24
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}
	...

08005440 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b08a      	sub	sp, #40	; 0x28
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	68db      	ldr	r3, [r3, #12]
 8005456:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	695b      	ldr	r3, [r3, #20]
 800545e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005460:	2300      	movs	r3, #0
 8005462:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005464:	2300      	movs	r3, #0
 8005466:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546a:	f003 030f 	and.w	r3, r3, #15
 800546e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005470:	69bb      	ldr	r3, [r7, #24]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d10d      	bne.n	8005492 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005478:	f003 0320 	and.w	r3, r3, #32
 800547c:	2b00      	cmp	r3, #0
 800547e:	d008      	beq.n	8005492 <HAL_UART_IRQHandler+0x52>
 8005480:	6a3b      	ldr	r3, [r7, #32]
 8005482:	f003 0320 	and.w	r3, r3, #32
 8005486:	2b00      	cmp	r3, #0
 8005488:	d003      	beq.n	8005492 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f000 fbb6 	bl	8005bfc <UART_Receive_IT>
      return;
 8005490:	e17b      	b.n	800578a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005492:	69bb      	ldr	r3, [r7, #24]
 8005494:	2b00      	cmp	r3, #0
 8005496:	f000 80b1 	beq.w	80055fc <HAL_UART_IRQHandler+0x1bc>
 800549a:	69fb      	ldr	r3, [r7, #28]
 800549c:	f003 0301 	and.w	r3, r3, #1
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d105      	bne.n	80054b0 <HAL_UART_IRQHandler+0x70>
 80054a4:	6a3b      	ldr	r3, [r7, #32]
 80054a6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	f000 80a6 	beq.w	80055fc <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80054b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b2:	f003 0301 	and.w	r3, r3, #1
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d00a      	beq.n	80054d0 <HAL_UART_IRQHandler+0x90>
 80054ba:	6a3b      	ldr	r3, [r7, #32]
 80054bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d005      	beq.n	80054d0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c8:	f043 0201 	orr.w	r2, r3, #1
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80054d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d2:	f003 0304 	and.w	r3, r3, #4
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d00a      	beq.n	80054f0 <HAL_UART_IRQHandler+0xb0>
 80054da:	69fb      	ldr	r3, [r7, #28]
 80054dc:	f003 0301 	and.w	r3, r3, #1
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d005      	beq.n	80054f0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e8:	f043 0202 	orr.w	r2, r3, #2
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80054f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f2:	f003 0302 	and.w	r3, r3, #2
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d00a      	beq.n	8005510 <HAL_UART_IRQHandler+0xd0>
 80054fa:	69fb      	ldr	r3, [r7, #28]
 80054fc:	f003 0301 	and.w	r3, r3, #1
 8005500:	2b00      	cmp	r3, #0
 8005502:	d005      	beq.n	8005510 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005508:	f043 0204 	orr.w	r2, r3, #4
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005512:	f003 0308 	and.w	r3, r3, #8
 8005516:	2b00      	cmp	r3, #0
 8005518:	d00f      	beq.n	800553a <HAL_UART_IRQHandler+0xfa>
 800551a:	6a3b      	ldr	r3, [r7, #32]
 800551c:	f003 0320 	and.w	r3, r3, #32
 8005520:	2b00      	cmp	r3, #0
 8005522:	d104      	bne.n	800552e <HAL_UART_IRQHandler+0xee>
 8005524:	69fb      	ldr	r3, [r7, #28]
 8005526:	f003 0301 	and.w	r3, r3, #1
 800552a:	2b00      	cmp	r3, #0
 800552c:	d005      	beq.n	800553a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005532:	f043 0208 	orr.w	r2, r3, #8
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800553e:	2b00      	cmp	r3, #0
 8005540:	f000 811e 	beq.w	8005780 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005546:	f003 0320 	and.w	r3, r3, #32
 800554a:	2b00      	cmp	r3, #0
 800554c:	d007      	beq.n	800555e <HAL_UART_IRQHandler+0x11e>
 800554e:	6a3b      	ldr	r3, [r7, #32]
 8005550:	f003 0320 	and.w	r3, r3, #32
 8005554:	2b00      	cmp	r3, #0
 8005556:	d002      	beq.n	800555e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f000 fb4f 	bl	8005bfc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	695b      	ldr	r3, [r3, #20]
 8005564:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005568:	2b00      	cmp	r3, #0
 800556a:	bf14      	ite	ne
 800556c:	2301      	movne	r3, #1
 800556e:	2300      	moveq	r3, #0
 8005570:	b2db      	uxtb	r3, r3
 8005572:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005578:	f003 0308 	and.w	r3, r3, #8
 800557c:	2b00      	cmp	r3, #0
 800557e:	d102      	bne.n	8005586 <HAL_UART_IRQHandler+0x146>
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d031      	beq.n	80055ea <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f000 fa91 	bl	8005aae <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	695b      	ldr	r3, [r3, #20]
 8005592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005596:	2b00      	cmp	r3, #0
 8005598:	d023      	beq.n	80055e2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	695a      	ldr	r2, [r3, #20]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055a8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d013      	beq.n	80055da <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055b6:	4a76      	ldr	r2, [pc, #472]	; (8005790 <HAL_UART_IRQHandler+0x350>)
 80055b8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055be:	4618      	mov	r0, r3
 80055c0:	f7fd ff00 	bl	80033c4 <HAL_DMA_Abort_IT>
 80055c4:	4603      	mov	r3, r0
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d016      	beq.n	80055f8 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055d0:	687a      	ldr	r2, [r7, #4]
 80055d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80055d4:	4610      	mov	r0, r2
 80055d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055d8:	e00e      	b.n	80055f8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f000 f8fe 	bl	80057dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055e0:	e00a      	b.n	80055f8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f000 f8fa 	bl	80057dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055e8:	e006      	b.n	80055f8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f000 f8f6 	bl	80057dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2200      	movs	r2, #0
 80055f4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80055f6:	e0c3      	b.n	8005780 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055f8:	bf00      	nop
    return;
 80055fa:	e0c1      	b.n	8005780 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005600:	2b01      	cmp	r3, #1
 8005602:	f040 80a1 	bne.w	8005748 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8005606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005608:	f003 0310 	and.w	r3, r3, #16
 800560c:	2b00      	cmp	r3, #0
 800560e:	f000 809b 	beq.w	8005748 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8005612:	6a3b      	ldr	r3, [r7, #32]
 8005614:	f003 0310 	and.w	r3, r3, #16
 8005618:	2b00      	cmp	r3, #0
 800561a:	f000 8095 	beq.w	8005748 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800561e:	2300      	movs	r3, #0
 8005620:	60fb      	str	r3, [r7, #12]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	60fb      	str	r3, [r7, #12]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	60fb      	str	r3, [r7, #12]
 8005632:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	695b      	ldr	r3, [r3, #20]
 800563a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800563e:	2b00      	cmp	r3, #0
 8005640:	d04e      	beq.n	80056e0 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800564c:	8a3b      	ldrh	r3, [r7, #16]
 800564e:	2b00      	cmp	r3, #0
 8005650:	f000 8098 	beq.w	8005784 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005658:	8a3a      	ldrh	r2, [r7, #16]
 800565a:	429a      	cmp	r2, r3
 800565c:	f080 8092 	bcs.w	8005784 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	8a3a      	ldrh	r2, [r7, #16]
 8005664:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800566a:	699b      	ldr	r3, [r3, #24]
 800566c:	2b20      	cmp	r3, #32
 800566e:	d02b      	beq.n	80056c8 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	68da      	ldr	r2, [r3, #12]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800567e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	695a      	ldr	r2, [r3, #20]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f022 0201 	bic.w	r2, r2, #1
 800568e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	695a      	ldr	r2, [r3, #20]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800569e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2220      	movs	r2, #32
 80056a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	68da      	ldr	r2, [r3, #12]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f022 0210 	bic.w	r2, r2, #16
 80056bc:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c2:	4618      	mov	r0, r3
 80056c4:	f7fd fe43 	bl	800334e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	1ad3      	subs	r3, r2, r3
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	4619      	mov	r1, r3
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f7fc f9b5 	bl	8001a48 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80056de:	e051      	b.n	8005784 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	1ad3      	subs	r3, r2, r3
 80056ec:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d047      	beq.n	8005788 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80056f8:	8a7b      	ldrh	r3, [r7, #18]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d044      	beq.n	8005788 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	68da      	ldr	r2, [r3, #12]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800570c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	695a      	ldr	r2, [r3, #20]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f022 0201 	bic.w	r2, r2, #1
 800571c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2220      	movs	r2, #32
 8005722:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	68da      	ldr	r2, [r3, #12]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f022 0210 	bic.w	r2, r2, #16
 800573a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800573c:	8a7b      	ldrh	r3, [r7, #18]
 800573e:	4619      	mov	r1, r3
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f7fc f981 	bl	8001a48 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005746:	e01f      	b.n	8005788 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800574e:	2b00      	cmp	r3, #0
 8005750:	d008      	beq.n	8005764 <HAL_UART_IRQHandler+0x324>
 8005752:	6a3b      	ldr	r3, [r7, #32]
 8005754:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005758:	2b00      	cmp	r3, #0
 800575a:	d003      	beq.n	8005764 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800575c:	6878      	ldr	r0, [r7, #4]
 800575e:	f000 f9e6 	bl	8005b2e <UART_Transmit_IT>
    return;
 8005762:	e012      	b.n	800578a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800576a:	2b00      	cmp	r3, #0
 800576c:	d00d      	beq.n	800578a <HAL_UART_IRQHandler+0x34a>
 800576e:	6a3b      	ldr	r3, [r7, #32]
 8005770:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005774:	2b00      	cmp	r3, #0
 8005776:	d008      	beq.n	800578a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f000 fa27 	bl	8005bcc <UART_EndTransmit_IT>
    return;
 800577e:	e004      	b.n	800578a <HAL_UART_IRQHandler+0x34a>
    return;
 8005780:	bf00      	nop
 8005782:	e002      	b.n	800578a <HAL_UART_IRQHandler+0x34a>
      return;
 8005784:	bf00      	nop
 8005786:	e000      	b.n	800578a <HAL_UART_IRQHandler+0x34a>
      return;
 8005788:	bf00      	nop
  }
}
 800578a:	3728      	adds	r7, #40	; 0x28
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}
 8005790:	08005b07 	.word	0x08005b07

08005794 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005794:	b480      	push	{r7}
 8005796:	b083      	sub	sp, #12
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800579c:	bf00      	nop
 800579e:	370c      	adds	r7, #12
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bc80      	pop	{r7}
 80057a4:	4770      	bx	lr

080057a6 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80057a6:	b480      	push	{r7}
 80057a8:	b083      	sub	sp, #12
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80057ae:	bf00      	nop
 80057b0:	370c      	adds	r7, #12
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bc80      	pop	{r7}
 80057b6:	4770      	bx	lr

080057b8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b083      	sub	sp, #12
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80057c0:	bf00      	nop
 80057c2:	370c      	adds	r7, #12
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bc80      	pop	{r7}
 80057c8:	4770      	bx	lr

080057ca <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80057ca:	b480      	push	{r7}
 80057cc:	b083      	sub	sp, #12
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80057d2:	bf00      	nop
 80057d4:	370c      	adds	r7, #12
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bc80      	pop	{r7}
 80057da:	4770      	bx	lr

080057dc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80057dc:	b480      	push	{r7}
 80057de:	b083      	sub	sp, #12
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80057e4:	bf00      	nop
 80057e6:	370c      	adds	r7, #12
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bc80      	pop	{r7}
 80057ec:	4770      	bx	lr

080057ee <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80057ee:	b580      	push	{r7, lr}
 80057f0:	b084      	sub	sp, #16
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057fa:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f003 0320 	and.w	r3, r3, #32
 8005806:	2b00      	cmp	r3, #0
 8005808:	d113      	bne.n	8005832 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2200      	movs	r2, #0
 800580e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	695a      	ldr	r2, [r3, #20]
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800581e:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	68da      	ldr	r2, [r3, #12]
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800582e:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005830:	e002      	b.n	8005838 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8005832:	68f8      	ldr	r0, [r7, #12]
 8005834:	f7ff ffae 	bl	8005794 <HAL_UART_TxCpltCallback>
}
 8005838:	bf00      	nop
 800583a:	3710      	adds	r7, #16
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}

08005840 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b084      	sub	sp, #16
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800584c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800584e:	68f8      	ldr	r0, [r7, #12]
 8005850:	f7ff ffa9 	bl	80057a6 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005854:	bf00      	nop
 8005856:	3710      	adds	r7, #16
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}

0800585c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b084      	sub	sp, #16
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005868:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 0320 	and.w	r3, r3, #32
 8005874:	2b00      	cmp	r3, #0
 8005876:	d12a      	bne.n	80058ce <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2200      	movs	r2, #0
 800587c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	68da      	ldr	r2, [r3, #12]
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800588c:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	695a      	ldr	r2, [r3, #20]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f022 0201 	bic.w	r2, r2, #1
 800589c:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	695a      	ldr	r2, [r3, #20]
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058ac:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2220      	movs	r2, #32
 80058b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d107      	bne.n	80058ce <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	68da      	ldr	r2, [r3, #12]
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f022 0210 	bic.w	r2, r2, #16
 80058cc:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	d106      	bne.n	80058e4 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80058da:	4619      	mov	r1, r3
 80058dc:	68f8      	ldr	r0, [r7, #12]
 80058de:	f7fc f8b3 	bl	8001a48 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80058e2:	e002      	b.n	80058ea <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 80058e4:	68f8      	ldr	r0, [r7, #12]
 80058e6:	f7ff ff67 	bl	80057b8 <HAL_UART_RxCpltCallback>
}
 80058ea:	bf00      	nop
 80058ec:	3710      	adds	r7, #16
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}

080058f2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80058f2:	b580      	push	{r7, lr}
 80058f4:	b084      	sub	sp, #16
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058fe:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005904:	2b01      	cmp	r3, #1
 8005906:	d108      	bne.n	800591a <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800590c:	085b      	lsrs	r3, r3, #1
 800590e:	b29b      	uxth	r3, r3
 8005910:	4619      	mov	r1, r3
 8005912:	68f8      	ldr	r0, [r7, #12]
 8005914:	f7fc f898 	bl	8001a48 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005918:	e002      	b.n	8005920 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800591a:	68f8      	ldr	r0, [r7, #12]
 800591c:	f7ff ff55 	bl	80057ca <HAL_UART_RxHalfCpltCallback>
}
 8005920:	bf00      	nop
 8005922:	3710      	adds	r7, #16
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}

08005928 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b084      	sub	sp, #16
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005930:	2300      	movs	r3, #0
 8005932:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005938:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	695b      	ldr	r3, [r3, #20]
 8005940:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005944:	2b00      	cmp	r3, #0
 8005946:	bf14      	ite	ne
 8005948:	2301      	movne	r3, #1
 800594a:	2300      	moveq	r3, #0
 800594c:	b2db      	uxtb	r3, r3
 800594e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005956:	b2db      	uxtb	r3, r3
 8005958:	2b21      	cmp	r3, #33	; 0x21
 800595a:	d108      	bne.n	800596e <UART_DMAError+0x46>
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d005      	beq.n	800596e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	2200      	movs	r2, #0
 8005966:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005968:	68b8      	ldr	r0, [r7, #8]
 800596a:	f000 f88b 	bl	8005a84 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	695b      	ldr	r3, [r3, #20]
 8005974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005978:	2b00      	cmp	r3, #0
 800597a:	bf14      	ite	ne
 800597c:	2301      	movne	r3, #1
 800597e:	2300      	moveq	r3, #0
 8005980:	b2db      	uxtb	r3, r3
 8005982:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800598a:	b2db      	uxtb	r3, r3
 800598c:	2b22      	cmp	r3, #34	; 0x22
 800598e:	d108      	bne.n	80059a2 <UART_DMAError+0x7a>
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d005      	beq.n	80059a2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	2200      	movs	r2, #0
 800599a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800599c:	68b8      	ldr	r0, [r7, #8]
 800599e:	f000 f886 	bl	8005aae <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a6:	f043 0210 	orr.w	r2, r3, #16
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80059ae:	68b8      	ldr	r0, [r7, #8]
 80059b0:	f7ff ff14 	bl	80057dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059b4:	bf00      	nop
 80059b6:	3710      	adds	r7, #16
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}

080059bc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b086      	sub	sp, #24
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	60f8      	str	r0, [r7, #12]
 80059c4:	60b9      	str	r1, [r7, #8]
 80059c6:	4613      	mov	r3, r2
 80059c8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80059ca:	68ba      	ldr	r2, [r7, #8]
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	88fa      	ldrh	r2, [r7, #6]
 80059d4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2200      	movs	r2, #0
 80059da:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2222      	movs	r2, #34	; 0x22
 80059e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059e8:	4a23      	ldr	r2, [pc, #140]	; (8005a78 <UART_Start_Receive_DMA+0xbc>)
 80059ea:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059f0:	4a22      	ldr	r2, [pc, #136]	; (8005a7c <UART_Start_Receive_DMA+0xc0>)
 80059f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059f8:	4a21      	ldr	r2, [pc, #132]	; (8005a80 <UART_Start_Receive_DMA+0xc4>)
 80059fa:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a00:	2200      	movs	r2, #0
 8005a02:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005a04:	f107 0308 	add.w	r3, r7, #8
 8005a08:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	3304      	adds	r3, #4
 8005a14:	4619      	mov	r1, r3
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	88fb      	ldrh	r3, [r7, #6]
 8005a1c:	f7fd fc38 	bl	8003290 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005a20:	2300      	movs	r3, #0
 8005a22:	613b      	str	r3, [r7, #16]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	613b      	str	r3, [r7, #16]
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	613b      	str	r3, [r7, #16]
 8005a34:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	68da      	ldr	r2, [r3, #12]
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a4c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	695a      	ldr	r2, [r3, #20]
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f042 0201 	orr.w	r2, r2, #1
 8005a5c:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	695a      	ldr	r2, [r3, #20]
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a6c:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8005a6e:	2300      	movs	r3, #0
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3718      	adds	r7, #24
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}
 8005a78:	0800585d 	.word	0x0800585d
 8005a7c:	080058f3 	.word	0x080058f3
 8005a80:	08005929 	.word	0x08005929

08005a84 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b083      	sub	sp, #12
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	68da      	ldr	r2, [r3, #12]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005a9a:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2220      	movs	r2, #32
 8005aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005aa4:	bf00      	nop
 8005aa6:	370c      	adds	r7, #12
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bc80      	pop	{r7}
 8005aac:	4770      	bx	lr

08005aae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005aae:	b480      	push	{r7}
 8005ab0:	b083      	sub	sp, #12
 8005ab2:	af00      	add	r7, sp, #0
 8005ab4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	68da      	ldr	r2, [r3, #12]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005ac4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	695a      	ldr	r2, [r3, #20]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f022 0201 	bic.w	r2, r2, #1
 8005ad4:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	d107      	bne.n	8005aee <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	68da      	ldr	r2, [r3, #12]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f022 0210 	bic.w	r2, r2, #16
 8005aec:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2220      	movs	r2, #32
 8005af2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2200      	movs	r2, #0
 8005afa:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005afc:	bf00      	nop
 8005afe:	370c      	adds	r7, #12
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bc80      	pop	{r7}
 8005b04:	4770      	bx	lr

08005b06 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005b06:	b580      	push	{r7, lr}
 8005b08:	b084      	sub	sp, #16
 8005b0a:	af00      	add	r7, sp, #0
 8005b0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b12:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2200      	movs	r2, #0
 8005b18:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b20:	68f8      	ldr	r0, [r7, #12]
 8005b22:	f7ff fe5b 	bl	80057dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b26:	bf00      	nop
 8005b28:	3710      	adds	r7, #16
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}

08005b2e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005b2e:	b480      	push	{r7}
 8005b30:	b085      	sub	sp, #20
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b3c:	b2db      	uxtb	r3, r3
 8005b3e:	2b21      	cmp	r3, #33	; 0x21
 8005b40:	d13e      	bne.n	8005bc0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	689b      	ldr	r3, [r3, #8]
 8005b46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b4a:	d114      	bne.n	8005b76 <UART_Transmit_IT+0x48>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	691b      	ldr	r3, [r3, #16]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d110      	bne.n	8005b76 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6a1b      	ldr	r3, [r3, #32]
 8005b58:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	881b      	ldrh	r3, [r3, #0]
 8005b5e:	461a      	mov	r2, r3
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b68:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6a1b      	ldr	r3, [r3, #32]
 8005b6e:	1c9a      	adds	r2, r3, #2
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	621a      	str	r2, [r3, #32]
 8005b74:	e008      	b.n	8005b88 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6a1b      	ldr	r3, [r3, #32]
 8005b7a:	1c59      	adds	r1, r3, #1
 8005b7c:	687a      	ldr	r2, [r7, #4]
 8005b7e:	6211      	str	r1, [r2, #32]
 8005b80:	781a      	ldrb	r2, [r3, #0]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	3b01      	subs	r3, #1
 8005b90:	b29b      	uxth	r3, r3
 8005b92:	687a      	ldr	r2, [r7, #4]
 8005b94:	4619      	mov	r1, r3
 8005b96:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d10f      	bne.n	8005bbc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	68da      	ldr	r2, [r3, #12]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005baa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	68da      	ldr	r2, [r3, #12]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005bba:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	e000      	b.n	8005bc2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005bc0:	2302      	movs	r3, #2
  }
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3714      	adds	r7, #20
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bc80      	pop	{r7}
 8005bca:	4770      	bx	lr

08005bcc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b082      	sub	sp, #8
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	68da      	ldr	r2, [r3, #12]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005be2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2220      	movs	r2, #32
 8005be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f7ff fdd1 	bl	8005794 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005bf2:	2300      	movs	r3, #0
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3708      	adds	r7, #8
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}

08005bfc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b086      	sub	sp, #24
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c0a:	b2db      	uxtb	r3, r3
 8005c0c:	2b22      	cmp	r3, #34	; 0x22
 8005c0e:	f040 8099 	bne.w	8005d44 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c1a:	d117      	bne.n	8005c4c <UART_Receive_IT+0x50>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	691b      	ldr	r3, [r3, #16]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d113      	bne.n	8005c4c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005c24:	2300      	movs	r3, #0
 8005c26:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c2c:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c3a:	b29a      	uxth	r2, r3
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c44:	1c9a      	adds	r2, r3, #2
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	629a      	str	r2, [r3, #40]	; 0x28
 8005c4a:	e026      	b.n	8005c9a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c50:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8005c52:	2300      	movs	r3, #0
 8005c54:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c5e:	d007      	beq.n	8005c70 <UART_Receive_IT+0x74>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d10a      	bne.n	8005c7e <UART_Receive_IT+0x82>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	691b      	ldr	r3, [r3, #16]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d106      	bne.n	8005c7e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	b2da      	uxtb	r2, r3
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	701a      	strb	r2, [r3, #0]
 8005c7c:	e008      	b.n	8005c90 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	b2db      	uxtb	r3, r3
 8005c86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c8a:	b2da      	uxtb	r2, r3
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c94:	1c5a      	adds	r2, r3, #1
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c9e:	b29b      	uxth	r3, r3
 8005ca0:	3b01      	subs	r3, #1
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	687a      	ldr	r2, [r7, #4]
 8005ca6:	4619      	mov	r1, r3
 8005ca8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d148      	bne.n	8005d40 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	68da      	ldr	r2, [r3, #12]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f022 0220 	bic.w	r2, r2, #32
 8005cbc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	68da      	ldr	r2, [r3, #12]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005ccc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	695a      	ldr	r2, [r3, #20]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f022 0201 	bic.w	r2, r2, #1
 8005cdc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2220      	movs	r2, #32
 8005ce2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	d123      	bne.n	8005d36 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	68da      	ldr	r2, [r3, #12]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f022 0210 	bic.w	r2, r2, #16
 8005d02:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f003 0310 	and.w	r3, r3, #16
 8005d0e:	2b10      	cmp	r3, #16
 8005d10:	d10a      	bne.n	8005d28 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005d12:	2300      	movs	r3, #0
 8005d14:	60fb      	str	r3, [r7, #12]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	60fb      	str	r3, [r7, #12]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	60fb      	str	r3, [r7, #12]
 8005d26:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005d2c:	4619      	mov	r1, r3
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f7fb fe8a 	bl	8001a48 <HAL_UARTEx_RxEventCallback>
 8005d34:	e002      	b.n	8005d3c <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f7ff fd3e 	bl	80057b8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	e002      	b.n	8005d46 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8005d40:	2300      	movs	r3, #0
 8005d42:	e000      	b.n	8005d46 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8005d44:	2302      	movs	r3, #2
  }
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3718      	adds	r7, #24
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}
	...

08005d50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b084      	sub	sp, #16
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	691b      	ldr	r3, [r3, #16]
 8005d5e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	68da      	ldr	r2, [r3, #12]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	430a      	orrs	r2, r1
 8005d6c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	689a      	ldr	r2, [r3, #8]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	691b      	ldr	r3, [r3, #16]
 8005d76:	431a      	orrs	r2, r3
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	695b      	ldr	r3, [r3, #20]
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	68db      	ldr	r3, [r3, #12]
 8005d86:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005d8a:	f023 030c 	bic.w	r3, r3, #12
 8005d8e:	687a      	ldr	r2, [r7, #4]
 8005d90:	6812      	ldr	r2, [r2, #0]
 8005d92:	68b9      	ldr	r1, [r7, #8]
 8005d94:	430b      	orrs	r3, r1
 8005d96:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	695b      	ldr	r3, [r3, #20]
 8005d9e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	699a      	ldr	r2, [r3, #24]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	430a      	orrs	r2, r1
 8005dac:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a2c      	ldr	r2, [pc, #176]	; (8005e64 <UART_SetConfig+0x114>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d103      	bne.n	8005dc0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005db8:	f7fe fa62 	bl	8004280 <HAL_RCC_GetPCLK2Freq>
 8005dbc:	60f8      	str	r0, [r7, #12]
 8005dbe:	e002      	b.n	8005dc6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005dc0:	f7fe fa4a 	bl	8004258 <HAL_RCC_GetPCLK1Freq>
 8005dc4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005dc6:	68fa      	ldr	r2, [r7, #12]
 8005dc8:	4613      	mov	r3, r2
 8005dca:	009b      	lsls	r3, r3, #2
 8005dcc:	4413      	add	r3, r2
 8005dce:	009a      	lsls	r2, r3, #2
 8005dd0:	441a      	add	r2, r3
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	009b      	lsls	r3, r3, #2
 8005dd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ddc:	4a22      	ldr	r2, [pc, #136]	; (8005e68 <UART_SetConfig+0x118>)
 8005dde:	fba2 2303 	umull	r2, r3, r2, r3
 8005de2:	095b      	lsrs	r3, r3, #5
 8005de4:	0119      	lsls	r1, r3, #4
 8005de6:	68fa      	ldr	r2, [r7, #12]
 8005de8:	4613      	mov	r3, r2
 8005dea:	009b      	lsls	r3, r3, #2
 8005dec:	4413      	add	r3, r2
 8005dee:	009a      	lsls	r2, r3, #2
 8005df0:	441a      	add	r2, r3
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	009b      	lsls	r3, r3, #2
 8005df8:	fbb2 f2f3 	udiv	r2, r2, r3
 8005dfc:	4b1a      	ldr	r3, [pc, #104]	; (8005e68 <UART_SetConfig+0x118>)
 8005dfe:	fba3 0302 	umull	r0, r3, r3, r2
 8005e02:	095b      	lsrs	r3, r3, #5
 8005e04:	2064      	movs	r0, #100	; 0x64
 8005e06:	fb00 f303 	mul.w	r3, r0, r3
 8005e0a:	1ad3      	subs	r3, r2, r3
 8005e0c:	011b      	lsls	r3, r3, #4
 8005e0e:	3332      	adds	r3, #50	; 0x32
 8005e10:	4a15      	ldr	r2, [pc, #84]	; (8005e68 <UART_SetConfig+0x118>)
 8005e12:	fba2 2303 	umull	r2, r3, r2, r3
 8005e16:	095b      	lsrs	r3, r3, #5
 8005e18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e1c:	4419      	add	r1, r3
 8005e1e:	68fa      	ldr	r2, [r7, #12]
 8005e20:	4613      	mov	r3, r2
 8005e22:	009b      	lsls	r3, r3, #2
 8005e24:	4413      	add	r3, r2
 8005e26:	009a      	lsls	r2, r3, #2
 8005e28:	441a      	add	r2, r3
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	009b      	lsls	r3, r3, #2
 8005e30:	fbb2 f2f3 	udiv	r2, r2, r3
 8005e34:	4b0c      	ldr	r3, [pc, #48]	; (8005e68 <UART_SetConfig+0x118>)
 8005e36:	fba3 0302 	umull	r0, r3, r3, r2
 8005e3a:	095b      	lsrs	r3, r3, #5
 8005e3c:	2064      	movs	r0, #100	; 0x64
 8005e3e:	fb00 f303 	mul.w	r3, r0, r3
 8005e42:	1ad3      	subs	r3, r2, r3
 8005e44:	011b      	lsls	r3, r3, #4
 8005e46:	3332      	adds	r3, #50	; 0x32
 8005e48:	4a07      	ldr	r2, [pc, #28]	; (8005e68 <UART_SetConfig+0x118>)
 8005e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e4e:	095b      	lsrs	r3, r3, #5
 8005e50:	f003 020f 	and.w	r2, r3, #15
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	440a      	add	r2, r1
 8005e5a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005e5c:	bf00      	nop
 8005e5e:	3710      	adds	r7, #16
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}
 8005e64:	40013800 	.word	0x40013800
 8005e68:	51eb851f 	.word	0x51eb851f

08005e6c <__errno>:
 8005e6c:	4b01      	ldr	r3, [pc, #4]	; (8005e74 <__errno+0x8>)
 8005e6e:	6818      	ldr	r0, [r3, #0]
 8005e70:	4770      	bx	lr
 8005e72:	bf00      	nop
 8005e74:	20000010 	.word	0x20000010

08005e78 <__libc_init_array>:
 8005e78:	b570      	push	{r4, r5, r6, lr}
 8005e7a:	2600      	movs	r6, #0
 8005e7c:	4d0c      	ldr	r5, [pc, #48]	; (8005eb0 <__libc_init_array+0x38>)
 8005e7e:	4c0d      	ldr	r4, [pc, #52]	; (8005eb4 <__libc_init_array+0x3c>)
 8005e80:	1b64      	subs	r4, r4, r5
 8005e82:	10a4      	asrs	r4, r4, #2
 8005e84:	42a6      	cmp	r6, r4
 8005e86:	d109      	bne.n	8005e9c <__libc_init_array+0x24>
 8005e88:	f000 fcbc 	bl	8006804 <_init>
 8005e8c:	2600      	movs	r6, #0
 8005e8e:	4d0a      	ldr	r5, [pc, #40]	; (8005eb8 <__libc_init_array+0x40>)
 8005e90:	4c0a      	ldr	r4, [pc, #40]	; (8005ebc <__libc_init_array+0x44>)
 8005e92:	1b64      	subs	r4, r4, r5
 8005e94:	10a4      	asrs	r4, r4, #2
 8005e96:	42a6      	cmp	r6, r4
 8005e98:	d105      	bne.n	8005ea6 <__libc_init_array+0x2e>
 8005e9a:	bd70      	pop	{r4, r5, r6, pc}
 8005e9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ea0:	4798      	blx	r3
 8005ea2:	3601      	adds	r6, #1
 8005ea4:	e7ee      	b.n	8005e84 <__libc_init_array+0xc>
 8005ea6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005eaa:	4798      	blx	r3
 8005eac:	3601      	adds	r6, #1
 8005eae:	e7f2      	b.n	8005e96 <__libc_init_array+0x1e>
 8005eb0:	0800698c 	.word	0x0800698c
 8005eb4:	0800698c 	.word	0x0800698c
 8005eb8:	0800698c 	.word	0x0800698c
 8005ebc:	08006990 	.word	0x08006990

08005ec0 <memcpy>:
 8005ec0:	440a      	add	r2, r1
 8005ec2:	4291      	cmp	r1, r2
 8005ec4:	f100 33ff 	add.w	r3, r0, #4294967295
 8005ec8:	d100      	bne.n	8005ecc <memcpy+0xc>
 8005eca:	4770      	bx	lr
 8005ecc:	b510      	push	{r4, lr}
 8005ece:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ed2:	4291      	cmp	r1, r2
 8005ed4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ed8:	d1f9      	bne.n	8005ece <memcpy+0xe>
 8005eda:	bd10      	pop	{r4, pc}

08005edc <memset>:
 8005edc:	4603      	mov	r3, r0
 8005ede:	4402      	add	r2, r0
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d100      	bne.n	8005ee6 <memset+0xa>
 8005ee4:	4770      	bx	lr
 8005ee6:	f803 1b01 	strb.w	r1, [r3], #1
 8005eea:	e7f9      	b.n	8005ee0 <memset+0x4>

08005eec <siprintf>:
 8005eec:	b40e      	push	{r1, r2, r3}
 8005eee:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005ef2:	b500      	push	{lr}
 8005ef4:	b09c      	sub	sp, #112	; 0x70
 8005ef6:	ab1d      	add	r3, sp, #116	; 0x74
 8005ef8:	9002      	str	r0, [sp, #8]
 8005efa:	9006      	str	r0, [sp, #24]
 8005efc:	9107      	str	r1, [sp, #28]
 8005efe:	9104      	str	r1, [sp, #16]
 8005f00:	4808      	ldr	r0, [pc, #32]	; (8005f24 <siprintf+0x38>)
 8005f02:	4909      	ldr	r1, [pc, #36]	; (8005f28 <siprintf+0x3c>)
 8005f04:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f08:	9105      	str	r1, [sp, #20]
 8005f0a:	6800      	ldr	r0, [r0, #0]
 8005f0c:	a902      	add	r1, sp, #8
 8005f0e:	9301      	str	r3, [sp, #4]
 8005f10:	f000 f888 	bl	8006024 <_svfiprintf_r>
 8005f14:	2200      	movs	r2, #0
 8005f16:	9b02      	ldr	r3, [sp, #8]
 8005f18:	701a      	strb	r2, [r3, #0]
 8005f1a:	b01c      	add	sp, #112	; 0x70
 8005f1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f20:	b003      	add	sp, #12
 8005f22:	4770      	bx	lr
 8005f24:	20000010 	.word	0x20000010
 8005f28:	ffff0208 	.word	0xffff0208

08005f2c <_vsiprintf_r>:
 8005f2c:	b500      	push	{lr}
 8005f2e:	b09b      	sub	sp, #108	; 0x6c
 8005f30:	9100      	str	r1, [sp, #0]
 8005f32:	9104      	str	r1, [sp, #16]
 8005f34:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005f38:	9105      	str	r1, [sp, #20]
 8005f3a:	9102      	str	r1, [sp, #8]
 8005f3c:	4905      	ldr	r1, [pc, #20]	; (8005f54 <_vsiprintf_r+0x28>)
 8005f3e:	9103      	str	r1, [sp, #12]
 8005f40:	4669      	mov	r1, sp
 8005f42:	f000 f86f 	bl	8006024 <_svfiprintf_r>
 8005f46:	2200      	movs	r2, #0
 8005f48:	9b00      	ldr	r3, [sp, #0]
 8005f4a:	701a      	strb	r2, [r3, #0]
 8005f4c:	b01b      	add	sp, #108	; 0x6c
 8005f4e:	f85d fb04 	ldr.w	pc, [sp], #4
 8005f52:	bf00      	nop
 8005f54:	ffff0208 	.word	0xffff0208

08005f58 <vsiprintf>:
 8005f58:	4613      	mov	r3, r2
 8005f5a:	460a      	mov	r2, r1
 8005f5c:	4601      	mov	r1, r0
 8005f5e:	4802      	ldr	r0, [pc, #8]	; (8005f68 <vsiprintf+0x10>)
 8005f60:	6800      	ldr	r0, [r0, #0]
 8005f62:	f7ff bfe3 	b.w	8005f2c <_vsiprintf_r>
 8005f66:	bf00      	nop
 8005f68:	20000010 	.word	0x20000010

08005f6c <__ssputs_r>:
 8005f6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f70:	688e      	ldr	r6, [r1, #8]
 8005f72:	4682      	mov	sl, r0
 8005f74:	429e      	cmp	r6, r3
 8005f76:	460c      	mov	r4, r1
 8005f78:	4690      	mov	r8, r2
 8005f7a:	461f      	mov	r7, r3
 8005f7c:	d838      	bhi.n	8005ff0 <__ssputs_r+0x84>
 8005f7e:	898a      	ldrh	r2, [r1, #12]
 8005f80:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005f84:	d032      	beq.n	8005fec <__ssputs_r+0x80>
 8005f86:	6825      	ldr	r5, [r4, #0]
 8005f88:	6909      	ldr	r1, [r1, #16]
 8005f8a:	3301      	adds	r3, #1
 8005f8c:	eba5 0901 	sub.w	r9, r5, r1
 8005f90:	6965      	ldr	r5, [r4, #20]
 8005f92:	444b      	add	r3, r9
 8005f94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005f98:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005f9c:	106d      	asrs	r5, r5, #1
 8005f9e:	429d      	cmp	r5, r3
 8005fa0:	bf38      	it	cc
 8005fa2:	461d      	movcc	r5, r3
 8005fa4:	0553      	lsls	r3, r2, #21
 8005fa6:	d531      	bpl.n	800600c <__ssputs_r+0xa0>
 8005fa8:	4629      	mov	r1, r5
 8005faa:	f000 fb61 	bl	8006670 <_malloc_r>
 8005fae:	4606      	mov	r6, r0
 8005fb0:	b950      	cbnz	r0, 8005fc8 <__ssputs_r+0x5c>
 8005fb2:	230c      	movs	r3, #12
 8005fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8005fb8:	f8ca 3000 	str.w	r3, [sl]
 8005fbc:	89a3      	ldrh	r3, [r4, #12]
 8005fbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fc2:	81a3      	strh	r3, [r4, #12]
 8005fc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fc8:	464a      	mov	r2, r9
 8005fca:	6921      	ldr	r1, [r4, #16]
 8005fcc:	f7ff ff78 	bl	8005ec0 <memcpy>
 8005fd0:	89a3      	ldrh	r3, [r4, #12]
 8005fd2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005fd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fda:	81a3      	strh	r3, [r4, #12]
 8005fdc:	6126      	str	r6, [r4, #16]
 8005fde:	444e      	add	r6, r9
 8005fe0:	6026      	str	r6, [r4, #0]
 8005fe2:	463e      	mov	r6, r7
 8005fe4:	6165      	str	r5, [r4, #20]
 8005fe6:	eba5 0509 	sub.w	r5, r5, r9
 8005fea:	60a5      	str	r5, [r4, #8]
 8005fec:	42be      	cmp	r6, r7
 8005fee:	d900      	bls.n	8005ff2 <__ssputs_r+0x86>
 8005ff0:	463e      	mov	r6, r7
 8005ff2:	4632      	mov	r2, r6
 8005ff4:	4641      	mov	r1, r8
 8005ff6:	6820      	ldr	r0, [r4, #0]
 8005ff8:	f000 fab8 	bl	800656c <memmove>
 8005ffc:	68a3      	ldr	r3, [r4, #8]
 8005ffe:	2000      	movs	r0, #0
 8006000:	1b9b      	subs	r3, r3, r6
 8006002:	60a3      	str	r3, [r4, #8]
 8006004:	6823      	ldr	r3, [r4, #0]
 8006006:	4433      	add	r3, r6
 8006008:	6023      	str	r3, [r4, #0]
 800600a:	e7db      	b.n	8005fc4 <__ssputs_r+0x58>
 800600c:	462a      	mov	r2, r5
 800600e:	f000 fba3 	bl	8006758 <_realloc_r>
 8006012:	4606      	mov	r6, r0
 8006014:	2800      	cmp	r0, #0
 8006016:	d1e1      	bne.n	8005fdc <__ssputs_r+0x70>
 8006018:	4650      	mov	r0, sl
 800601a:	6921      	ldr	r1, [r4, #16]
 800601c:	f000 fac0 	bl	80065a0 <_free_r>
 8006020:	e7c7      	b.n	8005fb2 <__ssputs_r+0x46>
	...

08006024 <_svfiprintf_r>:
 8006024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006028:	4698      	mov	r8, r3
 800602a:	898b      	ldrh	r3, [r1, #12]
 800602c:	4607      	mov	r7, r0
 800602e:	061b      	lsls	r3, r3, #24
 8006030:	460d      	mov	r5, r1
 8006032:	4614      	mov	r4, r2
 8006034:	b09d      	sub	sp, #116	; 0x74
 8006036:	d50e      	bpl.n	8006056 <_svfiprintf_r+0x32>
 8006038:	690b      	ldr	r3, [r1, #16]
 800603a:	b963      	cbnz	r3, 8006056 <_svfiprintf_r+0x32>
 800603c:	2140      	movs	r1, #64	; 0x40
 800603e:	f000 fb17 	bl	8006670 <_malloc_r>
 8006042:	6028      	str	r0, [r5, #0]
 8006044:	6128      	str	r0, [r5, #16]
 8006046:	b920      	cbnz	r0, 8006052 <_svfiprintf_r+0x2e>
 8006048:	230c      	movs	r3, #12
 800604a:	603b      	str	r3, [r7, #0]
 800604c:	f04f 30ff 	mov.w	r0, #4294967295
 8006050:	e0d1      	b.n	80061f6 <_svfiprintf_r+0x1d2>
 8006052:	2340      	movs	r3, #64	; 0x40
 8006054:	616b      	str	r3, [r5, #20]
 8006056:	2300      	movs	r3, #0
 8006058:	9309      	str	r3, [sp, #36]	; 0x24
 800605a:	2320      	movs	r3, #32
 800605c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006060:	2330      	movs	r3, #48	; 0x30
 8006062:	f04f 0901 	mov.w	r9, #1
 8006066:	f8cd 800c 	str.w	r8, [sp, #12]
 800606a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006210 <_svfiprintf_r+0x1ec>
 800606e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006072:	4623      	mov	r3, r4
 8006074:	469a      	mov	sl, r3
 8006076:	f813 2b01 	ldrb.w	r2, [r3], #1
 800607a:	b10a      	cbz	r2, 8006080 <_svfiprintf_r+0x5c>
 800607c:	2a25      	cmp	r2, #37	; 0x25
 800607e:	d1f9      	bne.n	8006074 <_svfiprintf_r+0x50>
 8006080:	ebba 0b04 	subs.w	fp, sl, r4
 8006084:	d00b      	beq.n	800609e <_svfiprintf_r+0x7a>
 8006086:	465b      	mov	r3, fp
 8006088:	4622      	mov	r2, r4
 800608a:	4629      	mov	r1, r5
 800608c:	4638      	mov	r0, r7
 800608e:	f7ff ff6d 	bl	8005f6c <__ssputs_r>
 8006092:	3001      	adds	r0, #1
 8006094:	f000 80aa 	beq.w	80061ec <_svfiprintf_r+0x1c8>
 8006098:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800609a:	445a      	add	r2, fp
 800609c:	9209      	str	r2, [sp, #36]	; 0x24
 800609e:	f89a 3000 	ldrb.w	r3, [sl]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	f000 80a2 	beq.w	80061ec <_svfiprintf_r+0x1c8>
 80060a8:	2300      	movs	r3, #0
 80060aa:	f04f 32ff 	mov.w	r2, #4294967295
 80060ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80060b2:	f10a 0a01 	add.w	sl, sl, #1
 80060b6:	9304      	str	r3, [sp, #16]
 80060b8:	9307      	str	r3, [sp, #28]
 80060ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80060be:	931a      	str	r3, [sp, #104]	; 0x68
 80060c0:	4654      	mov	r4, sl
 80060c2:	2205      	movs	r2, #5
 80060c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060c8:	4851      	ldr	r0, [pc, #324]	; (8006210 <_svfiprintf_r+0x1ec>)
 80060ca:	f000 fa41 	bl	8006550 <memchr>
 80060ce:	9a04      	ldr	r2, [sp, #16]
 80060d0:	b9d8      	cbnz	r0, 800610a <_svfiprintf_r+0xe6>
 80060d2:	06d0      	lsls	r0, r2, #27
 80060d4:	bf44      	itt	mi
 80060d6:	2320      	movmi	r3, #32
 80060d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80060dc:	0711      	lsls	r1, r2, #28
 80060de:	bf44      	itt	mi
 80060e0:	232b      	movmi	r3, #43	; 0x2b
 80060e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80060e6:	f89a 3000 	ldrb.w	r3, [sl]
 80060ea:	2b2a      	cmp	r3, #42	; 0x2a
 80060ec:	d015      	beq.n	800611a <_svfiprintf_r+0xf6>
 80060ee:	4654      	mov	r4, sl
 80060f0:	2000      	movs	r0, #0
 80060f2:	f04f 0c0a 	mov.w	ip, #10
 80060f6:	9a07      	ldr	r2, [sp, #28]
 80060f8:	4621      	mov	r1, r4
 80060fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80060fe:	3b30      	subs	r3, #48	; 0x30
 8006100:	2b09      	cmp	r3, #9
 8006102:	d94e      	bls.n	80061a2 <_svfiprintf_r+0x17e>
 8006104:	b1b0      	cbz	r0, 8006134 <_svfiprintf_r+0x110>
 8006106:	9207      	str	r2, [sp, #28]
 8006108:	e014      	b.n	8006134 <_svfiprintf_r+0x110>
 800610a:	eba0 0308 	sub.w	r3, r0, r8
 800610e:	fa09 f303 	lsl.w	r3, r9, r3
 8006112:	4313      	orrs	r3, r2
 8006114:	46a2      	mov	sl, r4
 8006116:	9304      	str	r3, [sp, #16]
 8006118:	e7d2      	b.n	80060c0 <_svfiprintf_r+0x9c>
 800611a:	9b03      	ldr	r3, [sp, #12]
 800611c:	1d19      	adds	r1, r3, #4
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	9103      	str	r1, [sp, #12]
 8006122:	2b00      	cmp	r3, #0
 8006124:	bfbb      	ittet	lt
 8006126:	425b      	neglt	r3, r3
 8006128:	f042 0202 	orrlt.w	r2, r2, #2
 800612c:	9307      	strge	r3, [sp, #28]
 800612e:	9307      	strlt	r3, [sp, #28]
 8006130:	bfb8      	it	lt
 8006132:	9204      	strlt	r2, [sp, #16]
 8006134:	7823      	ldrb	r3, [r4, #0]
 8006136:	2b2e      	cmp	r3, #46	; 0x2e
 8006138:	d10c      	bne.n	8006154 <_svfiprintf_r+0x130>
 800613a:	7863      	ldrb	r3, [r4, #1]
 800613c:	2b2a      	cmp	r3, #42	; 0x2a
 800613e:	d135      	bne.n	80061ac <_svfiprintf_r+0x188>
 8006140:	9b03      	ldr	r3, [sp, #12]
 8006142:	3402      	adds	r4, #2
 8006144:	1d1a      	adds	r2, r3, #4
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	9203      	str	r2, [sp, #12]
 800614a:	2b00      	cmp	r3, #0
 800614c:	bfb8      	it	lt
 800614e:	f04f 33ff 	movlt.w	r3, #4294967295
 8006152:	9305      	str	r3, [sp, #20]
 8006154:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8006214 <_svfiprintf_r+0x1f0>
 8006158:	2203      	movs	r2, #3
 800615a:	4650      	mov	r0, sl
 800615c:	7821      	ldrb	r1, [r4, #0]
 800615e:	f000 f9f7 	bl	8006550 <memchr>
 8006162:	b140      	cbz	r0, 8006176 <_svfiprintf_r+0x152>
 8006164:	2340      	movs	r3, #64	; 0x40
 8006166:	eba0 000a 	sub.w	r0, r0, sl
 800616a:	fa03 f000 	lsl.w	r0, r3, r0
 800616e:	9b04      	ldr	r3, [sp, #16]
 8006170:	3401      	adds	r4, #1
 8006172:	4303      	orrs	r3, r0
 8006174:	9304      	str	r3, [sp, #16]
 8006176:	f814 1b01 	ldrb.w	r1, [r4], #1
 800617a:	2206      	movs	r2, #6
 800617c:	4826      	ldr	r0, [pc, #152]	; (8006218 <_svfiprintf_r+0x1f4>)
 800617e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006182:	f000 f9e5 	bl	8006550 <memchr>
 8006186:	2800      	cmp	r0, #0
 8006188:	d038      	beq.n	80061fc <_svfiprintf_r+0x1d8>
 800618a:	4b24      	ldr	r3, [pc, #144]	; (800621c <_svfiprintf_r+0x1f8>)
 800618c:	bb1b      	cbnz	r3, 80061d6 <_svfiprintf_r+0x1b2>
 800618e:	9b03      	ldr	r3, [sp, #12]
 8006190:	3307      	adds	r3, #7
 8006192:	f023 0307 	bic.w	r3, r3, #7
 8006196:	3308      	adds	r3, #8
 8006198:	9303      	str	r3, [sp, #12]
 800619a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800619c:	4433      	add	r3, r6
 800619e:	9309      	str	r3, [sp, #36]	; 0x24
 80061a0:	e767      	b.n	8006072 <_svfiprintf_r+0x4e>
 80061a2:	460c      	mov	r4, r1
 80061a4:	2001      	movs	r0, #1
 80061a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80061aa:	e7a5      	b.n	80060f8 <_svfiprintf_r+0xd4>
 80061ac:	2300      	movs	r3, #0
 80061ae:	f04f 0c0a 	mov.w	ip, #10
 80061b2:	4619      	mov	r1, r3
 80061b4:	3401      	adds	r4, #1
 80061b6:	9305      	str	r3, [sp, #20]
 80061b8:	4620      	mov	r0, r4
 80061ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80061be:	3a30      	subs	r2, #48	; 0x30
 80061c0:	2a09      	cmp	r2, #9
 80061c2:	d903      	bls.n	80061cc <_svfiprintf_r+0x1a8>
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d0c5      	beq.n	8006154 <_svfiprintf_r+0x130>
 80061c8:	9105      	str	r1, [sp, #20]
 80061ca:	e7c3      	b.n	8006154 <_svfiprintf_r+0x130>
 80061cc:	4604      	mov	r4, r0
 80061ce:	2301      	movs	r3, #1
 80061d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80061d4:	e7f0      	b.n	80061b8 <_svfiprintf_r+0x194>
 80061d6:	ab03      	add	r3, sp, #12
 80061d8:	9300      	str	r3, [sp, #0]
 80061da:	462a      	mov	r2, r5
 80061dc:	4638      	mov	r0, r7
 80061de:	4b10      	ldr	r3, [pc, #64]	; (8006220 <_svfiprintf_r+0x1fc>)
 80061e0:	a904      	add	r1, sp, #16
 80061e2:	f3af 8000 	nop.w
 80061e6:	1c42      	adds	r2, r0, #1
 80061e8:	4606      	mov	r6, r0
 80061ea:	d1d6      	bne.n	800619a <_svfiprintf_r+0x176>
 80061ec:	89ab      	ldrh	r3, [r5, #12]
 80061ee:	065b      	lsls	r3, r3, #25
 80061f0:	f53f af2c 	bmi.w	800604c <_svfiprintf_r+0x28>
 80061f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80061f6:	b01d      	add	sp, #116	; 0x74
 80061f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061fc:	ab03      	add	r3, sp, #12
 80061fe:	9300      	str	r3, [sp, #0]
 8006200:	462a      	mov	r2, r5
 8006202:	4638      	mov	r0, r7
 8006204:	4b06      	ldr	r3, [pc, #24]	; (8006220 <_svfiprintf_r+0x1fc>)
 8006206:	a904      	add	r1, sp, #16
 8006208:	f000 f87c 	bl	8006304 <_printf_i>
 800620c:	e7eb      	b.n	80061e6 <_svfiprintf_r+0x1c2>
 800620e:	bf00      	nop
 8006210:	08006958 	.word	0x08006958
 8006214:	0800695e 	.word	0x0800695e
 8006218:	08006962 	.word	0x08006962
 800621c:	00000000 	.word	0x00000000
 8006220:	08005f6d 	.word	0x08005f6d

08006224 <_printf_common>:
 8006224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006228:	4616      	mov	r6, r2
 800622a:	4699      	mov	r9, r3
 800622c:	688a      	ldr	r2, [r1, #8]
 800622e:	690b      	ldr	r3, [r1, #16]
 8006230:	4607      	mov	r7, r0
 8006232:	4293      	cmp	r3, r2
 8006234:	bfb8      	it	lt
 8006236:	4613      	movlt	r3, r2
 8006238:	6033      	str	r3, [r6, #0]
 800623a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800623e:	460c      	mov	r4, r1
 8006240:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006244:	b10a      	cbz	r2, 800624a <_printf_common+0x26>
 8006246:	3301      	adds	r3, #1
 8006248:	6033      	str	r3, [r6, #0]
 800624a:	6823      	ldr	r3, [r4, #0]
 800624c:	0699      	lsls	r1, r3, #26
 800624e:	bf42      	ittt	mi
 8006250:	6833      	ldrmi	r3, [r6, #0]
 8006252:	3302      	addmi	r3, #2
 8006254:	6033      	strmi	r3, [r6, #0]
 8006256:	6825      	ldr	r5, [r4, #0]
 8006258:	f015 0506 	ands.w	r5, r5, #6
 800625c:	d106      	bne.n	800626c <_printf_common+0x48>
 800625e:	f104 0a19 	add.w	sl, r4, #25
 8006262:	68e3      	ldr	r3, [r4, #12]
 8006264:	6832      	ldr	r2, [r6, #0]
 8006266:	1a9b      	subs	r3, r3, r2
 8006268:	42ab      	cmp	r3, r5
 800626a:	dc28      	bgt.n	80062be <_printf_common+0x9a>
 800626c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006270:	1e13      	subs	r3, r2, #0
 8006272:	6822      	ldr	r2, [r4, #0]
 8006274:	bf18      	it	ne
 8006276:	2301      	movne	r3, #1
 8006278:	0692      	lsls	r2, r2, #26
 800627a:	d42d      	bmi.n	80062d8 <_printf_common+0xb4>
 800627c:	4649      	mov	r1, r9
 800627e:	4638      	mov	r0, r7
 8006280:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006284:	47c0      	blx	r8
 8006286:	3001      	adds	r0, #1
 8006288:	d020      	beq.n	80062cc <_printf_common+0xa8>
 800628a:	6823      	ldr	r3, [r4, #0]
 800628c:	68e5      	ldr	r5, [r4, #12]
 800628e:	f003 0306 	and.w	r3, r3, #6
 8006292:	2b04      	cmp	r3, #4
 8006294:	bf18      	it	ne
 8006296:	2500      	movne	r5, #0
 8006298:	6832      	ldr	r2, [r6, #0]
 800629a:	f04f 0600 	mov.w	r6, #0
 800629e:	68a3      	ldr	r3, [r4, #8]
 80062a0:	bf08      	it	eq
 80062a2:	1aad      	subeq	r5, r5, r2
 80062a4:	6922      	ldr	r2, [r4, #16]
 80062a6:	bf08      	it	eq
 80062a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80062ac:	4293      	cmp	r3, r2
 80062ae:	bfc4      	itt	gt
 80062b0:	1a9b      	subgt	r3, r3, r2
 80062b2:	18ed      	addgt	r5, r5, r3
 80062b4:	341a      	adds	r4, #26
 80062b6:	42b5      	cmp	r5, r6
 80062b8:	d11a      	bne.n	80062f0 <_printf_common+0xcc>
 80062ba:	2000      	movs	r0, #0
 80062bc:	e008      	b.n	80062d0 <_printf_common+0xac>
 80062be:	2301      	movs	r3, #1
 80062c0:	4652      	mov	r2, sl
 80062c2:	4649      	mov	r1, r9
 80062c4:	4638      	mov	r0, r7
 80062c6:	47c0      	blx	r8
 80062c8:	3001      	adds	r0, #1
 80062ca:	d103      	bne.n	80062d4 <_printf_common+0xb0>
 80062cc:	f04f 30ff 	mov.w	r0, #4294967295
 80062d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062d4:	3501      	adds	r5, #1
 80062d6:	e7c4      	b.n	8006262 <_printf_common+0x3e>
 80062d8:	2030      	movs	r0, #48	; 0x30
 80062da:	18e1      	adds	r1, r4, r3
 80062dc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80062e0:	1c5a      	adds	r2, r3, #1
 80062e2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80062e6:	4422      	add	r2, r4
 80062e8:	3302      	adds	r3, #2
 80062ea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80062ee:	e7c5      	b.n	800627c <_printf_common+0x58>
 80062f0:	2301      	movs	r3, #1
 80062f2:	4622      	mov	r2, r4
 80062f4:	4649      	mov	r1, r9
 80062f6:	4638      	mov	r0, r7
 80062f8:	47c0      	blx	r8
 80062fa:	3001      	adds	r0, #1
 80062fc:	d0e6      	beq.n	80062cc <_printf_common+0xa8>
 80062fe:	3601      	adds	r6, #1
 8006300:	e7d9      	b.n	80062b6 <_printf_common+0x92>
	...

08006304 <_printf_i>:
 8006304:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006308:	7e0f      	ldrb	r7, [r1, #24]
 800630a:	4691      	mov	r9, r2
 800630c:	2f78      	cmp	r7, #120	; 0x78
 800630e:	4680      	mov	r8, r0
 8006310:	460c      	mov	r4, r1
 8006312:	469a      	mov	sl, r3
 8006314:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006316:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800631a:	d807      	bhi.n	800632c <_printf_i+0x28>
 800631c:	2f62      	cmp	r7, #98	; 0x62
 800631e:	d80a      	bhi.n	8006336 <_printf_i+0x32>
 8006320:	2f00      	cmp	r7, #0
 8006322:	f000 80d9 	beq.w	80064d8 <_printf_i+0x1d4>
 8006326:	2f58      	cmp	r7, #88	; 0x58
 8006328:	f000 80a4 	beq.w	8006474 <_printf_i+0x170>
 800632c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006330:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006334:	e03a      	b.n	80063ac <_printf_i+0xa8>
 8006336:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800633a:	2b15      	cmp	r3, #21
 800633c:	d8f6      	bhi.n	800632c <_printf_i+0x28>
 800633e:	a101      	add	r1, pc, #4	; (adr r1, 8006344 <_printf_i+0x40>)
 8006340:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006344:	0800639d 	.word	0x0800639d
 8006348:	080063b1 	.word	0x080063b1
 800634c:	0800632d 	.word	0x0800632d
 8006350:	0800632d 	.word	0x0800632d
 8006354:	0800632d 	.word	0x0800632d
 8006358:	0800632d 	.word	0x0800632d
 800635c:	080063b1 	.word	0x080063b1
 8006360:	0800632d 	.word	0x0800632d
 8006364:	0800632d 	.word	0x0800632d
 8006368:	0800632d 	.word	0x0800632d
 800636c:	0800632d 	.word	0x0800632d
 8006370:	080064bf 	.word	0x080064bf
 8006374:	080063e1 	.word	0x080063e1
 8006378:	080064a1 	.word	0x080064a1
 800637c:	0800632d 	.word	0x0800632d
 8006380:	0800632d 	.word	0x0800632d
 8006384:	080064e1 	.word	0x080064e1
 8006388:	0800632d 	.word	0x0800632d
 800638c:	080063e1 	.word	0x080063e1
 8006390:	0800632d 	.word	0x0800632d
 8006394:	0800632d 	.word	0x0800632d
 8006398:	080064a9 	.word	0x080064a9
 800639c:	682b      	ldr	r3, [r5, #0]
 800639e:	1d1a      	adds	r2, r3, #4
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	602a      	str	r2, [r5, #0]
 80063a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80063a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80063ac:	2301      	movs	r3, #1
 80063ae:	e0a4      	b.n	80064fa <_printf_i+0x1f6>
 80063b0:	6820      	ldr	r0, [r4, #0]
 80063b2:	6829      	ldr	r1, [r5, #0]
 80063b4:	0606      	lsls	r6, r0, #24
 80063b6:	f101 0304 	add.w	r3, r1, #4
 80063ba:	d50a      	bpl.n	80063d2 <_printf_i+0xce>
 80063bc:	680e      	ldr	r6, [r1, #0]
 80063be:	602b      	str	r3, [r5, #0]
 80063c0:	2e00      	cmp	r6, #0
 80063c2:	da03      	bge.n	80063cc <_printf_i+0xc8>
 80063c4:	232d      	movs	r3, #45	; 0x2d
 80063c6:	4276      	negs	r6, r6
 80063c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063cc:	230a      	movs	r3, #10
 80063ce:	485e      	ldr	r0, [pc, #376]	; (8006548 <_printf_i+0x244>)
 80063d0:	e019      	b.n	8006406 <_printf_i+0x102>
 80063d2:	680e      	ldr	r6, [r1, #0]
 80063d4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80063d8:	602b      	str	r3, [r5, #0]
 80063da:	bf18      	it	ne
 80063dc:	b236      	sxthne	r6, r6
 80063de:	e7ef      	b.n	80063c0 <_printf_i+0xbc>
 80063e0:	682b      	ldr	r3, [r5, #0]
 80063e2:	6820      	ldr	r0, [r4, #0]
 80063e4:	1d19      	adds	r1, r3, #4
 80063e6:	6029      	str	r1, [r5, #0]
 80063e8:	0601      	lsls	r1, r0, #24
 80063ea:	d501      	bpl.n	80063f0 <_printf_i+0xec>
 80063ec:	681e      	ldr	r6, [r3, #0]
 80063ee:	e002      	b.n	80063f6 <_printf_i+0xf2>
 80063f0:	0646      	lsls	r6, r0, #25
 80063f2:	d5fb      	bpl.n	80063ec <_printf_i+0xe8>
 80063f4:	881e      	ldrh	r6, [r3, #0]
 80063f6:	2f6f      	cmp	r7, #111	; 0x6f
 80063f8:	bf0c      	ite	eq
 80063fa:	2308      	moveq	r3, #8
 80063fc:	230a      	movne	r3, #10
 80063fe:	4852      	ldr	r0, [pc, #328]	; (8006548 <_printf_i+0x244>)
 8006400:	2100      	movs	r1, #0
 8006402:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006406:	6865      	ldr	r5, [r4, #4]
 8006408:	2d00      	cmp	r5, #0
 800640a:	bfa8      	it	ge
 800640c:	6821      	ldrge	r1, [r4, #0]
 800640e:	60a5      	str	r5, [r4, #8]
 8006410:	bfa4      	itt	ge
 8006412:	f021 0104 	bicge.w	r1, r1, #4
 8006416:	6021      	strge	r1, [r4, #0]
 8006418:	b90e      	cbnz	r6, 800641e <_printf_i+0x11a>
 800641a:	2d00      	cmp	r5, #0
 800641c:	d04d      	beq.n	80064ba <_printf_i+0x1b6>
 800641e:	4615      	mov	r5, r2
 8006420:	fbb6 f1f3 	udiv	r1, r6, r3
 8006424:	fb03 6711 	mls	r7, r3, r1, r6
 8006428:	5dc7      	ldrb	r7, [r0, r7]
 800642a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800642e:	4637      	mov	r7, r6
 8006430:	42bb      	cmp	r3, r7
 8006432:	460e      	mov	r6, r1
 8006434:	d9f4      	bls.n	8006420 <_printf_i+0x11c>
 8006436:	2b08      	cmp	r3, #8
 8006438:	d10b      	bne.n	8006452 <_printf_i+0x14e>
 800643a:	6823      	ldr	r3, [r4, #0]
 800643c:	07de      	lsls	r6, r3, #31
 800643e:	d508      	bpl.n	8006452 <_printf_i+0x14e>
 8006440:	6923      	ldr	r3, [r4, #16]
 8006442:	6861      	ldr	r1, [r4, #4]
 8006444:	4299      	cmp	r1, r3
 8006446:	bfde      	ittt	le
 8006448:	2330      	movle	r3, #48	; 0x30
 800644a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800644e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006452:	1b52      	subs	r2, r2, r5
 8006454:	6122      	str	r2, [r4, #16]
 8006456:	464b      	mov	r3, r9
 8006458:	4621      	mov	r1, r4
 800645a:	4640      	mov	r0, r8
 800645c:	f8cd a000 	str.w	sl, [sp]
 8006460:	aa03      	add	r2, sp, #12
 8006462:	f7ff fedf 	bl	8006224 <_printf_common>
 8006466:	3001      	adds	r0, #1
 8006468:	d14c      	bne.n	8006504 <_printf_i+0x200>
 800646a:	f04f 30ff 	mov.w	r0, #4294967295
 800646e:	b004      	add	sp, #16
 8006470:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006474:	4834      	ldr	r0, [pc, #208]	; (8006548 <_printf_i+0x244>)
 8006476:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800647a:	6829      	ldr	r1, [r5, #0]
 800647c:	6823      	ldr	r3, [r4, #0]
 800647e:	f851 6b04 	ldr.w	r6, [r1], #4
 8006482:	6029      	str	r1, [r5, #0]
 8006484:	061d      	lsls	r5, r3, #24
 8006486:	d514      	bpl.n	80064b2 <_printf_i+0x1ae>
 8006488:	07df      	lsls	r7, r3, #31
 800648a:	bf44      	itt	mi
 800648c:	f043 0320 	orrmi.w	r3, r3, #32
 8006490:	6023      	strmi	r3, [r4, #0]
 8006492:	b91e      	cbnz	r6, 800649c <_printf_i+0x198>
 8006494:	6823      	ldr	r3, [r4, #0]
 8006496:	f023 0320 	bic.w	r3, r3, #32
 800649a:	6023      	str	r3, [r4, #0]
 800649c:	2310      	movs	r3, #16
 800649e:	e7af      	b.n	8006400 <_printf_i+0xfc>
 80064a0:	6823      	ldr	r3, [r4, #0]
 80064a2:	f043 0320 	orr.w	r3, r3, #32
 80064a6:	6023      	str	r3, [r4, #0]
 80064a8:	2378      	movs	r3, #120	; 0x78
 80064aa:	4828      	ldr	r0, [pc, #160]	; (800654c <_printf_i+0x248>)
 80064ac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80064b0:	e7e3      	b.n	800647a <_printf_i+0x176>
 80064b2:	0659      	lsls	r1, r3, #25
 80064b4:	bf48      	it	mi
 80064b6:	b2b6      	uxthmi	r6, r6
 80064b8:	e7e6      	b.n	8006488 <_printf_i+0x184>
 80064ba:	4615      	mov	r5, r2
 80064bc:	e7bb      	b.n	8006436 <_printf_i+0x132>
 80064be:	682b      	ldr	r3, [r5, #0]
 80064c0:	6826      	ldr	r6, [r4, #0]
 80064c2:	1d18      	adds	r0, r3, #4
 80064c4:	6961      	ldr	r1, [r4, #20]
 80064c6:	6028      	str	r0, [r5, #0]
 80064c8:	0635      	lsls	r5, r6, #24
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	d501      	bpl.n	80064d2 <_printf_i+0x1ce>
 80064ce:	6019      	str	r1, [r3, #0]
 80064d0:	e002      	b.n	80064d8 <_printf_i+0x1d4>
 80064d2:	0670      	lsls	r0, r6, #25
 80064d4:	d5fb      	bpl.n	80064ce <_printf_i+0x1ca>
 80064d6:	8019      	strh	r1, [r3, #0]
 80064d8:	2300      	movs	r3, #0
 80064da:	4615      	mov	r5, r2
 80064dc:	6123      	str	r3, [r4, #16]
 80064de:	e7ba      	b.n	8006456 <_printf_i+0x152>
 80064e0:	682b      	ldr	r3, [r5, #0]
 80064e2:	2100      	movs	r1, #0
 80064e4:	1d1a      	adds	r2, r3, #4
 80064e6:	602a      	str	r2, [r5, #0]
 80064e8:	681d      	ldr	r5, [r3, #0]
 80064ea:	6862      	ldr	r2, [r4, #4]
 80064ec:	4628      	mov	r0, r5
 80064ee:	f000 f82f 	bl	8006550 <memchr>
 80064f2:	b108      	cbz	r0, 80064f8 <_printf_i+0x1f4>
 80064f4:	1b40      	subs	r0, r0, r5
 80064f6:	6060      	str	r0, [r4, #4]
 80064f8:	6863      	ldr	r3, [r4, #4]
 80064fa:	6123      	str	r3, [r4, #16]
 80064fc:	2300      	movs	r3, #0
 80064fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006502:	e7a8      	b.n	8006456 <_printf_i+0x152>
 8006504:	462a      	mov	r2, r5
 8006506:	4649      	mov	r1, r9
 8006508:	4640      	mov	r0, r8
 800650a:	6923      	ldr	r3, [r4, #16]
 800650c:	47d0      	blx	sl
 800650e:	3001      	adds	r0, #1
 8006510:	d0ab      	beq.n	800646a <_printf_i+0x166>
 8006512:	6823      	ldr	r3, [r4, #0]
 8006514:	079b      	lsls	r3, r3, #30
 8006516:	d413      	bmi.n	8006540 <_printf_i+0x23c>
 8006518:	68e0      	ldr	r0, [r4, #12]
 800651a:	9b03      	ldr	r3, [sp, #12]
 800651c:	4298      	cmp	r0, r3
 800651e:	bfb8      	it	lt
 8006520:	4618      	movlt	r0, r3
 8006522:	e7a4      	b.n	800646e <_printf_i+0x16a>
 8006524:	2301      	movs	r3, #1
 8006526:	4632      	mov	r2, r6
 8006528:	4649      	mov	r1, r9
 800652a:	4640      	mov	r0, r8
 800652c:	47d0      	blx	sl
 800652e:	3001      	adds	r0, #1
 8006530:	d09b      	beq.n	800646a <_printf_i+0x166>
 8006532:	3501      	adds	r5, #1
 8006534:	68e3      	ldr	r3, [r4, #12]
 8006536:	9903      	ldr	r1, [sp, #12]
 8006538:	1a5b      	subs	r3, r3, r1
 800653a:	42ab      	cmp	r3, r5
 800653c:	dcf2      	bgt.n	8006524 <_printf_i+0x220>
 800653e:	e7eb      	b.n	8006518 <_printf_i+0x214>
 8006540:	2500      	movs	r5, #0
 8006542:	f104 0619 	add.w	r6, r4, #25
 8006546:	e7f5      	b.n	8006534 <_printf_i+0x230>
 8006548:	08006969 	.word	0x08006969
 800654c:	0800697a 	.word	0x0800697a

08006550 <memchr>:
 8006550:	4603      	mov	r3, r0
 8006552:	b510      	push	{r4, lr}
 8006554:	b2c9      	uxtb	r1, r1
 8006556:	4402      	add	r2, r0
 8006558:	4293      	cmp	r3, r2
 800655a:	4618      	mov	r0, r3
 800655c:	d101      	bne.n	8006562 <memchr+0x12>
 800655e:	2000      	movs	r0, #0
 8006560:	e003      	b.n	800656a <memchr+0x1a>
 8006562:	7804      	ldrb	r4, [r0, #0]
 8006564:	3301      	adds	r3, #1
 8006566:	428c      	cmp	r4, r1
 8006568:	d1f6      	bne.n	8006558 <memchr+0x8>
 800656a:	bd10      	pop	{r4, pc}

0800656c <memmove>:
 800656c:	4288      	cmp	r0, r1
 800656e:	b510      	push	{r4, lr}
 8006570:	eb01 0402 	add.w	r4, r1, r2
 8006574:	d902      	bls.n	800657c <memmove+0x10>
 8006576:	4284      	cmp	r4, r0
 8006578:	4623      	mov	r3, r4
 800657a:	d807      	bhi.n	800658c <memmove+0x20>
 800657c:	1e43      	subs	r3, r0, #1
 800657e:	42a1      	cmp	r1, r4
 8006580:	d008      	beq.n	8006594 <memmove+0x28>
 8006582:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006586:	f803 2f01 	strb.w	r2, [r3, #1]!
 800658a:	e7f8      	b.n	800657e <memmove+0x12>
 800658c:	4601      	mov	r1, r0
 800658e:	4402      	add	r2, r0
 8006590:	428a      	cmp	r2, r1
 8006592:	d100      	bne.n	8006596 <memmove+0x2a>
 8006594:	bd10      	pop	{r4, pc}
 8006596:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800659a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800659e:	e7f7      	b.n	8006590 <memmove+0x24>

080065a0 <_free_r>:
 80065a0:	b538      	push	{r3, r4, r5, lr}
 80065a2:	4605      	mov	r5, r0
 80065a4:	2900      	cmp	r1, #0
 80065a6:	d040      	beq.n	800662a <_free_r+0x8a>
 80065a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065ac:	1f0c      	subs	r4, r1, #4
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	bfb8      	it	lt
 80065b2:	18e4      	addlt	r4, r4, r3
 80065b4:	f000 f910 	bl	80067d8 <__malloc_lock>
 80065b8:	4a1c      	ldr	r2, [pc, #112]	; (800662c <_free_r+0x8c>)
 80065ba:	6813      	ldr	r3, [r2, #0]
 80065bc:	b933      	cbnz	r3, 80065cc <_free_r+0x2c>
 80065be:	6063      	str	r3, [r4, #4]
 80065c0:	6014      	str	r4, [r2, #0]
 80065c2:	4628      	mov	r0, r5
 80065c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80065c8:	f000 b90c 	b.w	80067e4 <__malloc_unlock>
 80065cc:	42a3      	cmp	r3, r4
 80065ce:	d908      	bls.n	80065e2 <_free_r+0x42>
 80065d0:	6820      	ldr	r0, [r4, #0]
 80065d2:	1821      	adds	r1, r4, r0
 80065d4:	428b      	cmp	r3, r1
 80065d6:	bf01      	itttt	eq
 80065d8:	6819      	ldreq	r1, [r3, #0]
 80065da:	685b      	ldreq	r3, [r3, #4]
 80065dc:	1809      	addeq	r1, r1, r0
 80065de:	6021      	streq	r1, [r4, #0]
 80065e0:	e7ed      	b.n	80065be <_free_r+0x1e>
 80065e2:	461a      	mov	r2, r3
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	b10b      	cbz	r3, 80065ec <_free_r+0x4c>
 80065e8:	42a3      	cmp	r3, r4
 80065ea:	d9fa      	bls.n	80065e2 <_free_r+0x42>
 80065ec:	6811      	ldr	r1, [r2, #0]
 80065ee:	1850      	adds	r0, r2, r1
 80065f0:	42a0      	cmp	r0, r4
 80065f2:	d10b      	bne.n	800660c <_free_r+0x6c>
 80065f4:	6820      	ldr	r0, [r4, #0]
 80065f6:	4401      	add	r1, r0
 80065f8:	1850      	adds	r0, r2, r1
 80065fa:	4283      	cmp	r3, r0
 80065fc:	6011      	str	r1, [r2, #0]
 80065fe:	d1e0      	bne.n	80065c2 <_free_r+0x22>
 8006600:	6818      	ldr	r0, [r3, #0]
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	4401      	add	r1, r0
 8006606:	6011      	str	r1, [r2, #0]
 8006608:	6053      	str	r3, [r2, #4]
 800660a:	e7da      	b.n	80065c2 <_free_r+0x22>
 800660c:	d902      	bls.n	8006614 <_free_r+0x74>
 800660e:	230c      	movs	r3, #12
 8006610:	602b      	str	r3, [r5, #0]
 8006612:	e7d6      	b.n	80065c2 <_free_r+0x22>
 8006614:	6820      	ldr	r0, [r4, #0]
 8006616:	1821      	adds	r1, r4, r0
 8006618:	428b      	cmp	r3, r1
 800661a:	bf01      	itttt	eq
 800661c:	6819      	ldreq	r1, [r3, #0]
 800661e:	685b      	ldreq	r3, [r3, #4]
 8006620:	1809      	addeq	r1, r1, r0
 8006622:	6021      	streq	r1, [r4, #0]
 8006624:	6063      	str	r3, [r4, #4]
 8006626:	6054      	str	r4, [r2, #4]
 8006628:	e7cb      	b.n	80065c2 <_free_r+0x22>
 800662a:	bd38      	pop	{r3, r4, r5, pc}
 800662c:	2000048c 	.word	0x2000048c

08006630 <sbrk_aligned>:
 8006630:	b570      	push	{r4, r5, r6, lr}
 8006632:	4e0e      	ldr	r6, [pc, #56]	; (800666c <sbrk_aligned+0x3c>)
 8006634:	460c      	mov	r4, r1
 8006636:	6831      	ldr	r1, [r6, #0]
 8006638:	4605      	mov	r5, r0
 800663a:	b911      	cbnz	r1, 8006642 <sbrk_aligned+0x12>
 800663c:	f000 f8bc 	bl	80067b8 <_sbrk_r>
 8006640:	6030      	str	r0, [r6, #0]
 8006642:	4621      	mov	r1, r4
 8006644:	4628      	mov	r0, r5
 8006646:	f000 f8b7 	bl	80067b8 <_sbrk_r>
 800664a:	1c43      	adds	r3, r0, #1
 800664c:	d00a      	beq.n	8006664 <sbrk_aligned+0x34>
 800664e:	1cc4      	adds	r4, r0, #3
 8006650:	f024 0403 	bic.w	r4, r4, #3
 8006654:	42a0      	cmp	r0, r4
 8006656:	d007      	beq.n	8006668 <sbrk_aligned+0x38>
 8006658:	1a21      	subs	r1, r4, r0
 800665a:	4628      	mov	r0, r5
 800665c:	f000 f8ac 	bl	80067b8 <_sbrk_r>
 8006660:	3001      	adds	r0, #1
 8006662:	d101      	bne.n	8006668 <sbrk_aligned+0x38>
 8006664:	f04f 34ff 	mov.w	r4, #4294967295
 8006668:	4620      	mov	r0, r4
 800666a:	bd70      	pop	{r4, r5, r6, pc}
 800666c:	20000490 	.word	0x20000490

08006670 <_malloc_r>:
 8006670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006674:	1ccd      	adds	r5, r1, #3
 8006676:	f025 0503 	bic.w	r5, r5, #3
 800667a:	3508      	adds	r5, #8
 800667c:	2d0c      	cmp	r5, #12
 800667e:	bf38      	it	cc
 8006680:	250c      	movcc	r5, #12
 8006682:	2d00      	cmp	r5, #0
 8006684:	4607      	mov	r7, r0
 8006686:	db01      	blt.n	800668c <_malloc_r+0x1c>
 8006688:	42a9      	cmp	r1, r5
 800668a:	d905      	bls.n	8006698 <_malloc_r+0x28>
 800668c:	230c      	movs	r3, #12
 800668e:	2600      	movs	r6, #0
 8006690:	603b      	str	r3, [r7, #0]
 8006692:	4630      	mov	r0, r6
 8006694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006698:	4e2e      	ldr	r6, [pc, #184]	; (8006754 <_malloc_r+0xe4>)
 800669a:	f000 f89d 	bl	80067d8 <__malloc_lock>
 800669e:	6833      	ldr	r3, [r6, #0]
 80066a0:	461c      	mov	r4, r3
 80066a2:	bb34      	cbnz	r4, 80066f2 <_malloc_r+0x82>
 80066a4:	4629      	mov	r1, r5
 80066a6:	4638      	mov	r0, r7
 80066a8:	f7ff ffc2 	bl	8006630 <sbrk_aligned>
 80066ac:	1c43      	adds	r3, r0, #1
 80066ae:	4604      	mov	r4, r0
 80066b0:	d14d      	bne.n	800674e <_malloc_r+0xde>
 80066b2:	6834      	ldr	r4, [r6, #0]
 80066b4:	4626      	mov	r6, r4
 80066b6:	2e00      	cmp	r6, #0
 80066b8:	d140      	bne.n	800673c <_malloc_r+0xcc>
 80066ba:	6823      	ldr	r3, [r4, #0]
 80066bc:	4631      	mov	r1, r6
 80066be:	4638      	mov	r0, r7
 80066c0:	eb04 0803 	add.w	r8, r4, r3
 80066c4:	f000 f878 	bl	80067b8 <_sbrk_r>
 80066c8:	4580      	cmp	r8, r0
 80066ca:	d13a      	bne.n	8006742 <_malloc_r+0xd2>
 80066cc:	6821      	ldr	r1, [r4, #0]
 80066ce:	3503      	adds	r5, #3
 80066d0:	1a6d      	subs	r5, r5, r1
 80066d2:	f025 0503 	bic.w	r5, r5, #3
 80066d6:	3508      	adds	r5, #8
 80066d8:	2d0c      	cmp	r5, #12
 80066da:	bf38      	it	cc
 80066dc:	250c      	movcc	r5, #12
 80066de:	4638      	mov	r0, r7
 80066e0:	4629      	mov	r1, r5
 80066e2:	f7ff ffa5 	bl	8006630 <sbrk_aligned>
 80066e6:	3001      	adds	r0, #1
 80066e8:	d02b      	beq.n	8006742 <_malloc_r+0xd2>
 80066ea:	6823      	ldr	r3, [r4, #0]
 80066ec:	442b      	add	r3, r5
 80066ee:	6023      	str	r3, [r4, #0]
 80066f0:	e00e      	b.n	8006710 <_malloc_r+0xa0>
 80066f2:	6822      	ldr	r2, [r4, #0]
 80066f4:	1b52      	subs	r2, r2, r5
 80066f6:	d41e      	bmi.n	8006736 <_malloc_r+0xc6>
 80066f8:	2a0b      	cmp	r2, #11
 80066fa:	d916      	bls.n	800672a <_malloc_r+0xba>
 80066fc:	1961      	adds	r1, r4, r5
 80066fe:	42a3      	cmp	r3, r4
 8006700:	6025      	str	r5, [r4, #0]
 8006702:	bf18      	it	ne
 8006704:	6059      	strne	r1, [r3, #4]
 8006706:	6863      	ldr	r3, [r4, #4]
 8006708:	bf08      	it	eq
 800670a:	6031      	streq	r1, [r6, #0]
 800670c:	5162      	str	r2, [r4, r5]
 800670e:	604b      	str	r3, [r1, #4]
 8006710:	4638      	mov	r0, r7
 8006712:	f104 060b 	add.w	r6, r4, #11
 8006716:	f000 f865 	bl	80067e4 <__malloc_unlock>
 800671a:	f026 0607 	bic.w	r6, r6, #7
 800671e:	1d23      	adds	r3, r4, #4
 8006720:	1af2      	subs	r2, r6, r3
 8006722:	d0b6      	beq.n	8006692 <_malloc_r+0x22>
 8006724:	1b9b      	subs	r3, r3, r6
 8006726:	50a3      	str	r3, [r4, r2]
 8006728:	e7b3      	b.n	8006692 <_malloc_r+0x22>
 800672a:	6862      	ldr	r2, [r4, #4]
 800672c:	42a3      	cmp	r3, r4
 800672e:	bf0c      	ite	eq
 8006730:	6032      	streq	r2, [r6, #0]
 8006732:	605a      	strne	r2, [r3, #4]
 8006734:	e7ec      	b.n	8006710 <_malloc_r+0xa0>
 8006736:	4623      	mov	r3, r4
 8006738:	6864      	ldr	r4, [r4, #4]
 800673a:	e7b2      	b.n	80066a2 <_malloc_r+0x32>
 800673c:	4634      	mov	r4, r6
 800673e:	6876      	ldr	r6, [r6, #4]
 8006740:	e7b9      	b.n	80066b6 <_malloc_r+0x46>
 8006742:	230c      	movs	r3, #12
 8006744:	4638      	mov	r0, r7
 8006746:	603b      	str	r3, [r7, #0]
 8006748:	f000 f84c 	bl	80067e4 <__malloc_unlock>
 800674c:	e7a1      	b.n	8006692 <_malloc_r+0x22>
 800674e:	6025      	str	r5, [r4, #0]
 8006750:	e7de      	b.n	8006710 <_malloc_r+0xa0>
 8006752:	bf00      	nop
 8006754:	2000048c 	.word	0x2000048c

08006758 <_realloc_r>:
 8006758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800675c:	4680      	mov	r8, r0
 800675e:	4614      	mov	r4, r2
 8006760:	460e      	mov	r6, r1
 8006762:	b921      	cbnz	r1, 800676e <_realloc_r+0x16>
 8006764:	4611      	mov	r1, r2
 8006766:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800676a:	f7ff bf81 	b.w	8006670 <_malloc_r>
 800676e:	b92a      	cbnz	r2, 800677c <_realloc_r+0x24>
 8006770:	f7ff ff16 	bl	80065a0 <_free_r>
 8006774:	4625      	mov	r5, r4
 8006776:	4628      	mov	r0, r5
 8006778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800677c:	f000 f838 	bl	80067f0 <_malloc_usable_size_r>
 8006780:	4284      	cmp	r4, r0
 8006782:	4607      	mov	r7, r0
 8006784:	d802      	bhi.n	800678c <_realloc_r+0x34>
 8006786:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800678a:	d812      	bhi.n	80067b2 <_realloc_r+0x5a>
 800678c:	4621      	mov	r1, r4
 800678e:	4640      	mov	r0, r8
 8006790:	f7ff ff6e 	bl	8006670 <_malloc_r>
 8006794:	4605      	mov	r5, r0
 8006796:	2800      	cmp	r0, #0
 8006798:	d0ed      	beq.n	8006776 <_realloc_r+0x1e>
 800679a:	42bc      	cmp	r4, r7
 800679c:	4622      	mov	r2, r4
 800679e:	4631      	mov	r1, r6
 80067a0:	bf28      	it	cs
 80067a2:	463a      	movcs	r2, r7
 80067a4:	f7ff fb8c 	bl	8005ec0 <memcpy>
 80067a8:	4631      	mov	r1, r6
 80067aa:	4640      	mov	r0, r8
 80067ac:	f7ff fef8 	bl	80065a0 <_free_r>
 80067b0:	e7e1      	b.n	8006776 <_realloc_r+0x1e>
 80067b2:	4635      	mov	r5, r6
 80067b4:	e7df      	b.n	8006776 <_realloc_r+0x1e>
	...

080067b8 <_sbrk_r>:
 80067b8:	b538      	push	{r3, r4, r5, lr}
 80067ba:	2300      	movs	r3, #0
 80067bc:	4d05      	ldr	r5, [pc, #20]	; (80067d4 <_sbrk_r+0x1c>)
 80067be:	4604      	mov	r4, r0
 80067c0:	4608      	mov	r0, r1
 80067c2:	602b      	str	r3, [r5, #0]
 80067c4:	f7fc fb14 	bl	8002df0 <_sbrk>
 80067c8:	1c43      	adds	r3, r0, #1
 80067ca:	d102      	bne.n	80067d2 <_sbrk_r+0x1a>
 80067cc:	682b      	ldr	r3, [r5, #0]
 80067ce:	b103      	cbz	r3, 80067d2 <_sbrk_r+0x1a>
 80067d0:	6023      	str	r3, [r4, #0]
 80067d2:	bd38      	pop	{r3, r4, r5, pc}
 80067d4:	20000494 	.word	0x20000494

080067d8 <__malloc_lock>:
 80067d8:	4801      	ldr	r0, [pc, #4]	; (80067e0 <__malloc_lock+0x8>)
 80067da:	f000 b811 	b.w	8006800 <__retarget_lock_acquire_recursive>
 80067de:	bf00      	nop
 80067e0:	20000498 	.word	0x20000498

080067e4 <__malloc_unlock>:
 80067e4:	4801      	ldr	r0, [pc, #4]	; (80067ec <__malloc_unlock+0x8>)
 80067e6:	f000 b80c 	b.w	8006802 <__retarget_lock_release_recursive>
 80067ea:	bf00      	nop
 80067ec:	20000498 	.word	0x20000498

080067f0 <_malloc_usable_size_r>:
 80067f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067f4:	1f18      	subs	r0, r3, #4
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	bfbc      	itt	lt
 80067fa:	580b      	ldrlt	r3, [r1, r0]
 80067fc:	18c0      	addlt	r0, r0, r3
 80067fe:	4770      	bx	lr

08006800 <__retarget_lock_acquire_recursive>:
 8006800:	4770      	bx	lr

08006802 <__retarget_lock_release_recursive>:
 8006802:	4770      	bx	lr

08006804 <_init>:
 8006804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006806:	bf00      	nop
 8006808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800680a:	bc08      	pop	{r3}
 800680c:	469e      	mov	lr, r3
 800680e:	4770      	bx	lr

08006810 <_fini>:
 8006810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006812:	bf00      	nop
 8006814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006816:	bc08      	pop	{r3}
 8006818:	469e      	mov	lr, r3
 800681a:	4770      	bx	lr
